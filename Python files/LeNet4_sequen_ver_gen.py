#!/usr/bin/env python
# coding: utf-8

# In[1]:


from __future__ import print_function
import keras
from keras.datasets import mnist
from keras.models import Sequential, load_model
from keras.layers import Dense, Dropout, Flatten
from keras.layers import Conv2D, MaxPooling2D
from keras import backend as K
import numpy as np
#import cv2
import time
ts = time.time()
import datetime
st = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')

LAYERS=8
BITWIDTH_IN=8
BITWIDTH_W=8
BITWIDTH_B=8
BITWIDTH_C1=16
KERNELHEIGHT_C1=3
KERNELWIDTH_C1=3
DATAWIDTH_IN=28
DATAHEIGHT_IN=28
STRIDEWIDTH_C1=1
STRIDEHEIGHT_C1=1
FILTERBATCH_C1=6
DATAWIDTH_M1=26
BITWIDTH_M1=16
DATAWIDTH_M1=int((DATAWIDTH_IN-KERNELWIDTH_C1)/STRIDEWIDTH_C1)+1 #26
DATAHEIGHT_M1=int((DATAHEIGHT_IN-KERNELHEIGHT_C1)/STRIDEHEIGHT_C1)+1 #26
STRIDEWIDTH_POOL_M1=2
STRIDEHEIGHT_POOL_M1=2
KERNELWIDTH_POOL_M1=2
KERNELHEIGHT_POOL_M1=2
DATAWIDTH_C2=int((DATAWIDTH_M1-KERNELWIDTH_POOL_M1)/STRIDEWIDTH_POOL_M1)+1 #13
DATAHEIGHT_C2=int((DATAHEIGHT_M1-KERNELHEIGHT_POOL_M1)/STRIDEHEIGHT_POOL_M1)+1 #13
BITWIDTH_C2=16
KERNELHEIGHT_C2=3
KERNELWIDTH_C2=3
STRIDEWIDTH_C2=1
STRIDEHEIGHT_C2=1
DATAWIDTH_M2=int((DATAWIDTH_C2-KERNELWIDTH_C2)/STRIDEWIDTH_C2)+1 #11
DATAHEIGHT_M2=int((DATAHEIGHT_C2-KERNELHEIGHT_C2)/STRIDEHEIGHT_C2)+1 #11
FILTERBATCH_C2=16
BITWIDTH_M2=16
STRIDEWIDTH_POOL_M2=2
STRIDEHEIGHT_POOL_M2=2
if(DATAWIDTH_M2%2==0): 
    KERNELWIDTH_POOL_M2=2
    KERNELHEIGHT_POOL_M2=2
else:
    KERNELWIDTH_POOL_M2=3
    KERNELHEIGHT_POOL_M2=3
DATAWIDTH_D1=int((DATAWIDTH_M2-KERNELWIDTH_POOL_M2)/STRIDEWIDTH_POOL_M2)+1 #5
DATAHEIGHT_D1=int((DATAHEIGHT_M2-KERNELHEIGHT_POOL_M2)/STRIDEHEIGHT_POOL_M2)+1 #5
NEURONS_D1=100
NEURONS_D2=10
BITWIDTH_D1=16
BITWIDTH_D2=32
BITWIDTH_SM=32

ADDR_WIDTH=16
DATA_WIDTH=8
DEPTH=2**ADDR_WIDTH

OFFSET_C1_W=784 #starting address for c1 layer weights 
OFFSET_C1_B=OFFSET_C1_W+FILTERBATCH_C1*KERNELHEIGHT_C1*KERNELWIDTH_C1  #starting address for c1 layer bias
OFFSET_C2_W=OFFSET_C1_B+FILTERBATCH_C1
OFFSET_C2_B=OFFSET_C2_W+FILTERBATCH_C1*FILTERBATCH_C2*KERNELHEIGHT_C2*KERNELWIDTH_C2
OFFSET_D1_W=OFFSET_C2_B+FILTERBATCH_C2 #starting address for d1 layer weights 
OFFSET_D1_B=OFFSET_D1_W+(FILTERBATCH_C2*DATAWIDTH_D1*DATAHEIGHT_D1*NEURONS_D1) #starting address for d1 layer bias
OFFSET_D2_W=OFFSET_D1_B+NEURONS_D1 #starting address for d1 layer weights 
OFFSET_D2_B=OFFSET_D2_W+(NEURONS_D1*NEURONS_D2)
ADDR_WIDTH_BUF=8
DATA_WIDTH_BUF=16
DEPTH_BUF=2**ADDR_WIDTH_BUF
#ADDR_WIDTH_BUF_C1=10
#DEPTH_BUF_C1=2**ADDR_WIDTH_BUF_C1
if (DATAWIDTH_M1*DATAHEIGHT_M1*FILTERBATCH_C1<1024):
    ADDR_WIDTH_BUF_C1=10
    ADDR_WIDTH_BUF_M1=8
elif (DATAWIDTH_M1*DATAHEIGHT_M1*FILTERBATCH_C1<2048):
    ADDR_WIDTH_BUF_C1=11
    ADDR_WIDTH_BUF_M1=9
elif (DATAWIDTH_M1*DATAHEIGHT_M1*FILTERBATCH_C1<4096):
    ADDR_WIDTH_BUF_C1=12
    ADDR_WIDTH_BUF_M1=10
elif (DATAWIDTH_M1*DATAHEIGHT_M1*FILTERBATCH_C1<8192):
    ADDR_WIDTH_BUF_C1=13
    ADDR_WIDTH_BUF_M1=11
elif (DATAWIDTH_M1*DATAHEIGHT_M1*FILTERBATCH_C1<16384):
    ADDR_WIDTH_BUF_C1=14
    ADDR_WIDTH_BUF_M1=12
    
if (DATAWIDTH_M2*DATAHEIGHT_M2*FILTERBATCH_C2<128):
    ADDR_WIDTH_BUF_C2=7
    ADDR_WIDTH_BUF_M2=5
elif (DATAWIDTH_M2*DATAHEIGHT_M2*FILTERBATCH_C2<256):
    ADDR_WIDTH_BUF_C2=8
    ADDR_WIDTH_BUF_M2=6
elif (DATAWIDTH_M2*DATAHEIGHT_M2*FILTERBATCH_C2<512):
    ADDR_WIDTH_BUF_C2=9
    ADDR_WIDTH_BUF_M2=7
elif (DATAWIDTH_M2*DATAHEIGHT_M2*FILTERBATCH_C2<1024):
    ADDR_WIDTH_BUF_C2=10
    ADDR_WIDTH_BUF_M2=8
elif (DATAWIDTH_M2*DATAHEIGHT_M2*FILTERBATCH_C2<2048):
    ADDR_WIDTH_BUF_C2=11
    ADDR_WIDTH_BUF_M2=9
elif (DATAWIDTH_M2*DATAHEIGHT_M2*FILTERBATCH_C2<4096):
    ADDR_WIDTH_BUF_C2=12
    ADDR_WIDTH_BUF_M2=10
    

if(NEURONS_D1<15):
    ADDR_WIDTH_BUF_D1=4
elif(NEURONS_D1<31):
    ADDR_WIDTH_BUF_D1=5
elif(NEURONS_D1<63):
    ADDR_WIDTH_BUF_D1=6
elif(NEURONS_D1<127):
    ADDR_WIDTH_BUF_D1=7
elif(NEURONS_D1<255):
    ADDR_WIDTH_BUF_D1=8
elif(NEURONS_D1<511):
    ADDR_WIDTH_BUF_D1=9
elif(NEURONS_D1<1023):
    ADDR_WIDTH_BUF_D1=10

    
DEPTH_BUF_C1=2**ADDR_WIDTH_BUF_C1
DEPTH_BUF_M1=2**ADDR_WIDTH_BUF_M1
DEPTH_BUF_C2=2**ADDR_WIDTH_BUF_C2
DEPTH_BUF_M2=2**ADDR_WIDTH_BUF_M2
DEPTH_BUF_D1=2**ADDR_WIDTH_BUF_D1

if(FILTERBATCH_C1<3):
    count_c1=1
elif(FILTERBATCH_C1<7):
    count_c1=2
elif(FILTERBATCH_C1<15):
    count_c1=3
elif(FILTERBATCH_C1<31):
    count_c1=4

if(FILTERBATCH_C2<3):
    count_c2=1
elif(FILTERBATCH_C2<7):
    count_c2=2
elif(FILTERBATCH_C2<15):
    count_c2=3
elif(FILTERBATCH_C2<31):
    count_c2=4
    
if(KERNELWIDTH_C1==3):
    count_conv_c1=3
if(KERNELWIDTH_C1==5):
    count_conv_c1=4
    
if(KERNELWIDTH_C2==3):
    count_ck_c2d=3
elif(KERNELWIDTH_C2==5):
    count_ck_c2d=4

if(NEURONS_D1<31):
    count_d1=4
elif(NEURONS_D1<63):
    count_d1=5
elif(NEURONS_D1<127):
    count_d1=6
elif(NEURONS_D1<255):
    count_d1=7


file=open('top.v','w')
file.write('`timescale 1ns / 1ps\n')
file.write('//////////////////////////////////////////////////////////////////////////////////\n')
file.write('// Company: NTU Singapore\n')
file.write('// Engineer: Arish S\n')
file.write('//\n')
file.write('// Create Date: {}\n'.format(st))
file.write('// Design Name: \n')
file.write('// Module Name: top\n')
file.write('// Project Name: \n')
file.write('// Target Devices:\n')
file.write('// Tool Versions: \n')
file.write('// Description: \n')
file.write('//\n')
file.write('// Dependencies: \n')
file.write('//\n')
file.write('// Revision:\n')
file.write('// Revision 0.01 - File Created\n')
file.write('// Additional Comments:\n')
file.write('//\n')
file.write('//////////////////////////////////////////////////////////////////////////////////\n')
file.write('\n')
file.write('\n')
file.write('module top#(\n')
file.write('  parameter integer BITWIDTH_IN={},\n'.format(BITWIDTH_IN))
file.write('  parameter integer BITWIDTH_W={},\n'.format(BITWIDTH_W))
file.write('  parameter integer BITWIDTH_B={},\n'.format(BITWIDTH_B))
file.write('  parameter integer BITWIDTH_C1={},\n'.format(BITWIDTH_C1))
file.write('  parameter integer KERNELHEIGHT_C1={},\n'.format(KERNELHEIGHT_C1))
file.write('  parameter integer KERNELWIDTH_C1={},\n'.format(KERNELWIDTH_C1))
file.write('  parameter integer DATAWIDTH_IN={},\n'.format(DATAWIDTH_IN))
file.write('  parameter integer DATAHEIGHT_IN={},\n'.format(DATAHEIGHT_IN))
file.write('  parameter integer STRIDEWIDTH_C1={},\n'.format(STRIDEWIDTH_C1))
file.write('  parameter integer STRIDEHEIGHT_C1={},\n'.format(STRIDEHEIGHT_C1))
file.write('  parameter integer FILTERBATCH_C1={},\n'.format(FILTERBATCH_C1))
file.write('  parameter integer DATAWIDTH_M1={},\n'.format(DATAWIDTH_M1))
file.write('  parameter integer DATAHEIGHT_M1={},\n'.format(DATAHEIGHT_M1))
file.write('  parameter integer BITWIDTH_M1={},\n'.format(BITWIDTH_M1))
file.write('  parameter integer STRIDEWIDTH_POOL_M1={},\n'.format(STRIDEWIDTH_POOL_M1))
file.write('  parameter integer STRIDEHEIGHT_POOL_M1={},\n'.format(STRIDEHEIGHT_POOL_M1))
file.write('  parameter integer KERNELWIDTH_POOL_M1={},\n'.format(KERNELWIDTH_POOL_M1))
file.write('  parameter integer KERNELHEIGHT_POOL_M1={},\n'.format(KERNELHEIGHT_POOL_M1))
file.write('  parameter integer DATAWIDTH_C2={},\n'.format(DATAWIDTH_C2))
file.write('  parameter integer DATAHEIGHT_C2={},\n'.format(DATAHEIGHT_C2))
file.write('  parameter integer BITWIDTH_C2={},\n'.format(BITWIDTH_C2))
file.write('  parameter integer KERNELHEIGHT_C2={},\n'.format(KERNELHEIGHT_C2))
file.write('  parameter integer KERNELWIDTH_C2={},\n'.format(KERNELWIDTH_C2))
file.write('  parameter integer STRIDEWIDTH_C2={},\n'.format(STRIDEWIDTH_C2))
file.write('  parameter integer STRIDEHEIGHT_C2={},\n'.format(STRIDEHEIGHT_C2))
file.write('  parameter integer FILTERBATCH_C2={},\n'.format(FILTERBATCH_C2))
file.write('  parameter integer DATAWIDTH_M2={},\n'.format(DATAWIDTH_M2))
file.write('  parameter integer DATAHEIGHT_M2={},\n'.format(DATAHEIGHT_M2))
file.write('  parameter integer BITWIDTH_M2={},\n'.format(BITWIDTH_M2))
file.write('  parameter integer STRIDEWIDTH_POOL_M2={},\n'.format(STRIDEWIDTH_POOL_M2))
file.write('  parameter integer STRIDEHEIGHT_POOL_M2={},\n'.format(STRIDEHEIGHT_POOL_M2))
file.write('  parameter integer KERNELWIDTH_POOL_M2={},\n'.format(KERNELWIDTH_POOL_M2))
file.write('  parameter integer KERNELHEIGHT_POOL_M2={},\n'.format(KERNELHEIGHT_POOL_M2))
file.write('  parameter integer DATAWIDTH_D1={},\n'.format(DATAWIDTH_D1))
file.write('  parameter integer DATAHEIGHT_D1={},\n'.format(DATAHEIGHT_D1))
file.write('  parameter integer NEURONS_D1={},\n'.format(NEURONS_D1))
file.write('  parameter integer NEURONS_D2={},\n'.format(NEURONS_D2))
file.write('  parameter integer BITWIDTH_D1={},\n'.format(BITWIDTH_D1))
file.write('  parameter integer BITWIDTH_D2={},\n'.format(BITWIDTH_D2))
file.write('  parameter integer BITWIDTH_SM={},\n'.format(BITWIDTH_SM))
file.write('  parameter integer ADDR_WIDTH={},\n'.format(ADDR_WIDTH))
file.write('  parameter integer DATA_WIDTH={},\n'.format(DATA_WIDTH))
file.write('  parameter integer DEPTH={},\n'.format(DEPTH))
file.write('  parameter integer OFFSET_C2_W={},\n'.format(OFFSET_C2_W))
file.write('  parameter integer OFFSET_C2_B={},\n'.format(OFFSET_C2_B))
file.write('  parameter integer OFFSET_D1_W={},\n'.format(OFFSET_D1_W))
file.write('  parameter integer OFFSET_D1_B={},\n'.format(OFFSET_D1_B))
file.write('  parameter integer OFFSET_C1_W={},\n'.format(OFFSET_C1_W))
file.write('  parameter integer OFFSET_C1_B={},\n'.format(OFFSET_C1_B))
file.write('  parameter integer OFFSET_D2_W={},\n'.format(OFFSET_D2_W))
file.write('  parameter integer OFFSET_D2_B={},\n'.format(OFFSET_D2_B))
file.write('  parameter integer ADDR_WIDTH_BUF={},\n'.format(ADDR_WIDTH_BUF))
file.write('  parameter integer DATA_WIDTH_BUF={},\n'.format(DATA_WIDTH_BUF))
file.write('  parameter integer DEPTH_BUF={},\n'.format(DEPTH_BUF))
file.write('  parameter integer ADDR_WIDTH_BUF_C1={},\n'.format(ADDR_WIDTH_BUF_C1))
file.write('  parameter integer DEPTH_BUF_C1={},\n'.format(DEPTH_BUF_C1))
file.write('  parameter integer ADDR_WIDTH_BUF_M1={},\n'.format(ADDR_WIDTH_BUF_M1))
file.write('  parameter integer DEPTH_BUF_M1={},\n'.format(DEPTH_BUF_M1))
file.write('  parameter integer ADDR_WIDTH_BUF_C2={},\n'.format(ADDR_WIDTH_BUF_C2))
file.write('  parameter integer DEPTH_BUF_C2={},\n'.format(DEPTH_BUF_C2))
file.write('  parameter integer ADDR_WIDTH_BUF_M2={},\n'.format(ADDR_WIDTH_BUF_M2))
file.write('  parameter integer DEPTH_BUF_M2={},\n'.format(DEPTH_BUF_M2))
file.write('  parameter integer ADDR_WIDTH_BUF_D1={},\n'.format(ADDR_WIDTH_BUF_D1))
file.write('  parameter integer DEPTH_BUF_D1={}\n'.format(DEPTH_BUF_D1))
file.write(')\n')
file.write('(\n')
file.write('  input clk, in_ready,\n')
file.write('  output reg [0:3] prediction,\n')
file.write('  output reg done\n')
file.write('  );\n')
file.write('  \n')
file.write('  reg done_c1, done_m1, done_c2, done_m2, done_den1, done_den2, done_soft;\n')
file.write('  reg rst_c1,rst_m1,rst_c2,rst_m2,rst_d1, rst_d2;\n')
file.write('  reg en_c1,en_m1,en_c2,en_m2,en_d1,en_d2,en_sm;\n')
file.write('  reg [4:0] state=0;\n')
file.write('  \n')

file.write('  //**********************Dense D1 Layer*******************************//\n')
file.write('  reg signed [0:{}]fc_out_d1;\n'.format(BITWIDTH_D1*NEURONS_D1-1))
file.write('  reg signed [0:{}]fc_out_d2;\n'.format(BITWIDTH_D2*NEURONS_D2-1))
file.write('  reg [{}:0]count_c1=0;\n'.format(count_c1))
file.write('  reg done_shift_c1;\n')
file.write('  reg en_shift_c1,rst_shift_c1;\n')
file.write('  reg [2:0] state_c1=0;\n')
file.write('  \n')
file.write('  //**********************Conv Layer 1*******************************//\n')
file.write('  \n')
file.write('  reg [{}:0] channel_select_c1;\n'.format(count_c1))
file.write('  ////////////////shift///////////////////////\n')
#file.write('  reg [{}:0] addr;\n'.format(ADDR_WIDTH-1))
file.write('  reg done_load_shift_c1=0;\n')
file.write('  reg [10:0] count_ld_shift_c1=0;\n')
file.write('  wire [31:0]channel_shift_c1;\n')
file.write('  reg signed [{}:0] bias_shift_c1;\n'.format(BITWIDTH_B-1))
file.write('  reg signed [0:{}] W_shift_c1;\n'.format(BITWIDTH_W*KERNELWIDTH_C1*KERNELHEIGHT_C1-1))
file.write('  reg [9:0]count_shift_c1=0;\n')
file.write('  reg done_conv_c1;\n')
file.write('  reg en_conv_c1;\n')
file.write('  reg rst_conv_c1;\n')
file.write('  reg signed [0:{}] result_temp_conv_c1;\n'.format(BITWIDTH_M1-1))
file.write('  reg [2:0] state_shift_c1=0;\n')
file.write('  reg [9:0] window_select_c1;\n')
file.write('  \n')
file.write('  ///////////////////conv kernel////////////////////////\n')
file.write('  \n')
file.write('  reg done_load_conv_c1=0;\n')
file.write('  reg [10:0] count_ld_conv_c1=0;\n')
file.write('  wire [10:0] start_addr_conv_c1;\n')
file.write('  reg signed [0:{}] X_conv_c1;\n'.format(BITWIDTH_IN*KERNELWIDTH_C1*KERNELHEIGHT_C1-1))
file.write('  reg [3:0]count_conv_c1=0;\n')
file.write('  wire done_m_c1;\n')
file.write('  reg en_m_c1;\n')
file.write('  reg rst_m_c1;\n')
file.write('  wire signed [15:0] result_temp_m_c1;\n'.format(2*BITWIDTH_IN-1))
file.write('  reg signed [18:0] result_final_temp_conv_c1;\n')
file.write('  reg signed [18:0] buffer_conv_c1=0;\n')
file.write('  wire signed [{}:0] mem_x_conv_c1 [0:{}];\n'.format((BITWIDTH_IN-1),(KERNELWIDTH_C1*KERNELHEIGHT_C1-1)))
file.write('  wire signed [7:0] mem_w_conv_c1 [0:8];\n'.format((BITWIDTH_W-1),(KERNELWIDTH_C1*KERNELHEIGHT_C1-1)))
file.write('  reg signed [{}:0] x_in_m_c1;\n'.format(BITWIDTH_IN-1))
file.write('  reg signed [{}:0] w_in_m_c1;\n'.format(BITWIDTH_W-1))
file.write('  reg [2:0] state_conv_c1=0;\n')
file.write('  ///////////////////////maxpool m1////////////////////////////////\n')
file.write('  reg [{}:0]count_m1=0;\n'.format(count_c1))
file.write('  reg done_shift_m1;\n')
file.write('  reg en_shift_m1;\n')
file.write('  reg rst_shift_m1;\n')
file.write('  reg signed [0:{}] result_temp_shift_m1;\n'.format(BITWIDTH_C2*DATAWIDTH_C2*DATAHEIGHT_C2-1))
file.write('  reg [2:0] state_m1=0;\n')
file.write('  \n')
file.write('  ///////////////////////shift window m1////////////////////////////////\n')
file.write('  \n')
file.write('  reg [7:0]count_shift_m1=0;\n')
file.write('  reg done_mk_m1;\n')
file.write('  reg en_mk_m1;\n')
file.write('  reg rst_mk_m1;\n')
file.write('  reg signed [0:{}] result_temp_mk_m1;\n'.format(BITWIDTH_M1-1))
file.write('  reg [2:0] state_shift_m1=0;\n')
file.write('  ')
file.write('  ///////////////////////maxpool kernel////////////////////////////////\n')
file.write('  ')
file.write('  wire signed [{}:0]element_mk_m1[0:{}];\n'.format((BITWIDTH_C1-1),(KERNELWIDTH_POOL_M1*KERNELHEIGHT_POOL_M1-1)))
file.write('  reg signed [{}:0] out_temp_mk_m1=0;\n'.format(BITWIDTH_M1-1))
file.write('  reg [{}:0] channel_select_m1;\n'.format(count_c1))
file.write('  reg [9:0] window_select_m1;\n')
file.write('  reg done_load_mk_m1=0;\n')
file.write('  reg [9:0] count_ld_mk_m1=0;\n')
file.write('  wire [9:0] start_addr_mk_m1;\n')
file.write('  reg signed [0:{}] X_mk_m1;\n'.format(BITWIDTH_M1*KERNELWIDTH_POOL_M1*KERNELHEIGHT_POOL_M1-1))
file.write('  ')
file.write('  //************************CONV C2 Layer******************************//\n')
file.write('  //////////////////////////////////////////// c2 top /////////////////////////////////////////////////\n')
file.write('  reg [{}:0] channel_select_c2; // number of channels in the output\n'.format(count_c2))
file.write('  reg [{}:0]count_c2=0;\n'.format(count_c2))
file.write('  reg done_c2d=0;\n')
file.write('  reg en_c2d;\n')
file.write('  reg rst_c2d;\n')
file.write('  reg [2:0] state_c2=0;\n')
file.write('  \n')
file.write('  //////////////////////////////// conv 2d c2 /////////////////////////////////////\n')
file.write('  \n')
file.write('  reg [{}:0] channel_select_c2d;// number of channels in the input \n'.format(count_c1))
file.write('  reg done_load_c2d=0;\n')
file.write('  reg [10:0] count_ld_c2d=0;\n')
file.write('  reg signed [7:0] bias_c2d;\n')
file.write("""  reg [7:0] count_add_c2d=0;\n""")
file.write('  reg signed [0:{}]bias_new_c2d;\n'.format(2*BITWIDTH_B-1))
file.write('  reg signed [0:{}] Z_temp_c2d [0:{}];\n'.format((BITWIDTH_M2*DATAWIDTH_M2*DATAHEIGHT_M2-1),(FILTERBATCH_C2-1)))
file.write('  reg [{}:0]count_c2d=0;\n'.format(count_c1))
file.write('  reg done_shift_c2d;\n')
file.write('  reg add_start_c2d=0;\n')
file.write('  reg en_shift_c2d;\n')
file.write('  reg rst_shift_c2d;\n')
file.write('  reg signed [0:{}] result_temp_shift_c2d;\n'.format(BITWIDTH_M2*DATAWIDTH_M2*DATAHEIGHT_M2-1))
file.write('  reg [2:0] state_c2d=0;\n')
file.write('  \n')
file.write('  //////////////////////////////////// shift window c2 ////////////////////////////////////\n')
file.write('  \n')
file.write('  reg done_load_shift_c2d=0;\n')
file.write('  reg [10:0] count_ld_shift_c2d=0;\n')
file.write('  reg signed [0:71] W_shift_c2d;\n')
file.write('  wire [31:0]channel_shift_c2d;\n')
file.write('  reg [6:0]count_shift_c2d=0;\n')
file.write('  reg done_ck_c2d;\n')
file.write('  reg en_ck_c2d;\n')
file.write('  reg rst_ck_c2d;\n')
file.write('  reg signed [0:15] result_temp_ck_c2d;\n')
file.write('  reg [2:0] state_shift_c2d=0;\n')
file.write('  \n')
file.write('  /////////////////////////////// conv kernel c2 ////////////////////////////////////\n')
file.write('  reg [3:0]count_ck_c2d=0;\n')
file.write('  wire done_m_c2d;\n')
file.write('  reg en_m_c2d;\n')
file.write('  reg rst_m_c2d;\n')
file.write('  wire signed [31:0] result_temp_m_c2d;\n')
file.write('  reg signed [31:0] result_final_temp_ck_c2d;\n')
file.write('  reg signed [31:0] buffer_ck_c2d=0;\n')
file.write('  wire signed [15:0] mem_x_ck_c2d [0:8];\n')
file.write('  wire signed [7:0] mem_w_ck_c2d [0:8];\n')
file.write('  reg signed [15:0] x_in_m_c2d;\n')
file.write('  reg signed [7:0] w_in_m_c2d;\n')
file.write('  reg [2:0] state_ck_c2d=0;\n')
file.write('  reg done_load_conv_c2=0;\n')
file.write('  reg [10:0] count_ld_conv_c2=0;\n')
file.write('  wire [10:0] start_addr_conv_c2;\n')
file.write('  reg signed [0:{}] X_conv_c2;\n'.format(KERNELWIDTH_C2*KERNELHEIGHT_C2*BITWIDTH_M1-1))
file.write('  reg [7:0] window_select_c2;\n')
file.write('  \n')
file.write('  /////////////////////////////// maxpool m2 //////////////////////////////////\n')
file.write('  \n')
file.write('  reg [{}:0]count_m2=0;\n'.format(count_c2))
file.write('  reg done_shift_m2;\n')
file.write('  reg en_shift_m2;\n')
file.write('  reg rst_shift_m2;\n')
file.write('  reg [2:0] state_m2=0;\n')
file.write('  \n')
file.write('  ////////////////////////////// shift window m2 ///////////////////////////////\n')
file.write('  \n')
file.write('  reg [4:0]count_shift_m2=0;\n')
file.write('  reg done_mk_m2;\n')
file.write('  reg en_mk_m2;\n')
file.write('  reg rst_mk_m2;\n')
file.write('  reg signed [0:15] result_temp_mk_m2;\n')
file.write('  reg [2:0] state_shift_m2=0;\n')
file.write('  \n')
file.write('  //////////////////////////////// maxpool kernel /////////////////////////////////\n')
file.write('  \n')
file.write('  wire signed [15:0]element_mk_m2[0:8];\n')
file.write('  reg signed [15:0] out_temp_mk_m2=0;\n')
file.write('  reg [1:0] channel_select_m2;\n')
file.write('  reg [9:0] window_select_m2;\n')
file.write('  reg done_load_mk_m2=0;\n')
file.write('  reg [9:0] count_ld_mk_m2=0;\n')
file.write('  wire [9:0] start_addr_mk_m2;\n')
file.write('  reg signed [0:{}] X_mk_m2;\n'.format(KERNELWIDTH_POOL_M2*KERNELHEIGHT_POOL_M2*BITWIDTH_C2-1))
file.write('  \n')
file.write('  ///////////////////////////////// dense 1 ////////////////////////////////////\n')
file.write('  reg [9:0] count_ld_d1=0;\n')
file.write('  reg done_load_d1;\n')
file.write('  reg [0:{}] X_nc_d1;\n'.format(DATAWIDTH_D1*DATAHEIGHT_D1*FILTERBATCH_C2*BITWIDTH_M2-1))
file.write('  reg [8:0] neuron_select_d1;\n')
file.write('  reg [8:0]count_d1=0;\n')
file.write('  reg done_nc_d1;\n')
file.write('  reg en_nc_d1;\n')
file.write('  reg rst_nc_d1;\n')
file.write('  reg signed [0:31] result_temp_nc_d1;\n')
file.write('  reg [2:0] state_d1=0;\n')
file.write('  \n')
file.write('  ///////////////////////////////// dense 2 ////////////////////////////////////\n')
file.write('  reg [9:0] count_ld_d2=0;\n')
file.write('  reg done_load_d2;\n')
file.write('  reg [0:{}] X_nc_d2;\n'.format(NEURONS_D1*BITWIDTH_M2-1))
file.write('  reg [3:0] neuron_select_d2;\n')
file.write('  reg [3:0]count_d2=0;\n')
file.write('  reg done_nc_d2;\n')
file.write('  reg en_nc_d2;\n')
file.write('  reg rst_nc_d2;\n')
file.write('  reg signed [0:31] result_temp_nc_d2;\n')
file.write('  reg [2:0] state_d2=0;\n')
file.write('  \n')
file.write('  //////////////////////////////////// neuron calculation d1//////////////////////////////////\n')
file.write('  \n')
file.write('  reg done_load_nc_d1=0;\n')
file.write('  reg [10:0] count_ld_nc_d1=0;\n')
file.write('  wire [31:0]channel_d1;\n')
file.write('  reg signed [0:{}] w_neuron_d1;\n'.format(DATAWIDTH_D1*DATAHEIGHT_D1*FILTERBATCH_C2*BITWIDTH_W-1))
file.write('  reg signed [0:7] bias_d1;\n')
file.write('  reg [9:0]count_nc_d1=0;\n')
file.write('  wire done_m_nc_d1;\n')
file.write('  reg en_m_nc_d1;\n')
file.write('  reg rst_m_nc_d1;\n')
file.write('  wire signed [31:0] result_temp_m_nc_d1;\n')
file.write('  reg signed [31:0] buffer_nc_d1=0;\n')
file.write('  wire signed [{}:0] mem_x_nc_d1 [0:{}];\n'.format((BITWIDTH_M2-1),(DATAWIDTH_D1*DATAHEIGHT_D1*FILTERBATCH_C2-1)))
file.write('  wire signed [{}:0] mem_w_nc_d1 [0:{}];\n'.format((BITWIDTH_W-1),(DATAWIDTH_D1*DATAHEIGHT_D1*FILTERBATCH_C2-1)))
file.write('  reg signed [15:0] x_in_m_nc_d1;\n')
file.write('  reg signed [7:0] w_in_m_nc_d1;\n')
file.write('  reg [2:0] state_nc_d1=0;\n')
file.write('  reg signed [0:15] bias_d1_1;\n')
file.write('  \n')
file.write('  //////////////////////////////////// neuron calculation d2//////////////////////////////////\n')
file.write('  reg done_load_nc_d2=0;\n')
file.write('  reg [10:0] count_ld_nc_d2=0;\n')
file.write('  wire [31:0]channel_d2;\n')
file.write('  reg signed [0:{}] w_neuron_d2;\n'.format(NEURONS_D1*BITWIDTH_W-1))
file.write('  reg signed [0:7] bias_d2;\n')
file.write('  reg [9:0]count_nc_d2=0;\n')
file.write('  wire done_m_nc_d2;\n')
file.write('  reg en_m_nc_d2;\n')
file.write('  reg rst_m_nc_d2;\n')
file.write('  wire signed [31:0] result_temp_m_nc_d2;\n')
file.write('  reg signed [31:0] buffer_nc_d2=0;\n')
file.write('  wire signed [{}:0] mem_x_nc_d2 [0:{}];\n'.format((BITWIDTH_M2-1),(NEURONS_D1-1)))
file.write('  wire signed [{}:0] mem_w_nc_d2 [0:{}];\n'.format((BITWIDTH_W-1),(NEURONS_D1-1)))
file.write('  reg signed [15:0] x_in_m_nc_d2;\n')
file.write('  reg signed [7:0] w_in_m_nc_d2;\n')
file.write('  reg [2:0] state_nc_d2=0;\n')
file.write('  reg signed [0:15] bias_d2_1;\n')
file.write('  \n')
file.write('  wire [7:0] din=0;\n')
file.write('  wire [7:0] dout;\n')
file.write('  reg [{}:0] addr;\n'.format(ADDR_WIDTH-1))
file.write('  wire wr_en=0;\n')
file.write('  \n')
file.write('  reg signed [0:15] THRESHOLD=0;\n')
file.write('  \n')
file.write('  reg [{}:0] addr_buf_0,addr_buf_1;\n'.format(ADDR_WIDTH_BUF_C1-1))
file.write('  reg wr_en_buf_0=0,wr_en_buf_1=0,oe_buf_0=0, oe_buf_1=0;\n')
file.write('  reg [15:0] din_buf_0,din_buf_1;\n')
file.write('  wire [15:0] dout_buf_0,dout_buf_1;\n')
file.write('  \n')
file.write('  reg [{}:0] addr_buf_m1;\n'.format(ADDR_WIDTH_BUF_M1-1))
file.write('  reg wr_en_buf_m1;\n')
file.write('  reg [15:0] din_buf_m1;\n')
file.write('  wire [15:0] dout_buf_m1;\n')
file.write('  \n')
file.write('  reg [{}:0] addr_buf_m2;\n'.format(ADDR_WIDTH_BUF_M2-1))
file.write('  reg wr_en_buf_m2;\n')
file.write('  reg [15:0] din_buf_m2;\n')
file.write('  wire [15:0] dout_buf_m2;\n')
file.write('  \n')
file.write('  reg [{}:0] addr_buf_c2;\n'.format(ADDR_WIDTH_BUF_C2-1))
file.write('  reg wr_en_buf_c2;\n')
file.write('  reg [15:0] din_buf_c2=0;\n')
file.write('  wire [15:0] dout_buf_c2;\n')
file.write('  \n')
file.write('  reg [{}:0] addr_buf_d1;\n'.format(ADDR_WIDTH_BUF_D1-1))
file.write('  reg wr_en_buf_d1;\n')
file.write('  reg [15:0] din_buf_d1;\n')
file.write('  wire [15:0] dout_buf_d1;\n')
file.write('  \n')
file.write('  reg signed [0:31] values [0:9];\n')
file.write("""  reg [0:3]temp=4'h0;\n""")
file.write("""  reg signed [0:31]max=32'h80000001;\n""")
file.write('  \n')
file.write('  wire [31:0] start_addr_wr_c1;\n')
file.write('  wire [31:0] start_addr_wr_m1;\n')
file.write('  wire [31:0] start_addr_wr_c2;\n')
file.write('  wire [31:0] start_addr_wr_m2;\n')
file.write('  \n')
file.write('  reg [1:0] state_add=0;\n')
file.write('  wire done_add;\n')
for i in range(1,FILTERBATCH_C1+1):
    file.write('  reg signed [15:0] add_in{};\n'.format(i))
file.write('  wire signed [15:0] adder;\n')
file.write('  reg rst_add;\n')
file.write('  reg done_channel_add;\n')
file.write('  \n')
file.write('  reg [3:0] n=1;\n')
file.write('  reg done_mk_m1_row_ch1;\n')
file.write('  \n')


for i in range(FILTERBATCH_C1):
    file.write('  wire signed [{}:0] Z_temp_c2d_temp_{} [0:{}];\n'.format((BITWIDTH_C2-1),i,(DATAWIDTH_M2*DATAHEIGHT_M2-1)))
file.write('  \n')
for i in range(FILTERBATCH_C1):
    for j in range(121):        
        file.write('  assign Z_temp_c2d_temp_{}[{}]=Z_temp_c2d[{}][{}:{}];\n'.format(i,j,i,(j*16),(j*16+15)))
file.write('  \n')
file.write('  assign start_addr_wr_c1=count_c1*{};\n'.format(DATAWIDTH_M1*DATAHEIGHT_M1))
file.write('  assign start_addr_wr_m1=count_m1*{};\n'.format(DATAWIDTH_C2*DATAHEIGHT_C2))
file.write('  assign start_addr_wr_c2=count_c2*{};\n'.format(DATAWIDTH_M2*DATAHEIGHT_M2))
file.write('  assign start_addr_wr_m2=count_m2*{};\n'.format(DATAWIDTH_D1*DATAHEIGHT_D1))
file.write('  \n')
file.write('  assign channel_shift_c1=channel_select_c1*{};\n'.format(KERNELWIDTH_C1*KERNELHEIGHT_C1))
file.write('  assign start_addr_conv_c1=window_select_c1+(window_select_c1/{})*{};\n'.format(DATAWIDTH_M1,(DATAWIDTH_IN-DATAWIDTH_M1)))
file.write('  assign start_addr_conv_c2=channel_select_c2d*169+window_select_c2+(window_select_c2/{})*2;\n'.format(DATAWIDTH_M2,(DATAWIDTH_C2-DATAWIDTH_M1)))
file.write('  \n')
file.write('  bram #(ADDR_WIDTH,DATA_WIDTH,DEPTH) BRAM(.clk(clk), .addr(addr), .wr_en(wr_en),.data_in(din), .data_out(dout));\n')
file.write('  dualport_bram_c1 #(ADDR_WIDTH_BUF_C1,DATA_WIDTH_BUF,DEPTH_BUF_C1) BRAM_BUFFER_C1 (.clk(clk), .addr_0(addr_buf_0), .addr_1(addr_buf_1), .wr_en_0(wr_en_buf_0), .wr_en_1(wr_en_buf_1), .oe_0(oe_buf_0), .oe_1(oe_buf_1), .data_in_0(din_buf_0), .data_in_1(din_buf_1), .data_out_0(dout_buf_0), .data_out_1(dout_buf_1));\n')
file.write('  bram_buffer_m1 #(ADDR_WIDTH_BUF_M1,DATA_WIDTH_BUF,DEPTH_BUF_M1) BRAM_BUFFER_M1 (.clk(clk), .addr(addr_buf_m1), .wr_en(wr_en_buf_m1),.data_in(din_buf_m1), .data_out(dout_buf_m1));\n')
file.write('  bram_buffer_c2 #(ADDR_WIDTH_BUF_C2,DATA_WIDTH_BUF,DEPTH_BUF_C2) BRAM_BUFFER_C2 (.clk(clk), .addr(addr_buf_c2), .wr_en(wr_en_buf_c2),.data_in(din_buf_c2), .data_out(dout_buf_c2));\n')
file.write('  bram_buffer_m2 #(ADDR_WIDTH_BUF_M2,DATA_WIDTH_BUF,DEPTH_BUF_M2) BRAM_BUFFER_M2 (.clk(clk), .addr(addr_buf_m2), .wr_en(wr_en_buf_m2),.data_in(din_buf_m2), .data_out(dout_buf_m2));\n')
file.write('  bram_buffer_d1 #(ADDR_WIDTH_BUF_D1,DATA_WIDTH_BUF,DEPTH_BUF_D1) BRAM_BUFFER_D1 (.clk(clk), .addr(addr_buf_d1), .wr_en(wr_en_buf_d1),.data_in(din_buf_d1), .data_out(dout_buf_d1));\n')
file.write('  \n')
file.write('   always@(*)begin\n')
file.write('       case(state)\n')
file.write('           0:begin\n')
file.write('               en_c1=0;en_m1=0;en_c2=0;en_m2=0;en_d1=0;en_d2=0;en_sm=0;\n')
file.write('               rst_c1=1;rst_m1=1;rst_c2=1;rst_m2=1;rst_d1=1;rst_d2=1;\n')
file.write('           end\n')
file.write('           1:begin\n')
file.write('               en_c1=1;en_m1=0;en_c2=0;en_m2=0;en_d1=0;en_d2=0;en_sm=0;\n')
file.write('               rst_c1=0;rst_m1=0;rst_c2=1;rst_m2=1;rst_d1=1;rst_d2=1;\n')
file.write('           end\n')
file.write('           2:begin\n')
file.write('               en_c1=0;en_m1=1;en_c2=0;en_m2=0;en_d1=0;en_d2=0;en_sm=0;\n')
file.write('               rst_c1=0;rst_m1=0;rst_c2=1;rst_m2=1;rst_d1=1;rst_d2=1;\n')
file.write('           end\n')
file.write('           3:begin\n')
file.write('               en_c1=0;en_m1=0;en_c2=1;en_m2=0;en_d1=0;en_d2=0;en_sm=0;\n')
file.write('               rst_c1=0;rst_m1=0;rst_c2=0;rst_m2=1;rst_d1=1;rst_d2=1;\n')
file.write('           end\n')
file.write('           4:begin\n')
file.write('               en_c1=0;en_m1=0;en_c2=0;en_m2=1;en_d1=0;en_d2=0;en_sm=0;\n')
file.write('               rst_c1=0;rst_m1=0;rst_c2=0;rst_m2=0;rst_d1=1;rst_d2=1;\n')
file.write('           end\n')
file.write('           5:begin\n')
file.write('               en_c1=0;en_m1=0;en_c2=0;en_m2=0;en_d1=1;en_d2=0;en_sm=0;\n')
file.write('               rst_c1=0;rst_m1=0;rst_c2=0;rst_m2=0;rst_d1=0;rst_d2=1;\n')
file.write('           end\n')
file.write('           9:begin\n')
file.write('               en_c1=0;en_m1=0;en_c2=0;en_m2=0;en_d1=0;en_d2=1;en_sm=0;\n')
file.write('               rst_c1=0;rst_m1=0;rst_c2=0;rst_m2=0;rst_d1=0;rst_d2=0;\n')
file.write('           end\n')
file.write('           6:begin\n')
file.write('               en_c1=0;en_m1=0;en_c2=0;en_m2=0;en_d1=0;en_d2=0;en_sm=1;\n')
file.write('               rst_c1=0;rst_m1=0;rst_c2=0;rst_m2=0;rst_d1=0;rst_d2=0;\n')
file.write('           end\n')
file.write('           7:begin\n')
file.write('               en_c1=1;en_m1=1;en_c2=0;en_m2=0;en_d1=0;en_d2=0;en_sm=0;\n')
file.write('               rst_c1=0;rst_m1=0;rst_c2=1;rst_m2=1;rst_d1=1;rst_d2=1;\n')
file.write('           end\n')
file.write('           8:begin\n')
file.write('               en_c1=1;en_m1=0;en_c2=0;en_m2=0;en_d1=0;en_d2=0;en_sm=0;\n')
file.write('               rst_c1=0;rst_m1=0;rst_c2=1;rst_m2=1;rst_d1=1;rst_d2=1;\n')
file.write('           end\n')
file.write('           default:begin\n')
file.write('               en_c1=0;en_m1=0;en_c2=0;en_m2=0;en_d1=0;en_d2=0;en_sm=0;\n')
file.write('               rst_c1=1;rst_m1=1;rst_c2=1;rst_m2=1;rst_d1=1;rst_d2=1;\n')
file.write('           end\n')
file.write('      endcase\n')
file.write('      if(done_soft==1)begin\n')
file.write("""          done=1'b1;\n""")
file.write('      end\n')
file.write('      else begin\n')
file.write("""          prediction=4'dX;\n""")
file.write("""          done=1'b0;\n""")
file.write('      end\n')
file.write('  end\n')
file.write('  \n')
file.write('  integer i,j,k;\n')
file.write('  always@(posedge clk)begin\n')
file.write('          ///////////////////////////////////////// top /////////////////////////////////////////\n')
file.write('      case(state)\n')
file.write('          0:begin\n')
file.write('              if(in_ready) state=1; else state=0;\n')
file.write('          end\n')
file.write('          1:begin\n')
file.write('              if(done_c1) state=2;\n')
file.write('              else if(count_shift_c1>n*52-1) state=7;\n')
file.write('              else state=1;\n')
file.write('          end\n')
file.write('          2:begin\n')
file.write('              if(done_m1) state=3; else state=2;\n')
file.write('          end\n')
file.write('          3:begin\n')
file.write('              if(done_c2) state=4; else state=3;\n')
file.write('          end\n')
file.write('          4:begin\n')
file.write('              if(done_m2) state=5; else state=4;\n')
file.write('          end\n')
file.write('          5:begin\n')
file.write('              if(done_den1) state=9; else state=5;\n')
file.write('          end\n')
file.write('          9:begin\n')
file.write('              if(done_den2) state=6; else state=9;\n')
file.write('          end\n')
file.write('          6:begin\n')
file.write('              if(done_soft) state=0; else state=6;\n')
file.write('          end\n')
file.write('          7:begin\n')
file.write('              if(done_mk_m1_row_ch1) state=8;\n')
file.write('              else state=7;\n')
file.write('          end\n')
file.write('          8:begin\n')
file.write('              if(done_c1) state=2;\n')
file.write('              else if(count_shift_c1>n*52-1) state=7;\n')
file.write('              else state=8;\n')
file.write('          end\n')
file.write('          default:begin\n')
file.write('              state=0;\n')
file.write('          end\n')
file.write('      endcase\n')
file.write('          //////////////////////////////////// c1 //////////////////////////////////\n')
file.write('      if(rst_c1==0)begin\n')
file.write('          case(state_c1)\n')
file.write('              0:begin\n')
file.write('                  if(en_c1) state_c1=2; else state_c1=0;\n')
file.write('              end\n')
file.write('              1:begin\n')
file.write('                  if(done_shift_c1) state_c1=0; else state_c1=1;\n')
file.write('              end\n')
file.write('              2:begin\n')
file.write('                  if(!done_shift_c1) state_c1=1; else state_c1=2;\n')
file.write('              end\n')
file.write('          endcase\n')
file.write('      end\n')
file.write('          //////////////////////////////shift_c1////////////////////////////\n')
file.write('      if(rst_shift_c1)begin\n')
file.write('          count_ld_shift_c1=0;\n')
file.write('          done_load_shift_c1=0;\n')
file.write('      end\n')
file.write('      else if(en_shift_c1 && !done_load_shift_c1) begin\n')
file.write('          if(count_ld_shift_c1<{})begin\n'.format(KERNELWIDTH_C1*KERNELHEIGHT_C1+1))
file.write('              addr = OFFSET_C1_W+count_ld_shift_c1;\n'.format())
file.write('              count_ld_shift_c1 = count_ld_shift_c1+1;\n')
file.write('              done_load_shift_c1=0;\n')
file.write('          end\n')
file.write('          else if(count_ld_shift_c1=={})begin\n'.format(KERNELWIDTH_C1*KERNELHEIGHT_C1+1))
file.write('              done_load_shift_c1=0;\n')
file.write('              count_ld_shift_c1 = count_ld_shift_c1+1;\n')
file.write('              addr=OFFSET_C1_B+channel_select_c1;\n')
file.write('          end\n')
file.write('          else if(count_ld_shift_c1=={})begin\n'.format(KERNELWIDTH_C1*KERNELHEIGHT_C1+2))
file.write('              bias_shift_c1=dout;\n')
file.write('              done_load_shift_c1=0;\n')
file.write('              count_ld_shift_c1 = count_ld_shift_c1+1;\n')
file.write('          end\n')
file.write('          else begin\n')
file.write("""              count_ld_shift_c1=11'hX;\n""")
file.write("""              done_load_shift_c1=1'b1;\n""")
file.write('          end\n')
file.write('      end\n')
file.write('          /////////////////////////bram buffer c1////////////////////////\n')
file.write('      if(rst_shift_c1==0 && done_load_shift_c1)begin\n')
file.write('          if(count_shift_c1<{})begin //&& !en_mk_m1\n'.format(DATAWIDTH_M1*DATAHEIGHT_M1))
file.write('              addr_buf_0=start_addr_wr_c1+count_shift_c1;\n')
file.write("""              wr_en_buf_0=1'b1;\n""")
file.write('          end\n')
file.write('          else if(en_mk_m1) begin\n')
file.write("""              addr_buf_0={}'hX;\n""".format(ADDR_WIDTH_BUF_C1))
file.write("""              wr_en_buf_0=1'b0;\n""")
file.write('          end\n')
file.write('      end\n')
file.write('          ///////////////////////////// shift c1 //////////////////////////////\n')
file.write('      if(rst_shift_c1==0 && done_load_shift_c1)begin\n')
file.write('          case(state_shift_c1)\n')
file.write('              0:begin\n')
file.write('                  if(en_shift_c1 && done_load_shift_c1) state_shift_c1=2; else state_shift_c1=0;\n')
file.write('              end\n')
file.write('              1:begin\n')
file.write('                  if(done_conv_c1) state_shift_c1=0; else state_shift_c1=1;\n')
file.write('              end\n')
file.write('              2:begin\n')
file.write('                  if(!done_conv_c1) state_shift_c1=1; else state_shift_c1=2;\n')
file.write('              end\n')
file.write('          endcase\n')
file.write('      end\n')
file.write('          ////////////////////////conv_c1 /////////////////////////////\n')
file.write('      if(rst_conv_c1)begin\n')
file.write('          count_ld_conv_c1=0;\n')
file.write('          done_load_conv_c1=0;\n')
file.write('      end\n')
file.write('      else if(en_conv_c1 && !done_load_conv_c1) begin\n')
file.write("""          wr_en_buf_m1=1'b0;\n""")
for i in range(KERNELWIDTH_C1):
    if(i==0):     
        file.write('          if(count_ld_conv_c1<{})begin\n'.format((i+1)*KERNELWIDTH_C1))
        file.write('              addr = start_addr_conv_c1+count_ld_conv_c1;\n')
        file.write('              count_ld_conv_c1 = count_ld_conv_c1+1;\n')
        file.write('              done_load_conv_c1=0;\n')
        file.write('          end\n')
    else:
        file.write('          else if(count_ld_conv_c1<{})begin\n'.format((i+1)*KERNELWIDTH_C1))
        file.write('              addr = start_addr_conv_c1+count_ld_conv_c1+{};\n'.format(i*(DATAWIDTH_IN-KERNELHEIGHT_C1)))
        file.write('              count_ld_conv_c1 = count_ld_conv_c1+1;\n')
        file.write('              done_load_conv_c1=0;\n')
        file.write('          end\n')
file.write('          else if(count_ld_conv_c1=={})begin\n'.format(KERNELWIDTH_C1*KERNELHEIGHT_C1))
file.write('              count_ld_conv_c1=count_ld_conv_c1+1;\n')
file.write('              done_load_conv_c1=0;\n')
file.write('          end\n')
file.write('          else begin\n')
file.write("""             count_ld_conv_c1=11'hX;\n""")
file.write("""             done_load_conv_c1=1'b1;\n""")
file.write('          end\n')
file.write('      end\n')
file.write('      if(rst_conv_c1==0 && done_load_conv_c1) begin\n')
file.write('          case(state_conv_c1)\n')
file.write('              0:begin\n')
file.write('                  if(en_conv_c1 && done_load_conv_c1) state_conv_c1=2; else state_conv_c1=0;\n')
file.write('              end\n')
file.write('              1:begin\n')     
file.write('                  if(done_m_c1) state_conv_c1=0; else state_conv_c1=1;\n')
file.write('              end\n')
file.write('              2:begin\n')
file.write('                  if(!done_m_c1) state_conv_c1=1; else state_conv_c1=2;')
file.write('              end\n')
file.write('          endcase\n')
file.write('      end\n')
file.write('          ////////////////////////////maxpool m1/////////////////////////////\n')
file.write('      if(rst_m1==0)begin\n')
file.write('          case(state_m1)\n')
file.write('              0:begin\n')
file.write('                  if(en_m1) state_m1=2; else state_m1=0;\n')
file.write('              end\n')
file.write('              1:begin\n')
file.write('                  if(done_shift_m1) state_m1=0;\n')
file.write('                  else if(done_mk_m1_row_ch1) state_m1=3;\n')
file.write('                  else state_m1=1;\n')
file.write('              end\n')
file.write('              2:begin\n')
file.write('                  if(!done_mk_m1_row_ch1 && !done_shift_m1) state_m1=1; else state_m1=2;\n')
file.write('              end\n')
file.write('              3:begin\n')
file.write('                  if(en_m1 && !done_mk_m1_row_ch1 && !done_shift_m1) state_m1=1;\n')
file.write('                  else state_m1=3;\n')
file.write('              end\n')
file.write('          endcase\n')
file.write('      end\n')
file.write('          //////////////////////////// bram buffer m1 ///////////////////////////\n')
file.write('      if(rst_shift_m1==0 )begin\n')
file.write('          if(count_shift_m1<{})begin\n'.format(DATAWIDTH_C2*DATAHEIGHT_C2))
file.write('              addr_buf_m1=start_addr_wr_m1+count_shift_m1;\n')
file.write("""              wr_en_buf_m1=1'b1;\n""")
file.write('          end\n')
file.write('          else begin\n')
file.write("""              addr_buf_m1={}'hX;\n""".format(ADDR_WIDTH_BUF_M1))
file.write("""              wr_en_buf_m1=1'b0;\n""")
file.write('          end\n')
file.write('      end\n')
file.write('          //////////////////////shift m1/////////////////////////\n')
file.write('      if(rst_shift_m1==0)begin\n')
file.write('          case(state_shift_m1)\n')
file.write('              0:begin\n')
file.write('                  if(en_shift_m1) state_shift_m1=2; else state_shift_m1=0;\n')
file.write('              end\n')
file.write('              1:begin\n')
file.write('                  if(done_mk_m1) state_shift_m1=0; \n')
file.write('                  else if(done_mk_m1_row_ch1) state_shift_m1=0; \n')
file.write('                  else state_shift_m1=1;\n')
file.write('              end\n')
file.write('              2:begin\n')
file.write('                  if(!done_mk_m1 && !done_mk_m1_row_ch1) state_shift_m1=1; else state_shift_m1=2;\n')
file.write('              end\n')
file.write('          endcase\n')
file.write('      end\n')
file.write('          //////////////////////////maxpool kernel m1////////////////////////////\n')
file.write('      if(rst_mk_m1)begin\n')
file.write('          count_ld_mk_m1=0;\n')
file.write('          done_load_mk_m1=0;\n')
file.write("""           done_mk_m1=1'b0;\n""")
file.write('          result_temp_mk_m1=0;\n')
file.write('      j=0;\n')
file.write('      out_temp_mk_m1=0;\n')
file.write('      end\n')
file.write('      else if(en_mk_m1 && !done_load_mk_m1) begin\n')
for i in range(KERNELWIDTH_POOL_M1):
    if(i==0):
        file.write('          if(count_ld_mk_m1<{})begin\n'.format((i+1)*KERNELWIDTH_POOL_M1))
        file.write("""              wr_en_buf_1=1'b0;\n""")
        file.write("""              oe_buf_1=1'b1;\n""")
        file.write('              addr_buf_1 = start_addr_mk_m1+count_ld_mk_m1;\n')
        file.write('              count_ld_mk_m1 = count_ld_mk_m1+1;\n')
        file.write('              done_load_mk_m1=0;\n')
        file.write('          end\n')
    else:
        file.write('          else if(count_ld_mk_m1<{})begin\n'.format((i+1)*KERNELWIDTH_POOL_M1))
        file.write("""              wr_en_buf_1=1'b0;\n""")
        file.write("""              oe_buf_1=1'b1;\n""")
        file.write('              addr_buf_1 = start_addr_mk_m1+count_ld_mk_m1+{};\n'.format(i*(DATAWIDTH_M1-KERNELWIDTH_POOL_M1)))
        file.write('              count_ld_mk_m1 = count_ld_mk_m1+1;\n')
        file.write('              done_load_mk_m1=0;\n')
        file.write('          end\n')
file.write('          else if(count_ld_mk_m1=={})begin\n'.format(KERNELWIDTH_POOL_M1*KERNELHEIGHT_POOL_M1))
file.write('              count_ld_mk_m1=count_ld_mk_m1+1;\n')
file.write('              done_load_mk_m1=0;\n')
file.write('          end\n')
file.write('          else begin\n')
file.write("""              count_ld_mk_m1=10'hX;\n""")
file.write("""              done_load_mk_m1=1'b1;\n""")
file.write("""              oe_buf_1=1'b0;\n""")
file.write('          end\n')
file.write('      end\n')
file.write('      else if(en_mk_m1==1 && done_load_mk_m1) begin\n')
file.write('          for(j=0; j<{}; j=j+1)begin\n'.format(KERNELWIDTH_POOL_M1*KERNELHEIGHT_POOL_M1))
file.write('              if(element_mk_m1[j]>out_temp_mk_m1)begin\n')
file.write('                  out_temp_mk_m1=element_mk_m1[j];\n')
file.write('              end\n')
file.write('          end\n')
file.write('          result_temp_mk_m1=out_temp_mk_m1;\n')
file.write("""           done_mk_m1=1'b1;\n""")
file.write('      end\n')
file.write('          ///////////////////////////////// c2d /////////////////////////////////////\n')
file.write('      if(rst_c2==0)begin\n')
file.write('          case(state_c2)\n')
file.write('              0:begin\n')
file.write('                  if(en_c2) state_c2=2; else state_c2=0;\n')
file.write('              end\n')
file.write('              1:begin\n')
file.write('                  if(done_c2d) state_c2=0; else state_c2=1;\n')
file.write('              end\n')
file.write('              2:begin\n')
file.write('                  if(!done_c2d) state_c2=1; else state_c2=2;\n')
file.write('              end\n')
file.write('          endcase\n')
file.write('      end\n')
file.write('      ////////////////////////////////////////// add c2 //////////////////////////////////////////////\n')
file.write('      bias_new_c2d=bias_c2d<<<3;\n')
file.write('      if(rst_c2d==0)begin\n')
file.write('          if(add_start_c2d==1)begin\n')
file.write("""              case(state_add)\n""")
file.write("""                  0:begin\n""")
file.write('                      if(!done_add) state_add=1; else state_add=0;\n')
file.write("""                  end\n""")
file.write("""                  1:begin\n""")
file.write("""                      if(done_add) state_add=0; else state_add=1;\n""")
file.write('                  end\n')
file.write('              endcase\n')
file.write('          end\n')
file.write('      end\n')
file.write('    \n')
file.write('      ////////////////////////////////////////////// c2d /////////////////////////////////////////////////////\n')
file.write('      if(rst_c2d)begin\n')
file.write('          count_ld_c2d=0;\n')
file.write('          done_load_c2d=0;\n')
file.write('      end\n')
file.write('      else if(en_c2d && !done_load_c2d) begin\n')
file.write('          if(count_ld_c2d<1)begin\n')
file.write('              addr=OFFSET_C2_B+channel_select_c2;\n')
file.write('              done_load_c2d=0;\n')
file.write('              count_ld_c2d = count_ld_c2d+1;\n')
file.write('          end\n')
file.write('          else if(count_ld_c2d<2)\n')
file.write('              count_ld_c2d = count_ld_c2d+1;\n')
file.write('          else begin\n')
file.write("""              count_ld_c2d = 11'hX;\n""")
file.write("""              done_load_c2d=1'b1;\n""")
file.write('          end\n')
file.write('      end\n')
file.write('      if(rst_c2d==0 && done_load_c2d)begin\n')
file.write('          case(state_c2d)\n')
file.write('              0:begin\n')
file.write('                  if(en_c2d && done_load_c2d) state_c2d=2; else state_c2d=0;\n')
file.write('              end\n')
file.write('              1:begin\n')
file.write('                  if(done_shift_c2d) state_c2d=0; else state_c2d=1;\n')
file.write('              end\n')
file.write('              2:begin\n')
file.write('                  if(!done_shift_c2d && !add_start_c2d) state_c2d=1; else state_c2d=2;\n')
file.write('              end\n')
file.write('          endcase\n')
file.write('      end\n')
file.write('      if(rst_add==0 && add_start_c2d==1 && done_add==1)begin\n')
file.write('          addr_buf_c2=start_addr_wr_c2+count_add_c2d-1;\n')
file.write("""          wr_en_buf_c2=1'b1;\n""")
file.write('      end\n')
file.write('         /////////////////////////////shift c2 ///////////////////////////////\n')
file.write('      if(rst_shift_c2d)begin\n')
file.write('          count_ld_shift_c2d=0;\n')
file.write('          done_load_shift_c2d=0;\n')
file.write('      end\n')
file.write('      else if(en_shift_c2d && !done_load_shift_c2d) begin\n')
file.write('          if(count_ld_shift_c2d<{})begin\n'.format(KERNELWIDTH_C2*KERNELHEIGHT_C2+1))
file.write('              addr = OFFSET_C2_W+channel_shift_c2d+count_ld_shift_c2d;\n')
file.write('              count_ld_shift_c2d = count_ld_shift_c2d+1;\n')
file.write('              done_load_shift_c2d=0;\n')
file.write('          end\n')
file.write('          else if(count_ld_shift_c2d=={})\n'.format(KERNELWIDTH_C2*KERNELHEIGHT_C2+1))
file.write('              count_ld_shift_c2d=count_ld_shift_c2d+1;\n')
file.write('          else begin\n')
file.write("""              count_ld_shift_c2d=11'hX;\n""")
file.write("""              done_load_shift_c2d=1'b1;\n""")
file.write('          end\n')
file.write('      end\n')
file.write('      if(rst_shift_c2d==0 && done_load_shift_c2d)begin\n')
file.write('          case(state_shift_c2d)\n')
file.write('              0:begin\n')
file.write('                  if(en_shift_c2d && done_load_shift_c2d) state_shift_c2d=2; else state_shift_c2d=0;\n')
file.write('              end\n')
file.write('              1:begin\n')
file.write('                  if(done_ck_c2d) state_shift_c2d=0; else state_shift_c2d=1;\n')
file.write('              end\n')
file.write('              2:begin\n')
file.write('                  if(!done_ck_c2d) state_shift_c2d=1; else state_shift_c2d=2;\n')
file.write('              end\n')
file.write('          endcase\n')
file.write('      end\n')
file.write('          ////////////////////////////////conv kernel c2 /////////////////////////////////////\n')
file.write('      if(rst_ck_c2d)begin\n')
file.write('          count_ld_conv_c2=0;\n')
file.write('          done_load_conv_c2=0;\n')
file.write('      end\n')
file.write('      else if(en_ck_c2d && !done_load_conv_c2) begin\n')
for i in range(KERNELWIDTH_C2):
    if(i==0):
        file.write('          if(count_ld_conv_c2<{})begin\n'.format((i+1)*KERNELWIDTH_C2))
        file.write('              addr_buf_m1 = start_addr_conv_c2+count_ld_conv_c2;\n')
        file.write('              count_ld_conv_c2 = count_ld_conv_c2+1;\n')
        file.write('              done_load_conv_c2=0;\n')
        file.write('          end\n')
    else:
        file.write('          else if(count_ld_conv_c2<{})begin\n'.format((i+1)*KERNELWIDTH_C2))
        file.write('              addr_buf_m1 = start_addr_conv_c2+count_ld_conv_c2+{};\n'.format(i*(DATAWIDTH_C2-KERNELHEIGHT_C2)))
        file.write('              count_ld_conv_c2 = count_ld_conv_c2+1;\n')
        file.write('              done_load_conv_c2=0;\n')
        file.write('          end\n')
file.write('          else if(count_ld_conv_c2=={})begin\n'.format(KERNELWIDTH_C2*KERNELHEIGHT_C2))
file.write('              count_ld_conv_c2=count_ld_conv_c2+1;\n')
file.write('              done_load_conv_c2=0;\n')
file.write('          end\n')
file.write('          else begin\n')
file.write("""              count_ld_conv_c2=11'hX;\n""")
file.write("""              done_load_conv_c2=1'b1;\n""")
file.write('          end\n')
file.write('      end\n')
file.write('      if(rst_ck_c2d==0 && done_load_conv_c2) begin\n')
file.write('          case(state_ck_c2d)\n')
file.write('              0:begin\n')
file.write('                  if(en_ck_c2d && done_load_conv_c2) state_ck_c2d=2; else state_ck_c2d=0;\n')
file.write('              end\n')
file.write('              1:begin\n')
file.write('                  if(done_m_c2d) state_ck_c2d=0; else state_ck_c2d=1;\n')
file.write('              end\n')
file.write('              2:begin\n')
file.write('                  if(!done_m_c2d) state_ck_c2d=1; else state_ck_c2d=2;\n')
file.write('              end\n')
file.write('              default:begin\n')
file.write('                  state_ck_c2d=0;\n')
file.write('              end\n')
file.write('          endcase\n')
file.write('      end\n')
file.write('          ///////////////////////////// mapool m2 /////////////////////////////\n')
file.write('      if(rst_m2==0)begin\n')
file.write('          case(state_m2)\n')
file.write('              0:begin\n')
file.write('                  if(en_m2) state_m2=2; else state_m2=0;\n')
file.write('              end\n')
file.write('              1:begin\n')
file.write('                  if(done_shift_m2) state_m2=0; else state_m2=1;\n')
file.write('              end\n')
file.write('              2:begin\n')
file.write('                  if(!done_shift_m2) state_m2=1; else state_m2=2;')
file.write('              end\n')
file.write('          endcase\n')
file.write('      end\n')
file.write('          ////////////////////////////// bram buffer m2 //////////////////////////////\n')
file.write('      if(rst_shift_m2==0 )begin\n')
file.write('          if(count_shift_m2<{})begin\n'.format(DATAWIDTH_D1*DATAHEIGHT_D1))
file.write('              addr_buf_m2=start_addr_wr_m2+count_shift_m2;\n') 
file.write("""              wr_en_buf_m2=1'b1;\n""")
file.write('          end\n')
file.write('          else begin\n')
file.write("""              addr_buf_m2={}'hX;\n""".format(ADDR_WIDTH_BUF_M2))
file.write("""              wr_en_buf_m2=1'b0;\n""")
file.write('          end\n')
file.write('      end\n')
file.write('          //////////////////////////////// shift window m2 /////////////////////////////////\n')
file.write('      if(rst_shift_m2==0)begin\n')
file.write('          case(state_shift_m2)\n')
file.write('              0:begin\n')
file.write('                  if(en_shift_m2) state_shift_m2=2; else state_shift_m2=0;\n')
file.write('              end\n')
file.write('              1:begin\n')
file.write('                  if(done_mk_m2) state_shift_m2=0; else state_shift_m2=1;\n')
file.write('              end\n')
file.write('              2:begin\n')
file.write('                  if(!done_mk_m2) state_shift_m2=1; else state_shift_m2=2;\n')
file.write('              end\n')
file.write('          endcase\n')
file.write('      end\n')
file.write('          /////////////////////////////// maxpool kernel m2 ///////////////////////////////\n')
file.write('      if(rst_mk_m2)begin\n')
file.write('          count_ld_mk_m2=0;\n')
file.write('          done_load_mk_m2=0;\n')
file.write('      end\n')
file.write('      else if(en_mk_m2 && !done_load_mk_m2) begin\n')
for i in range(KERNELWIDTH_POOL_M2):
    if(i==0):
        file.write('          if(count_ld_mk_m2<{})begin\n'.format((i+1)*KERNELWIDTH_POOL_M2))
        file.write("""              wr_en_buf_c2=1'b0;\n""")
        file.write('              addr_buf_c2 = start_addr_mk_m2+count_ld_mk_m2;\n')
        file.write('              count_ld_mk_m2 = count_ld_mk_m2+1;\n')
        file.write('              done_load_mk_m2=0;\n')
        file.write('          end\n')
    else:
        file.write('          else if(count_ld_mk_m2<{})begin\n'.format((i+1)*KERNELWIDTH_POOL_M2))
        file.write("""              wr_en_buf_c2=1'b0;\n""")
        file.write('              addr_buf_c2 = start_addr_mk_m2+count_ld_mk_m2+{};\n'.format(i*(DATAWIDTH_M2-KERNELWIDTH_POOL_M2)))
        file.write('              count_ld_mk_m2 = count_ld_mk_m2+1;\n')
        file.write('              done_load_mk_m1=0;\n')
        file.write('          end\n')
file.write('          else if(count_ld_mk_m2=={})begin\n'.format(KERNELWIDTH_POOL_M2*KERNELHEIGHT_POOL_M2))
file.write('              count_ld_mk_m2=count_ld_mk_m2+1;\n')
file.write('              done_load_mk_m2=0;\n')
file.write('          end\n')
file.write('          else begin\n')
file.write("""              count_ld_mk_m2=10'hX;\n""")
file.write("""              done_load_mk_m2=1'b1;\n""")
file.write('          end\n')
file.write('      end\n')
file.write('      if(rst_mk_m2)begin\n')
file.write("""          done_mk_m2=1'b0;\n""")
file.write('          result_temp_mk_m2=0;\n'.format(i))
file.write('          k=0;\n')
file.write('          out_temp_mk_m2=0;\n'.format(i))
file.write('      end\n')
file.write('      else begin\n')
file.write('          if(en_mk_m2==1 && done_load_mk_m2) begin\n')
file.write('              for(k=0; k<{}; k=k+1)begin\n'.format(KERNELWIDTH_POOL_M2*KERNELHEIGHT_POOL_M2))
file.write('                  if(element_mk_m2[k]>out_temp_mk_m2)begin\n'.format(i,i))
file.write('                      out_temp_mk_m2=element_mk_m2[k];\n'.format(i,i))
file.write('                  end\n')
file.write('              end\n')
file.write('              result_temp_mk_m2=out_temp_mk_m2;\n'.format(i,i))
file.write("""              done_mk_m2=1'b1;\n""")
file.write('          end\n')
file.write('      end\n')
file.write('          ////////////////////////////////start of dense 1 always block /////////////////////////////////\n')
file.write('      if(rst_d1)begin\n')
file.write('          count_ld_d1=0;\n')
file.write('          done_load_d1=0;\n')
file.write('      end\n')
file.write('      else if(en_d1 && !done_load_d1) begin\n')
file.write('          if(count_ld_d1<{})begin\n'.format(FILTERBATCH_C2*DATAWIDTH_D1*DATAHEIGHT_D1))
file.write("""              wr_en_buf_m2=1'b0;\n""")
file.write('              addr_buf_m2=count_ld_d1;\n')
file.write('              count_ld_d1 = count_ld_d1+1;\n')
file.write('              done_load_d1=0;\n')
file.write('          end\n')
file.write('          else if(count_ld_d1=={})begin\n'.format(FILTERBATCH_C2*DATAWIDTH_D1*DATAHEIGHT_D1))
file.write('              done_load_d1=0;\n')
file.write('              count_ld_d1 = count_ld_d1+1;\n')
file.write('          end\n')
file.write('          else begin\n')
file.write("""              count_ld_d1=11'hX;\n""")
file.write("""              done_load_d1=1'b1;\n""")
file.write('          end\n')
file.write('      end\n')
file.write('      if(rst_d1==0 && done_load_d1)begin\n')
file.write('          case(state_d1)\n')
file.write('              0:begin\n')
file.write('                  if(en_d1 && done_load_d1) state_d1=2; else state_d1=0;\n')
file.write('              end\n')
file.write('              1:begin\n')
file.write('                  if(done_nc_d1) state_d1=0; else state_d1=1;\n')
file.write('              end\n')
file.write('              2:begin\n')
file.write('                  if(!done_nc_d1) state_d1=1; else state_d1=2;\n')
file.write('              end\n')
file.write('          endcase\n')
file.write('      end\n')   
file.write('          ////////////////////////////////start of dense 2 always block /////////////////////////////////\n')
file.write('      if(rst_d2)begin\n')
file.write('          count_ld_d2=0;\n')
file.write('          done_load_d2=0;\n')
file.write('      end\n')
file.write('      else if(en_d2 && !done_load_d2) begin\n')
file.write('          if(count_ld_d2<{})begin\n'.format(NEURONS_D1))
file.write("""              wr_en_buf_d1=1'b0;\n""")
file.write('              addr_buf_d1=count_ld_d2;\n')
file.write('              count_ld_d2 = count_ld_d2+1;\n')
file.write('              done_load_d2=0;\n')
file.write('          end\n')
file.write('          else if(count_ld_d2=={})begin\n'.format(NEURONS_D1))
file.write('              done_load_d2=0;\n')
file.write('              count_ld_d2 = count_ld_d2+1;\n')
file.write('          end\n')
file.write('          else begin\n')
file.write("""              count_ld_d2=11'hX;\n""")
file.write("""              done_load_d2=1'b1;\n""")
file.write('          end\n')
file.write('      end\n')
file.write('      if(rst_d2==0 && done_load_d2)begin\n')
file.write('          case(state_d2)\n')
file.write('              0:begin\n')
file.write('                  if(en_d2 && done_load_d2) state_d2=2; else state_d2=0;\n')
file.write('              end\n')
file.write('              1:begin\n')
file.write('                  if(done_nc_d2) state_d2=0; else state_d2=1;\n')
file.write('              end\n')
file.write('              2:begin\n')
file.write('                  if(!done_nc_d2) state_d2=1; else state_d2=2;\n')
file.write('              end\n')
file.write('          endcase\n')
file.write('      end\n')   
file.write('          /////////////////////////////// neuron calculation d1 ////////////////////////////////\n')
file.write('      if(rst_nc_d1)begin\n')
file.write('          count_ld_nc_d1=0;\n')
file.write('          done_load_nc_d1=0;\n')
file.write('      end\n')
file.write('      else if(en_nc_d1 && !done_load_nc_d1) begin\n')
file.write('          if(count_ld_nc_d1<{})begin\n'.format(FILTERBATCH_C2*DATAWIDTH_D1*DATAHEIGHT_D1+1))
file.write('              addr = OFFSET_D1_W+channel_d1+count_ld_nc_d1;\n')
file.write('              count_ld_nc_d1 = count_ld_nc_d1+1;\n')
file.write('              done_load_nc_d1=0;\n')
file.write('          end\n')
file.write('          else if(count_ld_nc_d1=={})begin\n'.format(FILTERBATCH_C2*DATAWIDTH_D1*DATAHEIGHT_D1+1))
file.write('              addr=OFFSET_D1_B+neuron_select_d1; // gives the bias address for that particular neuron\n')
file.write('              count_ld_nc_d1 = count_ld_nc_d1+1;\n')
file.write('              done_load_nc_d1=0;\n')
file.write('          end\n')
file.write('          else if(count_ld_nc_d1=={})begin\n'.format(FILTERBATCH_C2*DATAWIDTH_D1*DATAHEIGHT_D1+2))
file.write('              bias_d1=dout;\n')
file.write('              count_ld_nc_d1 = count_ld_nc_d1+1;\n')
file.write('              done_load_nc_d1=0;\n')
file.write('          end\n')
file.write('          else begin\n')
file.write("""              count_ld_nc_d1=11'hX;\n""")
file.write("""              done_load_nc_d1=1'b1;\n""")
file.write('          end\n')
file.write('      end\n')
file.write('      if(rst_nc_d1==0 && done_load_nc_d1) begin\n')
file.write('          case(state_nc_d1)\n')
file.write('              0:begin\n')
file.write('                  if(en_nc_d1 && done_load_nc_d1) state_nc_d1=2; else state_nc_d1=0;\n')
file.write('              end\n')
file.write('              1:begin\n')
file.write('                  if(done_m_nc_d1) state_nc_d1=0; else state_nc_d1=1;\n')
file.write('              end\n')
file.write('              2:begin\n')
file.write('                  if(!done_m_nc_d1) state_nc_d1=1; else state_nc_d1=2;')
file.write('              end\n')
file.write('          endcase\n')
file.write('      end\n')
file.write('      \n')
file.write('          /////////////////////////////// neuron calculation d2 ////////////////////////////////\n')
file.write('      if(rst_nc_d2)begin\n')
file.write('          count_ld_nc_d2=0;\n')
file.write('          done_load_nc_d2=0;\n')
file.write('      end\n')
file.write('      else if(en_nc_d2 && !done_load_nc_d2) begin\n')
file.write('          if(count_ld_nc_d2<{})begin\n'.format(NEURONS_D1+1))
file.write('              addr = OFFSET_D2_W+channel_d2+count_ld_nc_d2;\n')
file.write('              count_ld_nc_d2 = count_ld_nc_d2+1;\n')
file.write('              done_load_nc_d2=0;\n')
file.write('          end\n')
file.write('          else if(count_ld_nc_d2=={})begin\n'.format(NEURONS_D1+1))
file.write('              addr=OFFSET_D2_B+neuron_select_d2; // gives the bias address for that particular neuron\n')
file.write('              count_ld_nc_d2 = count_ld_nc_d2+1;\n')
file.write('              done_load_nc_d2=0;\n')
file.write('          end\n')
file.write('          else if(count_ld_nc_d2=={})begin\n'.format(NEURONS_D1+2))
file.write('              bias_d2=dout;\n')
file.write('              count_ld_nc_d2 = count_ld_nc_d2+1;\n')
file.write('              done_load_nc_d2=0;\n')
file.write('          end\n')
file.write('          else begin\n')
file.write("""              count_ld_nc_d2=11'hX;\n""")
file.write("""              done_load_nc_d2=1'b1;\n""")
file.write('          end\n')
file.write('      end\n')
file.write('      if(rst_nc_d2==0 && done_load_nc_d2) begin\n')
file.write('          case(state_nc_d2)\n')
file.write('              0:begin\n')
file.write('                  if(en_nc_d2 && done_load_nc_d2) state_nc_d2=2; else state_nc_d2=0;\n')
file.write('              end\n')
file.write('              1:begin\n')
file.write('                  if(done_m_nc_d2) state_nc_d2=0; else state_nc_d2=1;\n')
file.write('              end\n')
file.write('              2:begin\n')
file.write('                  if(!done_m_nc_d2) state_nc_d2=1; else state_nc_d2=2;')
file.write('              end\n')
file.write('          endcase\n')
file.write('      end\n')
file.write('      \n')
file.write('          ////////////////////////////////// soft max /////////////////////////////////\n')
file.write('      if(en_sm==1) begin\n')
file.write('          values[0]<=fc_out_d2[0:31];\n')
file.write('          values[1]<=fc_out_d2[32:63];\n')
file.write('          values[2]<=fc_out_d2[64:95];\n')
file.write('          values[3]<=fc_out_d2[96:127];\n')
file.write('          values[4]<=fc_out_d2[128:159];\n')
file.write('          values[5]<=fc_out_d2[160:191];\n')
file.write('          values[6]<=fc_out_d2[192:223];\n')
file.write('          values[7]<=fc_out_d2[224:255];\n')
file.write('          values[8]<=fc_out_d2[256:287];\n')
file.write('          values[9]<=fc_out_d2[288:319];\n')
file.write('          for(i=0; i<10; i=i+1)begin\n')
file.write('              if(values[i]>max)begin\n')
file.write('                  max=values[i];\n')
file.write('                  temp=i;\n')
file.write('              end\n')
file.write('          end\n')
file.write('      end\n')
file.write('      else begin\n')
file.write('          i=0;\n')
file.write('          temp=0;\n')
file.write('      end\n')
file.write('  end\n')
file.write('          ////////////////////////////////// C1 weight load /////////////////////////////////////\n')
file.write('  always@(count_ld_shift_c1)begin\n')
file.write('      if(count_ld_shift_c1<{})\n'.format(KERNELWIDTH_C1*KERNELHEIGHT_C1+2))
file.write('          W_shift_c1={{W_shift_c1[{}:{}],dout}};\n'.format(BITWIDTH_W,(KERNELWIDTH_C1*KERNELHEIGHT_C1*BITWIDTH_W-1)))
file.write('  end\n')
file.write('      ////////////////////////////////// c1 data load ///////////////////////////////////\n')
file.write('  always@(count_ld_conv_c1)begin\n')
file.write('      if(count_ld_conv_c1<{})\n'.format(KERNELWIDTH_C1*KERNELHEIGHT_C1+2))
file.write('          X_conv_c1={{X_conv_c1[{}:{}],dout}};\n'.format(BITWIDTH_IN,(KERNELWIDTH_C2*KERNELHEIGHT_C2*BITWIDTH_IN-1)))
file.write('  end\n')
file.write('      ////////////////////////////////// m1 data load /////////////////////////////////\n')
file.write('  always@(count_ld_mk_m1)begin\n')
file.write('      if(count_ld_mk_m1<{})begin\n'.format(KERNELWIDTH_POOL_M1*KERNELHEIGHT_POOL_M1+2))
file.write('          X_mk_m1={{X_mk_m1[{}:{}],dout_buf_1}};\n'.format(BITWIDTH_C1,(KERNELWIDTH_POOL_M1*KERNELHEIGHT_POOL_M1*BITWIDTH_C1-1)))
file.write('      end\n')
file.write('  end\n')
file.write('      ////////////////////////////////// c2 weight and bias load//////////////////////////////////\n')
file.write('  always@(count_ld_shift_c2d)begin\n')
file.write('      if(count_ld_shift_c2d<{})\n'.format(KERNELWIDTH_C2*KERNELHEIGHT_C2+2))
file.write('         W_shift_c2d={{W_shift_c2d[{}:{}],dout}};\n'.format(BITWIDTH_W,(KERNELWIDTH_C2*KERNELHEIGHT_C2*BITWIDTH_W-1)))
file.write('  end\n')
file.write('  always@(count_ld_c2d)begin\n')
file.write('      if(count_ld_c2d==2)\n')
file.write('         bias_c2d=dout;\n')
file.write('  end\n')   
file.write('      ////////////////////////////////c2 data load///////////////////////////////////////\n')
file.write('  always@(count_ld_conv_c2)begin\n')
file.write('      if(count_ld_conv_c2<{})begin\n'.format(KERNELWIDTH_C2*KERNELHEIGHT_C2+2))
file.write('          X_conv_c2={{X_conv_c2[{}:{}],dout_buf_m1}};\n'.format(BITWIDTH_M1,(KERNELWIDTH_C2*KERNELHEIGHT_C2*BITWIDTH_M1-1)))
file.write('      end\n')
file.write('  end\n')
file.write('      /////////////////////////////////// m2 data load ///////////////////////////////////////\n')
file.write('  always@(count_ld_mk_m2)begin\n')
file.write('      if(count_ld_mk_m2<{})begin\n'.format(KERNELWIDTH_POOL_M2*KERNELHEIGHT_POOL_M2+2))
file.write('          X_mk_m2={{X_mk_m2[{}:{}],dout_buf_c2}};\n'.format(BITWIDTH_C2,(KERNELWIDTH_POOL_M2*KERNELHEIGHT_POOL_M2*BITWIDTH_C2-1)))
file.write('      end\n')
file.write('  end\n')
file.write('      /////////////////////////////////// d1 weight and bias load /////////////////////////////////////\n')
file.write('  always@(count_ld_d1)begin\n')
file.write('      if(count_ld_d1<{})\n'.format(FILTERBATCH_C2*DATAWIDTH_D1*DATAHEIGHT_D1+2))
file.write('          X_nc_d1={{X_nc_d1[{}:{}],dout_buf_m2}};\n'.format((BITWIDTH_M2),(FILTERBATCH_C2*DATAWIDTH_D1*DATAHEIGHT_D1*BITWIDTH_M2-1)))
file.write('  end\n')
file.write('  \n')
file.write('  always@(count_ld_nc_d1)begin\n')
file.write('      if(count_ld_nc_d1<{})\n'.format(FILTERBATCH_C2*DATAWIDTH_D1*DATAHEIGHT_D1+2))
file.write('          w_neuron_d1={{w_neuron_d1[{}:{}],dout}};\n'.format((BITWIDTH_W),(FILTERBATCH_C2*DATAWIDTH_D1*DATAHEIGHT_D1*BITWIDTH_W-1)))
file.write('  end\n')
file.write('  \n')
file.write('      /////////////////////////////////// d2 weight and bias load /////////////////////////////////////\n')
file.write('  always@(count_ld_d2)begin\n')
file.write('      if(count_ld_d2<{})\n'.format(NEURONS_D1+2))
file.write('          X_nc_d2={{X_nc_d2[{}:{}],dout_buf_d1}};\n'.format((BITWIDTH_D1),(NEURONS_D1*BITWIDTH_D1-1)))
file.write('  end\n')
file.write('  \n')
file.write('  always@(count_ld_nc_d2)begin\n')
file.write('      if(count_ld_nc_d2<{})\n'.format(NEURONS_D1+2))
file.write('          w_neuron_d2={{w_neuron_d2[{}:{}],dout}};\n'.format((BITWIDTH_W),(NEURONS_D1*BITWIDTH_W-1)))
file.write('  end\n')
file.write('  \n')

file.write('      /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n')
file.write('      /////////////////////////////////////////////////////Convolution Layer 1/////////////////////////////////////////////////\n')
file.write('      /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n')
file.write('  always@(posedge done_shift_c1 or posedge rst_c1)begin\n')
file.write('      if(rst_c1)begin\n')
file.write('          count_c1=0;\n')
file.write('      end\n')
file.write('      else begin\n')
file.write('          if(count_c1<{})begin\n'.format(FILTERBATCH_C1))
file.write('              count_c1=count_c1+1;\n')
file.write('          end\n')
file.write('          else\n')
file.write("""              count_c1=2'hX;\n""")
file.write('      end\n')
file.write('  end\n')
file.write('      \n')
file.write('      ////////////////////////////////////// C1 //////////////////////////////////////\n')
file.write('  always@(*)begin\n')
file.write('      case(state_c1)\n')
file.write('          0:begin\n')
file.write('              en_shift_c1=0;\n')
file.write('              rst_shift_c1=1;\n')
file.write('          end\n')
file.write('          1:begin\n')
file.write('              en_shift_c1=1;\n')
file.write('              rst_shift_c1=0;\n')
file.write('              channel_select_c1=count_c1;\n')
file.write('          end\n')
file.write('          2:begin\n')
file.write('              en_shift_c1=0;\n')
file.write('              rst_shift_c1=1;\n')
file.write('          end\n')
file.write('          default:begin\n')
file.write('              en_shift_c1=0;\n')
file.write('              rst_shift_c1=1;\n')
file.write('          end\n')
file.write('      endcase\n')
file.write('      if(count_c1=={})begin\n'.format(FILTERBATCH_C1))
file.write("""          done_c1=1'b1;\n""")
file.write('      end\n')
file.write('      else begin\n')
file.write("""          done_c1=1'b0;\n""")
file.write('      end\n')
file.write('  end\n')
file.write('      //////////////////////////////////shift c1//////////////////////////////////////\n')
file.write('  always@(posedge done_conv_c1 or posedge rst_shift_c1)begin\n')
file.write('      if(rst_shift_c1)begin\n')
file.write('          count_shift_c1=0;\n')
file.write('      end\n')
file.write('      else begin\n')
file.write('          if(count_shift_c1<676)begin\n')
file.write('              count_shift_c1=count_shift_c1+1;\n')
file.write('              din_buf_0=result_temp_conv_c1;\n')
file.write('          end\n')
file.write('          else\n')
file.write("""              count_shift_c1=10'hX;\n""")
file.write('      end\n')
file.write('  end\n')
file.write('  \n')
file.write('  always@(*)begin\n')
file.write('      case(state_shift_c1)\n')
file.write('          0:begin\n')
file.write('              en_conv_c1=0;\n')
file.write('              rst_conv_c1=1;\n')
file.write('              window_select_c1=0;\n')
file.write('          end\n')
file.write('          1:begin\n')
file.write('              en_conv_c1=1;\n')
file.write('              rst_conv_c1=0;\n')
file.write('              window_select_c1=count_shift_c1;\n')
file.write('          end\n')
file.write('          2:begin\n')
file.write('              en_conv_c1=0;\n')
file.write('              rst_conv_c1=1;\n')
file.write('              window_select_c1=0;\n')
file.write('          end\n')
file.write('          default:begin\n')
file.write('              en_conv_c1=0;\n')
file.write('              rst_conv_c1=1;\n')
file.write('              window_select_c1=0;\n')
file.write('          end\n')
file.write('      endcase\n')
file.write('      if(count_shift_c1==676)begin\n')
file.write("""          done_shift_c1=1'b1;\n""")
file.write('      end\n')
file.write('      else begin\n')
file.write("""          done_shift_c1=1'b0;\n""")
file.write('      end\n')
file.write('  end\n')
file.write('  \n')
for i in range(KERNELWIDTH_C1*KERNELHEIGHT_C1):
    file.write('  assign mem_x_conv_c1[{}]= X_conv_c1[{}:{}];\n'.format(i,(i*BITWIDTH_IN),(i*BITWIDTH_IN+BITWIDTH_IN-1)))
file.write('  \n')
for j in range(KERNELWIDTH_C1*KERNELHEIGHT_C1):
    file.write('  assign mem_w_conv_c1[{}]= W_shift_c1[{}:{}];\n'.format(j,(j*BITWIDTH_W),(j*BITWIDTH_W+BITWIDTH_W-1)))
file.write('  \n')
file.write('  always@(posedge done_m_c1 or posedge rst_conv_c1)begin\n')
file.write('      if(rst_conv_c1)begin\n')
file.write('          count_conv_c1 = 0;\n')
file.write('          buffer_conv_c1 = 0;\n')
file.write('      end\n')
file.write('      else begin\n')
file.write('          if(count_conv_c1<{})begin\n'.format(KERNELWIDTH_C1*KERNELHEIGHT_C1))
file.write('              count_conv_c1=count_conv_c1+1;\n')
file.write('              buffer_conv_c1=buffer_conv_c1+result_temp_m_c1;\n')
file.write('          end\n')
file.write('          else begin\n')
file.write("""              count_conv_c1=4'hx;\n""")
file.write('          end\n')
file.write('      end\n')
file.write('  end\n')
file.write('  \n')
file.write('  always@(*)begin\n')
file.write('      case(state_conv_c1)\n')
file.write('          0:begin\n')
file.write('              en_m_c1=0;\n')
file.write('              rst_m_c1=1;\n')
file.write('              x_in_m_c1=0;\n')
file.write('              w_in_m_c1=0;\n')
file.write('          end\n')
file.write('          1:begin\n')
file.write('              en_m_c1=1;\n')
file.write('              rst_m_c1=0;\n')
file.write('              x_in_m_c1=mem_x_conv_c1[count_conv_c1];\n')
file.write('              w_in_m_c1=mem_w_conv_c1[count_conv_c1];\n')
file.write('          end\n')
file.write('          2:begin\n')
file.write('              en_m_c1=0;\n')
file.write('              rst_m_c1=1;\n')
file.write('              x_in_m_c1=0;\n')
file.write('              w_in_m_c1=0;\n')
file.write('          end\n')
file.write('          default:begin\n')
file.write('              en_m_c1=0;\n')
file.write('              rst_m_c1=1;\n')
file.write('              x_in_m_c1=0;\n')
file.write('              w_in_m_c1=0;\n')
file.write('          end\n')
file.write('      endcase\n')
file.write('      if(count_conv_c1=={})begin\n'.format(KERNELWIDTH_C1*KERNELHEIGHT_C1))
file.write('          result_final_temp_conv_c1=buffer_conv_c1+bias_shift_c1;\n')
file.write('          result_final_temp_conv_c1=result_final_temp_conv_c1>>>4;\n')
file.write('          result_temp_conv_c1=result_final_temp_conv_c1[15:0];\n')
file.write("""          result_temp_conv_c1 = result_temp_conv_c1 > THRESHOLD ? result_temp_conv_c1: 16'b0;\n""")
file.write('  \n')
file.write("""          done_conv_c1=1'b1;\n""")
file.write('      end\n')
file.write('      else begin\n')
file.write('          result_temp_conv_c1=0;\n')
file.write("""          done_conv_c1=1'b0;\n""")
file.write('      end\n')
file.write('  end\n')
file.write('  \n')
file.write('  element_multiplier_c1#(BITWIDTH_IN,BITWIDTH_W,BITWIDTH_C1) multiply_0(\n')
file.write('  .clk(clk),\n')
file.write('  .in_ready(en_m_c1),\n')
file.write('  .rst(rst_m_c1),\n')
file.write('  .X_element(x_in_m_c1),\n')
file.write('  .W_element(w_in_m_c1),\n')
file.write('  .Z_element(result_temp_m_c1),\n')
file.write('  .done(done_m_c1)\n')
file.write('  );\n')
file.write('  \n')
file.write('      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n')
file.write('      //////////////////////////////////////////////////////Maxpool Layer 1///////////////////////////////////////////////////////\n')
file.write('      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n')
file.write('  \n')
file.write('  assign start_addr_mk_m1=channel_select_m1*{}+window_select_m1*2;\n'.format((DATAWIDTH_M1*DATAHEIGHT_M1*BITWIDTH_C1),(STRIDEWIDTH_POOL_M1)))
file.write('  \n')
file.write('      ////////////////////////maxpool kernel/////////////////////////\n')
for j in range(KERNELWIDTH_POOL_M1*KERNELHEIGHT_POOL_M1):
    file.write('  assign element_mk_m1[{}]=X_mk_m1[{}:{}];\n'.format(j,(j*BITWIDTH_M1),(j*BITWIDTH_M1+BITWIDTH_M1-1)))
file.write('  \n')
file.write('  always@(posedge done_shift_m1 or posedge rst_m1)begin\n')
file.write('      if(rst_m1)begin\n')
file.write('          count_m1=0;\n')
file.write('      end\n')
file.write('      else begin\n')
file.write('          if(count_m1<{})begin\n'.format(FILTERBATCH_C1))
file.write('              count_m1=count_m1+1;\n')
file.write('          end\n')
file.write('          else\n')
file.write("""              count_m1=2'hX;\n""")
file.write('      end\n')
file.write('  end\n')
file.write('  \n')
file.write('  always@(*)begin\n')
file.write('       case(state_m1)\n')
file.write('          0:begin\n')
file.write('              en_shift_m1=0;\n')
file.write('              rst_shift_m1=1;\n')
file.write('          end\n')
file.write('          1:begin\n')
file.write('              en_shift_m1=1;\n')
file.write('              rst_shift_m1=0;\n')
file.write('              channel_select_m1=count_m1;\n')
file.write('          end\n')
file.write('          2:begin\n')
file.write('              en_shift_m1=0;\n')
file.write('              rst_shift_m1=1;\n')
file.write('          end\n')
file.write('          3:begin\n')
file.write('              en_shift_m1=0;\n')
file.write('              rst_shift_m1=0;\n')
file.write('          end\n')
file.write('          default:begin\n')
file.write('              en_shift_m1=0;\n')
file.write('              rst_shift_m1=1;\n')
file.write('          end\n')
file.write('      endcase\n')
file.write('      if(count_m1=={})begin\n'.format(FILTERBATCH_C1))
file.write("""          done_m1=1'b1;\n""")
file.write('      end\n')
file.write('      else begin\n')
file.write("""          done_m1=1'b0;\n""")
file.write('      end\n')
file.write('  end\n')
file.write('  \n')
file.write('      ///////////////////////////////////shift m1/////////////////////////////////////\n')
file.write('  always@(posedge done_mk_m1 or posedge rst_shift_m1)begin\n')
file.write('      if(rst_shift_m1)begin\n')
file.write('          count_shift_m1=0;\n')
file.write('          result_temp_shift_m1=0;\n')
file.write('          n=1;\n')
file.write('      end\n')
file.write('      else begin\n')
file.write('          if(count_shift_m1<{})begin\n'.format(DATAWIDTH_C2*DATAHEIGHT_C2))
file.write('              if(count_shift_m1==n*{}-1 && !done_mk_m1_row_ch1)begin\n'.format(DATAWIDTH_C2))
file.write('                  n=n+1;\n')
file.write('                  count_shift_m1=count_shift_m1+1;\n')
file.write("""                  done_mk_m1_row_ch1=1'b1;\n""")
file.write('              end\n')
file.write('              else begin\n')
file.write('                  count_shift_m1=count_shift_m1+1;\n')
file.write('                  result_temp_shift_m1={{result_temp_shift_m1[{}:{}],result_temp_mk_m1}};\n'.format(DATAWIDTH_C2,(DATAWIDTH_C2*DATAHEIGHT_C2*BITWIDTH_C2-1)))
file.write('                  din_buf_m1=result_temp_mk_m1;\n')
file.write('              end\n')
file.write('          end\n')
file.write('          else\n')
file.write("""              count_shift_m1=8'hX;\n""")
file.write('      end\n')
file.write('  end\n')
file.write('  \n')
file.write('  always@(*)begin\n')
file.write('      case(state_shift_m1)\n')
file.write('          0:begin\n')
file.write('              en_mk_m1=0;\n')
file.write('              rst_mk_m1=1;\n')
file.write('              window_select_m1=0;\n')
file.write('          end\n')
file.write('          1:begin\n')
file.write('              en_mk_m1=1;\n')
file.write('              rst_mk_m1=0;\n')
file.write('              window_select_m1=count_shift_m1;\n')
file.write('          end\n')
file.write('          2:begin\n')
file.write('              en_mk_m1=0;\n')
file.write('              rst_mk_m1=1;\n')
file.write('              window_select_m1=0;\n')
file.write('          end\n')
file.write('          default:begin\n')
file.write('              en_mk_m1=0;\n')
file.write('              rst_mk_m1=1;\n')
file.write('              window_select_m1=0;\n')
file.write('          end\n')
file.write('      endcase\n')
file.write('      if(count_shift_m1=={})begin\n'.format(DATAWIDTH_C2*DATAHEIGHT_C2))
file.write("""          done_shift_m1=1'b1;\n""")
file.write('      end\n')
file.write('      else begin\n')
file.write("""          done_shift_m1=1'b0;\n""")
file.write('      end\n')
file.write('  end\n')
file.write('  \n')
file.write('  ////////////////////////////////////// maxpool kernel /////////////////////////////////////////\n')
file.write('  always@(posedge rst_mk_m1)begin\n')
file.write('      done_mk_m1_row_ch1=0;\n')
file.write('  end\n')
file.write('  \n')
file.write('      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n')
file.write('      //////////////////////////////////////////////////////Convolution Layer 2///////////////////////////////////////////////////\n')
file.write('      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n')
file.write('  \n')
file.write('  always@(posedge done_c2d or posedge rst_c2)begin\n')
file.write('      if(rst_c2)begin\n')
file.write('          count_c2=0;\n')
file.write('      end\n')
file.write('      else begin\n')
file.write('          if(count_c2<{})begin\n'.format(FILTERBATCH_C2))
file.write('              count_c2=count_c2+1;\n')
file.write('          end\n')
file.write('          else\n')
file.write("""              count_c2=2'hX;\n""")
file.write('      end\n')
file.write('  end\n')
file.write('  \n')
file.write('  always@(*)begin\n')
file.write('      case(state_c2)\n')
file.write('          0:begin\n')
file.write('              en_c2d=0;\n')
file.write('              rst_c2d=1;\n')
file.write('          end\n')
file.write('          1:begin\n')
file.write('              en_c2d=1;\n')
file.write('              rst_c2d=0;\n')
file.write('              channel_select_c2=count_c2;\n')
file.write('          end\n')
file.write('          2:begin\n')
file.write('              en_c2d=0;\n')
file.write('              rst_c2d=1;\n')
file.write('          end\n')
file.write('          default:begin\n')
file.write('              en_c2d=0;\n')
file.write('              rst_c2d=1;\n')
file.write('          end\n')
file.write('      endcase\n')
file.write('      if(count_c2=={})\n'.format(FILTERBATCH_C2))
file.write("""          done_c2=1'b1;\n""")
file.write('      else \n')
file.write("""          done_c2=1'b0;\n""")
file.write('  end\n')
file.write('  \n')
file.write('  always@(posedge done_shift_c2d or posedge rst_c2d)begin\n')
file.write('      if(rst_c2d)begin\n')
file.write('          count_c2d=0;\n')
file.write('          add_start_c2d=0;\n')
for i in range(FILTERBATCH_C1):
    file.write('           Z_temp_c2d[{}]=0;\n'.format(i))
file.write('          done_c2d=0;\n')
file.write('      end\n')
file.write('      else begin\n')
file.write('          if(count_c2d<{})begin\n'.format(FILTERBATCH_C1))
file.write('              Z_temp_c2d[count_c2d]={result_temp_shift_c2d};\n')
file.write('              count_c2d=count_c2d+1;\n')
file.write('              if(count_c2d=={})\n'.format(FILTERBATCH_C1))
file.write("""                 add_start_c2d=1'b1;\n""")
file.write('          end\n')
file.write('          else\n')
file.write("""              count_c2d=2'hX;\n""")
file.write('      end\n')
file.write('  end\n')
file.write('  \n')
file.write('  always@(*)begin\n')
file.write('      case(state_c2d)\n')
file.write('          0:begin\n')
file.write('              en_shift_c2d=0;\n')
file.write('              rst_shift_c2d=1;\n')
file.write('          end\n')
file.write('          1:begin\n')
file.write('              en_shift_c2d=1;\n')
file.write('              rst_shift_c2d=0;\n')
file.write('              channel_select_c2d=count_c2d;\n')
file.write('          end\n')
file.write('          2:begin\n')
file.write('              en_shift_c2d=0;\n')
file.write('              rst_shift_c2d=1;\n')
file.write('          end\n')
file.write('          default:begin\n')
file.write('              en_shift_c2d=0;\n')
file.write('              rst_shift_c2d=1;\n')
file.write('          end\n')
file.write('      endcase\n')
file.write('  end\n')
file.write('  always@(*)begin\n')
file.write('      case(state_add)\n')
file.write('          0:begin\n')
file.write('              rst_add=1;\n')
for i in range(1,FILTERBATCH_C1+1):
    file.write('              add_in{}=0;\n'.format(i))
file.write('          end\n')
file.write('          1:begin\n')
file.write('              rst_add=0;\n')
for i in range(1,FILTERBATCH_C1+1):
    file.write('              add_in{}=Z_temp_c2d_temp_{}[count_add_c2d];\n'.format(i,i-1))
file.write('          end\n')
file.write('      endcase\n')
file.write('  end\n')
file.write('  \n')
file.write('  always@(posedge done_add)begin\n')
file.write('      if(count_add_c2d < {})begin\n'.format(DATAWIDTH_M2*DATAHEIGHT_M2))
file.write('          count_add_c2d=count_add_c2d+1;\n')
file.write('          din_buf_c2=adder;\n')
file.write("""          done_channel_add=1'b0;\n""")
file.write('      end\n')
file.write('      else if (count_add_c2d=={})begin\n'.format(DATAWIDTH_M2*DATAHEIGHT_M2))
file.write("""          done_channel_add=1'b1;\n""")
file.write('          count_add_c2d=0;\n')
file.write('      end\n')
file.write('      else\n')
file.write("""          done_channel_add=1'b0;\n""")
file.write('  end\n')
file.write('  \n')
file.write('  always@(posedge done_channel_add)begin\n')
file.write('      if(count_c2d=={} && done_channel_add)\n'.format(FILTERBATCH_C1))
file.write("""          done_c2d=1'b1;\n""")
file.write('      else\n')
file.write("""          done_c2d=1'b0;\n""")
file.write('  end\n')
file.write('  \n')
file.write('  adder add(\n')
file.write('  .clk(clk),\n')
file.write('  .rst_add(rst_add),\n')
file.write('  .adder(adder),\n')
file.write('  .B(bias_new_c2d),\n')
for i in range(1,FILTERBATCH_C1+1):
    file.write('  .Z{}(add_in{}),\n'.format(i,i))
file.write('  .THRESHOLD(THRESHOLD),\n')
file.write('  .done_add(done_add)\n')
file.write('  );\n')
file.write('  \n')
file.write('      //////////////////////////////////// shift window c2 ////////////////////////////////////////\n')
file.write('  assign channel_shift_c2d=channel_select_c2*{}*{} + channel_select_c2d*{}; //channel_select_c2*9*2-> 9=kernel size(3x3), 2=filterbatch c2\n'.format((KERNELWIDTH_C2*KERNELHEIGHT_C2),(FILTERBATCH_C2),(KERNELWIDTH_C2*KERNELHEIGHT_C2)))
file.write('                                                                           //channel_select_c1*9-> 9=kernel size    \n')
file.write('  \n')
file.write('  always@(posedge done_ck_c2d or posedge rst_shift_c2d)begin\n')
file.write('      if(rst_shift_c2d)begin\n')
file.write('          count_shift_c2d=0;\n')
file.write('          result_temp_shift_c2d=0;\n')
file.write('      end\n')
file.write('      else begin\n')
file.write('          if(count_shift_c2d<{})begin\n'.format(DATAWIDTH_M2*DATAHEIGHT_M2))
file.write('              count_shift_c2d=count_shift_c2d+1;\n')
file.write('              result_temp_shift_c2d={result_temp_shift_c2d[16:1935],result_temp_ck_c2d};')
file.write('          end\n')
file.write('          else\n')
file.write("""              count_shift_c2d=7'hX;\n""")
file.write('      end\n')
file.write('  end\n')
file.write('  \n')
file.write('  always@(*)begin\n')
file.write('      case(state_shift_c2d)\n')
file.write('          0:begin\n')
file.write('              en_ck_c2d=0;\n')
file.write('              rst_ck_c2d=1;\n')
file.write('              window_select_c2=0;\n')
file.write('          end\n')
file.write('          1:begin\n')
file.write('              en_ck_c2d=1;\n')
file.write('              rst_ck_c2d=0;\n')
file.write('              window_select_c2=count_shift_c2d;\n')
file.write('          end\n')
file.write('          2:begin\n')
file.write('              en_ck_c2d=0;\n')
file.write('              rst_ck_c2d=1;\n')
file.write('              window_select_c2=0;\n')
file.write('          end\n')
file.write('          default:begin\n')
file.write('              en_ck_c2d=0;\n')
file.write('              rst_ck_c2d=1;\n')
file.write('              window_select_c2=0;\n')
file.write('          end\n')
file.write('      endcase\n')
file.write('      if(count_shift_c2d==121)\n')
file.write("""          done_shift_c2d=1'b1;\n""")
file.write('      else\n')
file.write("""          done_shift_c2d=1'b0;\n""")
file.write('  end\n')
file.write('  \n')
for j in range(KERNELWIDTH_C2*KERNELHEIGHT_C2):
    file.write('  assign mem_x_ck_c2d[{}]= X_conv_c2[{}:{}];\n'.format(j,(j*BITWIDTH_C2),(j*BITWIDTH_C2+BITWIDTH_C2-1)))
file.write('  \n')
for k in range(KERNELWIDTH_C2*KERNELHEIGHT_C2):
    file.write('  assign mem_w_ck_c2d[{}]= W_shift_c2d[{}:{}];\n'.format(k,(k*BITWIDTH_W),(k*BITWIDTH_W+BITWIDTH_W-1)))
file.write('  \n')
file.write('  always@(posedge done_m_c2d or posedge rst_ck_c2d)begin\n')
file.write('      if(rst_ck_c2d)begin\n')
file.write('          count_ck_c2d=0;\n')
file.write('          buffer_ck_c2d=0;\n')
file.write('      end\n')
file.write('      else begin\n')
file.write('          if(count_ck_c2d<{})begin\n'.format(KERNELWIDTH_C2*KERNELHEIGHT_C2))
file.write('              count_ck_c2d=count_ck_c2d+1;\n')
file.write('              buffer_ck_c2d=buffer_ck_c2d+result_temp_m_c2d;\n')
file.write('          end\n')
file.write('          else begin\n')
file.write("""          count_ck_c2d=4'hX;\n""")
file.write('          end\n')
file.write('      end\n')
file.write('  end\n')
file.write('  \n')
file.write('  always@(*)begin\n')
file.write('      case(state_ck_c2d)\n')
file.write('          0:begin\n')
file.write('              en_m_c2d=0;\n')
file.write('              rst_m_c2d=1;\n')
file.write('              x_in_m_c2d=0;\n')
file.write('              w_in_m_c2d=0;\n')
file.write('          end\n')
file.write('          1: begin\n')
file.write('              en_m_c2d=1;\n')
file.write('              rst_m_c2d=0;\n')
file.write('              x_in_m_c2d=mem_x_ck_c2d[count_ck_c2d];\n')
file.write('              w_in_m_c2d=mem_w_ck_c2d[count_ck_c2d];\n')
file.write('          end\n')
file.write('          2:begin\n')
file.write('              en_m_c2d=0;\n')
file.write('              rst_m_c2d=1;\n')
file.write('              x_in_m_c2d=0;\n')
file.write('              w_in_m_c2d=0;\n')
file.write('          end\n')
file.write('          default:begin\n')
file.write('              en_m_c2d=0;\n')
file.write('              rst_m_c2d=1;\n')
file.write('              x_in_m_c2d=0;\n')
file.write('              w_in_m_c2d=0;\n')
file.write('          end\n')
file.write('      endcase\n')
file.write('      if(count_ck_c2d=={})begin\n'.format(KERNELWIDTH_C2*KERNELHEIGHT_C2))
file.write('          result_final_temp_ck_c2d=buffer_ck_c2d>>>4;\n')
file.write('          if(result_final_temp_ck_c2d>32767 || result_final_temp_ck_c2d<-32768)begin\n')       
file.write('              if(result_final_temp_ck_c2d>32767)\n')
file.write("""                  result_temp_ck_c2d = 16'b0111111111111111;\n""")
file.write('              else\n')
file.write("""                  result_temp_ck_c2d = 16'b1000000000000000;\n""")
file.write('          end\n')
file.write('          else begin\n')
file.write('              result_temp_ck_c2d = result_final_temp_ck_c2d[15:0];\n')
file.write('          end\n')
file.write("""          done_ck_c2d=1'b1;\n""")
file.write('      end\n')
file.write('      else begin\n')
file.write('          result_temp_ck_c2d=0;\n')
file.write("""          done_ck_c2d=1'b0;\n""")
file.write('      end\n')
file.write('  end\n')
file.write('  \n')
file.write('  element_multiplier_c2#(BITWIDTH_M1,BITWIDTH_W,BITWIDTH_C2) multiply_c2(\n')
file.write('  .clk(clk),\n')
file.write('  .in_ready(en_m_c2d),\n')
file.write('  .rst(rst_m_c2d),\n')
file.write('  .X_element(x_in_m_c2d),\n')
file.write('  .W_element(w_in_m_c2d),\n')
file.write('  .Z_element(result_temp_m_c2d),\n')
file.write('  .done(done_m_c2d)\n')
file.write('  );\n')
file.write('  \n')
file.write('  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n')
file.write('  //////////////////////////////////////////////////////Maxpool Layer 2///////////////////////////////////////////////////////\n')
file.write('  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n')
file.write('  \n')
file.write('  assign start_addr_mk_m2=channel_select_m2*1936+window_select_m2*2+(window_select_m2/5)*12;\n')
file.write('  \n')
file.write('  always@(posedge done_shift_m2 or posedge rst_m2)begin\n')
file.write('      if(rst_m2)begin\n')
file.write('          count_m2=0;\n')
file.write('      end\n')
file.write('      else begin\n')
file.write('          if(count_m2<{})begin\n'.format(FILTERBATCH_C2))
file.write('              count_m2=count_m2+1;\n')
file.write('          end\n')
file.write('          else\n')
file.write("""              count_m2=2'hX;\n""")
file.write('      end\n')
file.write('  end\n')
file.write('  \n')
file.write('  ////////////////////////////////// maxpool m2 //////////////////////////////////\n')
file.write('  always@(*)begin\n')
file.write('      case(state_m2)\n')
file.write('          0:begin\n')
file.write('              en_shift_m2=0;\n')
file.write('              rst_shift_m2=1;\n')
file.write('          end\n')
file.write('          1:begin\n')
file.write('              en_shift_m2=1;\n')
file.write('              rst_shift_m2=0;\n')
file.write('              channel_select_m2=count_m2;\n')
file.write('          end\n')
file.write('          2:begin\n')
file.write('              en_shift_m2=0;\n')
file.write('              rst_shift_m2=1;\n')
file.write('          end\n')
file.write('          default:begin\n')
file.write('              en_shift_m2=0;\n')
file.write('              rst_shift_m2=1;\n')
file.write('          end\n')
file.write('      endcase\n')
file.write('      if(count_m2=={})begin\n'.format(FILTERBATCH_C2))
file.write("""          done_m2=1'b1;\n""")
file.write('      end\n')
file.write('      else begin\n')
file.write("""          done_m2=1'b0;\n""")
file.write('      end\n')
file.write('  end\n')
file.write('  \n')
file.write('      ////////////////////////////////// shift window m2 //////////////////////////////////\n')
file.write('  always@(posedge done_mk_m2 or posedge rst_shift_m2)begin\n')
file.write('      if(rst_shift_m2)begin\n')
file.write('          count_shift_m2=0;\n')
file.write('      end\n')
file.write('      else begin\n')
file.write('          if(count_shift_m2<{})begin\n'.format(DATAWIDTH_D1*DATAHEIGHT_D1))
file.write('              count_shift_m2=count_shift_m2+1;\n')
file.write('              din_buf_m2=result_temp_mk_m2;\n')
file.write('          end\n')
file.write('          else\n')
file.write("""              count_shift_m2=5'hX;\n""")
file.write('      end\n')
file.write('  end\n')
file.write('  \n')
file.write('  always@(*)begin\n')
file.write('      case(state_shift_m2)\n')
file.write('          0:begin\n')
file.write('              en_mk_m2=0;\n')
file.write('              rst_mk_m2=1;\n')
file.write('              window_select_m2=0;\n')
file.write('          end\n')
file.write('          1:begin\n')
file.write('              en_mk_m2=1;\n')
file.write('              rst_mk_m2=0;\n')
file.write('              window_select_m2=count_shift_m2;\n')
file.write('          end\n')
file.write('          2:begin\n')
file.write('              en_mk_m2=0;\n')
file.write('              rst_mk_m2=1;\n')
file.write('              window_select_m2=0;\n')
file.write('          end\n')
file.write('          default:begin\n')
file.write('              en_mk_m2=0;\n')
file.write('              rst_mk_m2=1;\n')
file.write('              window_select_m2=0;\n')
file.write('          end\n')
file.write('      endcase\n')
file.write('      if(count_shift_m2=={})begin\n'.format(DATAWIDTH_D1*DATAHEIGHT_D1))
file.write("""          done_shift_m2=1'b1;\n""")
file.write('      end\n')
file.write('      else begin\n')
file.write("""          done_shift_m2=1'b0;\n""")
file.write('      end\n')
file.write('  end\n')
file.write('  \n')
file.write('      /////////////////////////////////// maxppol kernel m2 ///////////////////////////////////\n')
file.write('  \n')
for j in range(KERNELWIDTH_POOL_M2*KERNELHEIGHT_POOL_M2):
    file.write('  assign element_mk_m2[{}]=X_mk_m2[{}:{}];\n'.format(j,(j*BITWIDTH_M2),(j*BITWIDTH_M2+BITWIDTH_M2-1)))
file.write('  \n')
file.write('  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n')
file.write('  //////////////////////////////////////////////////////Dense Layer 1/////////////////////////////////////////////////////////\n')
file.write('  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n')
file.write('  \n')
file.write('  always@(posedge done_nc_d1 or posedge rst_d1)begin\n')
file.write('      if(rst_d1)begin\n')
file.write('          count_d1=0;\n')
file.write('          fc_out_d1=0;\n')
file.write('      end\n')
file.write('      else begin\n')
file.write('          if(count_d1<{})begin\n'.format(NEURONS_D1))
file.write('              wr_en_buf_d1=1;\n')
file.write('              addr_buf_d1=count_d1;\n')
file.write('              din_buf_d1=result_temp_nc_d1;\n')
file.write('              fc_out_d1={{fc_out_d1[{}:{}],result_temp_nc_d1}};\n'.format((BITWIDTH_D1),(NEURONS_D1*BITWIDTH_D1-1)))
file.write('              count_d1=count_d1+1;\n')
file.write('          end\n')
file.write('          else begin\n')
file.write("""              count_d1=9'hX;\n""")
file.write('          end\n')
file.write('      end\n')
file.write('  end\n')
file.write('  \n')
file.write('  always@(*)begin\n')
file.write('      case(state_d1)\n')
file.write('          0:begin\n')
file.write('              en_nc_d1=0;\n')
file.write('              rst_nc_d1=1;\n')
file.write('              neuron_select_d1=count_d1;\n')
file.write('          end\n')
file.write('          1:begin\n')
file.write('              en_nc_d1=1;\n')
file.write('              rst_nc_d1=0;\n')
file.write('              neuron_select_d1=count_d1;\n')
file.write('          end\n')
file.write('          2:begin\n')
file.write('              en_nc_d1=0;\n')
file.write('              rst_nc_d1=1;\n')
file.write('              neuron_select_d1=count_d1;\n')
file.write('          end\n')
file.write('          default:begin\n')
file.write('              en_nc_d1=0;\n')
file.write('              rst_nc_d1=1;\n')
file.write('              neuron_select_d1=count_d1;\n')
file.write('          end\n')
file.write('      endcase\n')
file.write('      if(count_d1=={})begin\n'.format(NEURONS_D1))
file.write("""          done_den1=1'b1;\n""")
file.write('      end\n')
file.write('      else begin\n')
file.write("""          done_den1=1'b0;\n""")
file.write('      end\n')
file.write('  end\n')
file.write('  \n')
file.write('      //////////////////////////////////// neuron calculation //////////////////////////////////\n')
file.write('  \n')
file.write('  assign channel_d1=neuron_select_d1*{};\n'.format(FILTERBATCH_C2*DATAWIDTH_D1*DATAHEIGHT_D1))
file.write('  \n')
for j in range(FILTERBATCH_C2*DATAWIDTH_D1*DATAHEIGHT_D1):
    file.write('  assign mem_x_nc_d1[{}]= X_nc_d1[{}:{}];\n'.format(j,(j*BITWIDTH_M2),((j+1)*BITWIDTH_M2-1)))
file.write('  \n')
for j in range(FILTERBATCH_C2*DATAWIDTH_D1*DATAHEIGHT_D1):
    file.write('  assign mem_w_nc_d1[{}]= w_neuron_d1[{}:{}];\n'.format(j,(j*BITWIDTH_W),((j+1)*BITWIDTH_W-1)))
file.write('  \n')
file.write('  always@(posedge done_m_nc_d1 or posedge rst_nc_d1)begin\n')
file.write('      if(rst_nc_d1)begin\n')
file.write('          count_nc_d1=0;\n')
file.write('          buffer_nc_d1=0;\n')
file.write('      end\n')
file.write('      else begin\n')
file.write('          if(count_nc_d1<{})begin\n'.format(FILTERBATCH_C2*DATAWIDTH_D1*DATAHEIGHT_D1))
file.write('              count_nc_d1=count_nc_d1+1;\n')
file.write('              buffer_nc_d1=buffer_nc_d1+result_temp_m_nc_d1;\n')
file.write('          end\n')
file.write('          else begin\n')
file.write("""              count_nc_d1=10'hx;\n""")
file.write('          end\n')
file.write('      end\n')
file.write('  end\n')
file.write('  \n')
file.write('  always@(*)begin\n')
file.write('      case(state_nc_d1)\n')
file.write('          0:begin\n')
file.write('              en_m_nc_d1=0;\n')
file.write('              rst_m_nc_d1=1;\n')
file.write('              w_in_m_nc_d1=0;\n')
file.write('          end\n')
file.write('          1:begin\n')
file.write('              en_m_nc_d1=1;\n')
file.write('              rst_m_nc_d1=0;\n')
file.write('              x_in_m_nc_d1=mem_x_nc_d1[count_nc_d1];\n')
file.write('              w_in_m_nc_d1=mem_w_nc_d1[count_nc_d1];\n')
file.write('          end\n')
file.write('          2:begin\n')
file.write('              en_m_nc_d1=0;\n')
file.write('              rst_m_nc_d1=1;\n')
file.write('              w_in_m_nc_d1=0;\n')
file.write('          end\n')
file.write('          default:begin\n')
file.write('              en_m_nc_d1=0;\n')
file.write('              rst_m_nc_d1=1;\n')
file.write('              w_in_m_nc_d1=0;\n')
file.write('          end\n')
file.write('      endcase\n')
file.write('      if (count_nc_d1=={})begin\n'.format(FILTERBATCH_C2*DATAWIDTH_D1*DATAHEIGHT_D1))
file.write('          bias_d1_1=bias_d1<<<6;\n')
file.write('          buffer_nc_d1=buffer_nc_d1>>>4;\n')
file.write('          if(buffer_nc_d1>32767 || buffer_nc_d1<-32768)begin\n')
file.write('              if(buffer_nc_d1>32767)\n')
file.write("""                  buffer_nc_d1 = 16'b0111111111111111;\n""")
file.write('              else\n')
file.write("""                  buffer_nc_d1 = 16'b1000000000000000;\n""")
file.write('          end\n')
file.write('          else begin\n')
file.write('              buffer_nc_d1 = buffer_nc_d1[15:0];\n')
file.write('          end\n')
file.write('          result_temp_nc_d1=buffer_nc_d1+bias_d1_1;\n')
file.write("""          done_nc_d1=1'b1;\n""")
file.write('      end\n')
file.write('      else begin\n')
file.write('          result_temp_nc_d1=0;\n')
file.write("""          done_nc_d1=1'b0;\n""")
file.write('      end\n')
file.write('  end\n')
file.write('  \n')
file.write('  element_multiplier_d1#(BITWIDTH_M2,BITWIDTH_W,BITWIDTH_D1) multiply_d1(\n')
file.write('  .clk(clk),\n')
file.write('  .in_ready(en_m_nc_d1),\n')
file.write('  .rst(rst_m_nc_d1),\n')
file.write('  .X_element(x_in_m_nc_d1),\n')
file.write('  .W_element(w_in_m_nc_d1),\n')
file.write('  .Z_element(result_temp_m_nc_d1),\n')
file.write('  .done(done_m_nc_d1)\n')
file.write('  );\n')
file.write('  \n')
file.write('  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n')
file.write('  //////////////////////////////////////////////////////Dense Layer 2/////////////////////////////////////////////////////////\n')
file.write('  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n')
file.write('  \n')
file.write('  always@(posedge done_nc_d2 or posedge rst_d2)begin\n')
file.write('      if(rst_d2)begin\n')
file.write('          count_d2=0;\n')
file.write('          fc_out_d2=0;\n')
file.write('      end\n')
file.write('      else begin\n')
file.write('          if(count_d2<{})begin\n'.format(NEURONS_D2))
file.write('              count_d2=count_d2+1;\n')
file.write('              fc_out_d2={{fc_out_d2[{}:{}],result_temp_nc_d2}};\n'.format((BITWIDTH_D2),(NEURONS_D2*BITWIDTH_D2-1)))
file.write('          end\n')
file.write('          else begin\n')
file.write("""              count_d2=4'hX;\n""")
file.write('          end\n')
file.write('      end\n')
file.write('  end\n')
file.write('  \n')
file.write('  always@(*)begin\n')
file.write('      case(state_d2)\n')
file.write('          0:begin\n')
file.write('              en_nc_d2=0;\n')
file.write('              rst_nc_d2=1;\n')
file.write('              neuron_select_d2=count_d2;\n')
file.write('          end\n')
file.write('          1:begin\n')
file.write('              en_nc_d2=1;\n')
file.write('              rst_nc_d2=0;\n')
file.write('              neuron_select_d2=count_d2;\n')
file.write('          end\n')
file.write('          2:begin\n')
file.write('              en_nc_d2=0;\n')
file.write('              rst_nc_d2=1;\n')
file.write('              neuron_select_d2=count_d2;\n')
file.write('          end\n')
file.write('          default:begin\n')
file.write('              en_nc_d2=0;\n')
file.write('              rst_nc_d2=1;\n')
file.write('              neuron_select_d2=count_d2;\n')
file.write('          end\n')
file.write('      endcase\n')
file.write('      if(count_d2=={})begin\n'.format(NEURONS_D2))
file.write("""          done_den2=1'b1;\n""")
file.write('      end\n')
file.write('      else begin\n')
file.write("""          done_den2=1'b0;\n""")
file.write('      end\n')
file.write('  end\n')
file.write('  \n')
file.write('      //////////////////////////////////// neuron calculation //////////////////////////////////\n')
file.write('  \n')
file.write('  assign channel_d2=neuron_select_d2*{};\n'.format(NEURONS_D1))
file.write('  \n')
for j in range(NEURONS_D1):
    file.write('  assign mem_x_nc_d2[{}]= X_nc_d2[{}:{}];\n'.format(j,(j*BITWIDTH_D1),((j+1)*BITWIDTH_D1-1)))
file.write('  \n')
for j in range(NEURONS_D1):
    file.write('  assign mem_w_nc_d2[{}]= w_neuron_d2[{}:{}];\n'.format(j,(j*BITWIDTH_W),((j+1)*BITWIDTH_W-1)))
file.write('  \n')
file.write('  always@(posedge done_m_nc_d2 or posedge rst_nc_d2)begin\n')
file.write('      if(rst_nc_d2)begin\n')
file.write('          count_nc_d2=0;\n')
file.write('          buffer_nc_d2=0;\n')
file.write('      end\n')
file.write('      else begin\n')
file.write('          if(count_nc_d2<{})begin\n'.format(NEURONS_D1))
file.write('              count_nc_d2=count_nc_d2+1;\n')
file.write('              buffer_nc_d2=buffer_nc_d2+result_temp_m_nc_d2;\n')
file.write('          end\n')
file.write('          else begin\n')
file.write("""              count_nc_d2=10'hx;\n""")
file.write('          end\n')
file.write('      end\n')
file.write('  end\n')
file.write('  \n')
file.write('  always@(*)begin\n')
file.write('      case(state_nc_d2)\n')
file.write('          0:begin\n')
file.write('              en_m_nc_d2=0;\n')
file.write('              rst_m_nc_d2=1;\n')
file.write('              w_in_m_nc_d2=0;\n')
file.write('          end\n')
file.write('          1:begin\n')
file.write('              en_m_nc_d2=1;\n')
file.write('              rst_m_nc_d2=0;\n')
file.write('              x_in_m_nc_d2=mem_x_nc_d2[count_nc_d2];\n')
file.write('              w_in_m_nc_d2=mem_w_nc_d2[count_nc_d2];\n')
file.write('          end\n')
file.write('          2:begin\n')
file.write('              en_m_nc_d2=0;\n')
file.write('              rst_m_nc_d2=1;\n')
file.write('              w_in_m_nc_d2=0;\n')
file.write('          end\n')
file.write('          default:begin\n')
file.write('              en_m_nc_d2=0;\n')
file.write('              rst_m_nc_d2=1;\n')
file.write('              w_in_m_nc_d2=0;\n')
file.write('          end\n')
file.write('      endcase\n')
file.write('      if (count_nc_d2=={})begin\n'.format(NEURONS_D1))
file.write('          bias_d2_1=bias_d2<<<6;\n')
file.write('          result_temp_nc_d2=buffer_nc_d2+bias_d2_1;\n')
file.write("""          done_nc_d2=1'b1;\n""")
file.write('      end\n')
file.write('      else begin\n')
file.write('          result_temp_nc_d2=0;\n')
file.write("""          done_nc_d2=1'b0;\n""")
file.write('      end\n')
file.write('  end\n')
file.write('  \n')
file.write('  element_multiplier_d2#(BITWIDTH_D1,BITWIDTH_W,BITWIDTH_D2) multiply_d2(\n')
file.write('  .clk(clk),\n')
file.write('  .in_ready(en_m_nc_d2),\n')
file.write('  .rst(rst_m_nc_d2),\n')
file.write('  .X_element(x_in_m_nc_d2),\n')
file.write('  .W_element(w_in_m_nc_d2),\n')
file.write('  .Z_element(result_temp_m_nc_d2),\n')
file.write('  .done(done_m_nc_d2)\n')
file.write('  );\n')
file.write('  \n')
file.write('  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n')
file.write('  //////////////////////////////////////////////////////Softmax Layer/////////////////////////////////////////////////////////\n')
file.write('  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n')
file.write('      \n')
file.write('  always@(max)begin\n')
file.write('      if(i=={})begin\n'.format(NEURONS_D2))
file.write('          prediction=temp;\n')
file.write("""          done_soft=1'b1;\n""")
file.write('      end\n')
file.write('      else begin\n')
file.write("""          prediction=4'hX;\n""")
file.write("""          done_soft=1'b0;\n""")
file.write('      end\n')
file.write('  end\n')
file.write('endmodule\n')
file.write('  \n')
file.write('module adder(\n')
file.write('  input clk,\n')
file.write('  input rst_add,\n')
file.write('  output reg signed [0:15] adder,\n')
file.write('  input signed [0:15]B,\n')
for i in range(1,FILTERBATCH_C1+1):
    file.write('  input signed [0:15]Z{},\n'.format(i))
file.write('  input signed [0:15] THRESHOLD,\n')
file.write('  output reg done_add\n')
file.write('  );\n')
file.write('  reg signed [0:31] add_temp;\n')
file.write('  always@(posedge clk)begin\n')
file.write('      if(rst_add)begin\n')
file.write('          adder=0;\n')
file.write('          done_add=0;\n')
file.write('          add_temp=0;\n')
file.write('      end\n')
file.write('      else begin\n')
file.write('          add_temp = B')
for i in range(1,FILTERBATCH_C1+1):
    file.write('+Z{}'.format(i))
file.write(';\n')
file.write('          if(add_temp>32767 || add_temp<-32768)begin\n')
file.write('              if(add_temp>32767)\n')
file.write("""                  adder = 16'b0111111111111111;\n""")
file.write('              else\n')
file.write("""                  adder = 16'b0000000000000000;//-ve values are made 0 as relu is integrated with this module\n""")
file.write('          end\n')
file.write('          else begin\n')
file.write('              adder = add_temp[16:31];\n')
file.write('          end\n')
file.write("""          adder = adder > THRESHOLD ? adder: 16'd0;\n""")
file.write('          done_add=1;\n')
file.write('      end\n')
file.write('  end\n')
file.write('endmodule\n')

file.close()


# In[ ]:





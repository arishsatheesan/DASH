#!/usr/bin/env python
# coding: utf-8

# In[1]:


from __future__ import print_function
import keras
from keras.datasets import mnist
from keras.models import Sequential, load_model
from keras.layers import Dense, Dropout, Flatten
from keras.layers import Conv2D, MaxPooling2D
from keras import backend as K
import numpy as np
#import cv2
import time
ts = time.time()
import datetime
st = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')

LAYERS=8
BITWIDTH_IN=8
BITWIDTH_W=8
BITWIDTH_B=8
BITWIDTH_C1=16
KERNELHEIGHT_C1=3
KERNELWIDTH_C1=3
DATAWIDTH_IN=28
DATAHEIGHT_IN=28
STRIDEWIDTH_C1=1
STRIDEHEIGHT_C1=1
FILTERBATCH_C1=6
DATAWIDTH_M1=26
BITWIDTH_M1=16
DATAWIDTH_M1=26
DATAHEIGHT_M1=26
STRIDEWIDTH_POOL_M1=2
STRIDEHEIGHT_POOL_M1=2
KERNELWIDTH_POOL_M1=2
KERNELHEIGHT_POOL_M1=2
DATAWIDTH_C2=13
DATAHEIGHT_C2=13
BITWIDTH_C2=16
KERNELHEIGHT_C2=3
KERNELWIDTH_C2=3
STRIDEWIDTH_C2=1
STRIDEHEIGHT_C2=1
DATAWIDTH_M2=11
DATAHEIGHT_M2=11
FILTERBATCH_C2=16
BITWIDTH_M2=16
STRIDEWIDTH_POOL_M2=2
STRIDEHEIGHT_POOL_M2=2
KERNELWIDTH_POOL_M2=3
KERNELHEIGHT_POOL_M2=3
DATAWIDTH_D1=5
DATAHEIGHT_D1=5
NEURONS_D1=10
BITWIDTH_D1=32
BITWIDTH_SM=32

ADDR_WIDTH=11
DATA_WIDTH=8
DEPTH=2**ADDR_WIDTH

OFFSET_C1_W=784 #starting address for c1 layer weights 
OFFSET_C1_B=OFFSET_C1_W+FILTERBATCH_C1*KERNELHEIGHT_C1*KERNELWIDTH_C1  #starting address for c1 layer bias
OFFSET_C2_W=OFFSET_C1_B+FILTERBATCH_C1
OFFSET_C2_B=OFFSET_C2_W+FILTERBATCH_C1*FILTERBATCH_C2*KERNELHEIGHT_C2*KERNELWIDTH_C2
OFFSET_D1_W=OFFSET_C2_B+FILTERBATCH_C2 #starting address for d1 layer weights 
OFFSET_D1_B=OFFSET_D1_W+(FILTERBATCH_C2*DATAWIDTH_D1*DATAHEIGHT_D1*NEURONS_D1) #starting address for d1 layer bias
ADDR_WIDTH_BUF=9
DATA_WIDTH_BUF=16
DEPTH_BUF=2**ADDR_WIDTH_BUF
ADDR_WIDTH_BUF_C1=10
DEPTH_BUF_C1=2**ADDR_WIDTH_BUF_C1
ADDR_WIDTH_BUF_M1=8
DEPTH_BUF_M1=2**ADDR_WIDTH_BUF_M1
ADDR_WIDTH_BUF_C2=7
DEPTH_BUF_C2=2**ADDR_WIDTH_BUF_C2
ADDR_WIDTH_BUF_M2=5
DEPTH_BUF_M2=2**ADDR_WIDTH_BUF_M2


file=open('top.v','w')
file.write('`timescale 1ns / 1ps\n')
file.write('//////////////////////////////////////////////////////////////////////////////////\n')
file.write('// Company: NTU Singapore\n')
file.write('// Engineer: Arish S\n')
file.write('//\n')
file.write('// Create Date: {}\n'.format(st))
file.write('// Design Name: \n')
file.write('// Module Name: top\n')
file.write('// Project Name: \n')
file.write('// Target Devices:\n')
file.write('// Tool Versions: \n')
file.write('// Description: \n')
file.write('//\n')
file.write('// Dependencies: \n')
file.write('//\n')
file.write('// Revision:\n')
file.write('// Revision 0.01 - File Created\n')
file.write('// Additional Comments:\n')
file.write('//\n')
file.write('//////////////////////////////////////////////////////////////////////////////////\n')
file.write('\n')
file.write('\n')
file.write('module top#(\n')
file.write('  parameter integer BITWIDTH_IN={},\n'.format(BITWIDTH_IN))
file.write('  parameter integer BITWIDTH_W={},\n'.format(BITWIDTH_W))
file.write('  parameter integer BITWIDTH_B={},\n'.format(BITWIDTH_B))
file.write('  parameter integer BITWIDTH_C1={},\n'.format(BITWIDTH_C1))
file.write('  parameter integer KERNELHEIGHT_C1={},\n'.format(KERNELHEIGHT_C1))
file.write('  parameter integer KERNELWIDTH_C1={},\n'.format(KERNELWIDTH_C1))
file.write('  parameter integer DATAWIDTH_IN={},\n'.format(DATAWIDTH_IN))
file.write('  parameter integer DATAHEIGHT_IN={},\n'.format(DATAHEIGHT_IN))
file.write('  parameter integer STRIDEWIDTH_C1={},\n'.format(STRIDEWIDTH_C1))
file.write('  parameter integer STRIDEHEIGHT_C1={},\n'.format(STRIDEHEIGHT_C1))
file.write('  parameter integer FILTERBATCH_C1={},\n'.format(FILTERBATCH_C1))
file.write('  parameter integer DATAWIDTH_M1={},\n'.format(DATAWIDTH_M1))
file.write('  parameter integer DATAHEIGHT_M1={},\n'.format(DATAHEIGHT_M1))
file.write('  parameter integer BITWIDTH_M1={},\n'.format(BITWIDTH_M1))
file.write('  parameter integer STRIDEWIDTH_POOL_M1={},\n'.format(STRIDEWIDTH_POOL_M1))
file.write('  parameter integer STRIDEHEIGHT_POOL_M1={},\n'.format(STRIDEHEIGHT_POOL_M1))
file.write('  parameter integer KERNELWIDTH_POOL_M1={},\n'.format(KERNELWIDTH_POOL_M1))
file.write('  parameter integer KERNELHEIGHT_POOL_M1={},\n'.format(KERNELHEIGHT_POOL_M1))
file.write('  parameter integer DATAWIDTH_C2={},\n'.format(DATAWIDTH_C2))
file.write('  parameter integer DATAHEIGHT_C2={},\n'.format(DATAHEIGHT_C2))
file.write('  parameter integer BITWIDTH_C2={},\n'.format(BITWIDTH_C2))
file.write('  parameter integer KERNELHEIGHT_C2={},\n'.format(KERNELHEIGHT_C2))
file.write('  parameter integer KERNELWIDTH_C2={},\n'.format(KERNELWIDTH_C2))
file.write('  parameter integer STRIDEWIDTH_C2={},\n'.format(STRIDEWIDTH_C2))
file.write('  parameter integer STRIDEHEIGHT_C2={},\n'.format(STRIDEHEIGHT_C2))
file.write('  parameter integer FILTERBATCH_C2={},\n'.format(FILTERBATCH_C2))
file.write('  parameter integer DATAWIDTH_M2={},\n'.format(DATAWIDTH_M2))
file.write('  parameter integer DATAHEIGHT_M2={},\n'.format(DATAHEIGHT_M2))
file.write('  parameter integer BITWIDTH_M2={},\n'.format(BITWIDTH_M2))
file.write('  parameter integer STRIDEWIDTH_POOL_M2={},\n'.format(STRIDEWIDTH_POOL_M2))
file.write('  parameter integer STRIDEHEIGHT_POOL_M2={},\n'.format(STRIDEHEIGHT_POOL_M2))
file.write('  parameter integer KERNELWIDTH_POOL_M2={},\n'.format(KERNELWIDTH_POOL_M2))
file.write('  parameter integer KERNELHEIGHT_POOL_M2={},\n'.format(KERNELHEIGHT_POOL_M2))
file.write('  parameter integer DATAWIDTH_D1={},\n'.format(DATAWIDTH_D1))
file.write('  parameter integer DATAHEIGHT_D1={},\n'.format(DATAHEIGHT_D1))
file.write('  parameter integer NEURONS_D1={},\n'.format(NEURONS_D1))
file.write('  parameter integer BITWIDTH_D1={},\n'.format(BITWIDTH_D1))
file.write('  parameter integer BITWIDTH_SM={},\n'.format(BITWIDTH_SM))
file.write('  parameter integer ADDR_WIDTH={},\n'.format(ADDR_WIDTH))
file.write('  parameter integer DATA_WIDTH={},\n'.format(DATA_WIDTH))
file.write('  parameter integer DEPTH={},\n'.format(DEPTH))
file.write('  parameter integer OFFSET_C2_W={},\n'.format(OFFSET_C2_W))
file.write('  parameter integer OFFSET_C2_B={},\n'.format(OFFSET_C2_B))
file.write('  parameter integer OFFSET_D1_W={},\n'.format(OFFSET_D1_W))
file.write('  parameter integer OFFSET_D1_B={},\n'.format(OFFSET_D1_B))
file.write('  parameter integer OFFSET_C1_W={},\n'.format(OFFSET_C1_W))
file.write('  parameter integer OFFSET_C1_B={},\n'.format(OFFSET_C1_B))
file.write('  parameter integer ADDR_WIDTH_BUF={},\n'.format(ADDR_WIDTH_BUF))
file.write('  parameter integer DATA_WIDTH_BUF={},\n'.format(DATA_WIDTH_BUF))
file.write('  parameter integer DEPTH_BUF={},\n'.format(DEPTH_BUF))
file.write('  parameter integer ADDR_WIDTH_BUF_C1={},\n'.format(ADDR_WIDTH_BUF_C1))
file.write('  parameter integer DEPTH_BUF_C1={},\n'.format(DEPTH_BUF_C1))
file.write('  parameter integer ADDR_WIDTH_BUF_M1={},\n'.format(ADDR_WIDTH_BUF_M1))
file.write('  parameter integer DEPTH_BUF_M1={},\n'.format(DEPTH_BUF_M1))
file.write('  parameter integer ADDR_WIDTH_BUF_C2={},\n'.format(ADDR_WIDTH_BUF_C2))
file.write('  parameter integer DEPTH_BUF_C2={},\n'.format(DEPTH_BUF_C2))
file.write('  parameter integer ADDR_WIDTH_BUF_M2={},\n'.format(ADDR_WIDTH_BUF_M2))
file.write('  parameter integer DEPTH_BUF_M2={}\n'.format(DEPTH_BUF_M2))
file.write(')\n')
file.write('(\n')
file.write('  input clk, in_ready,\n')
file.write('  output reg [0:3] prediction,\n')
file.write('  output reg done\n')
file.write('  );\n')
file.write('  \n')
file.write('  reg done_c1, done_m1, done_c2, done_m2, done_den1, done_soft;\n')
file.write('  reg rst_c1,rst_m1,rst_c2,rst_m2,rst_d1;\n')
file.write('  reg en_c1,en_m1,en_c2,en_m2,en_d1,en_sm;\n')
file.write('  reg [4:0] state=0;\n')
file.write('  \n')
file.write('  //**********************Dense D1 Layer*******************************//\n')
file.write('  reg signed [0:{}]fc_out;\n'.format(BITWIDTH_D1*NEURONS_D1-1))
file.write('  reg [1:0]count_c1=0;\n')
file.write('  reg done_shift_c1;\n')
file.write('  reg en_shift_c1,rst_shift_c1;\n')
file.write('  reg [2:0] state_c1=0;\n')

file.write('  ////////////////shift///////////////////////\n')
file.write('  reg [{}:0] addr, addr_c2, addr_d1;\n'.format(ADDR_WIDTH-1))
file.write('  reg wr_en=0,wr_en_c2=0, wr_en_d1=0;\n')
file.write('  reg oe=1, oe_c2=1;\n')
file.write('  reg [{}:0] din=0, din_c2=0, din_d1=0;\n'.format(DATA_WIDTH-1))
file.write('  wire [{}:0] dout, dout_c2,dout_d1;\n'.format(DATA_WIDTH-1))
file.write('  reg done_load_shift_c1=0;\n')
file.write('  reg [10:0] count_ld_shift_c1=0;\n')
for i in range(1,FILTERBATCH_C1+1):
    file.write('  reg signed [0:{}] bias_shift_c1_ch{};\n'.format((BITWIDTH_B-1),(i)))
for i in range(1,FILTERBATCH_C1+1):
    file.write('  reg signed [0:{}] W_shift_c1_ch{};\n'.format((BITWIDTH_W*KERNELWIDTH_C1*KERNELHEIGHT_C1-1),(i)))
file.write('  reg [9:0]count_shift_c1=0;\n')
file.write('  reg done_conv_c1;\n')
file.write('  reg en_conv_c1;\n')
file.write('  reg rst_conv_c1;\n')
for i in range(1,FILTERBATCH_C1+1):
    file.write('  reg signed [0:{}] result_temp_conv_c1_ch{};\n'.format((BITWIDTH_M1-1),(i)))
file.write('  reg [2:0] state_shift_c1=0;\n')
file.write('  reg [9:0] window_select_c1;\n')

file.write('  ///////////////////conv kernel////////////////////////\n')
file.write('  reg done_load_conv_c1=0;\n')
file.write('  reg [10:0] count_ld_conv_c1=0;\n')
file.write('  wire [{}:0] start_addr_conv_c1;\n'.format(ADDR_WIDTH-1))
file.write('  reg signed [0:{}] X_conv_c1;\n'.format(BITWIDTH_IN*KERNELWIDTH_C1*KERNELHEIGHT_C1-1))
file.write('  reg [3:0]count_conv_c1=0;\n')
file.write('  reg en_m_c1;\n')
file.write('  reg rst_m_c1;\n')
file.write('  wire signed [7:0] mem_x_conv_c1 [0:8];\n'.format((BITWIDTH_IN-1),(KERNELWIDTH_C1*KERNELHEIGHT_C1-1)))

for i in range(1,FILTERBATCH_C1+1):
    file.write('  wire done_m_c1_ch{};\n'.format(i))
for i in range(1,FILTERBATCH_C1+1):
    file.write('  wire signed [{}:0] result_temp_m_c1_ch{};\n'.format((BITWIDTH_M1-1),(i)))
for i in range(1,FILTERBATCH_C1+1):
    file.write('  reg signed [{}:0] result_final_temp_conv_c1_ch{};\n'.format((BITWIDTH_M1+2),(i)))
for i in range(1,FILTERBATCH_C1+1):
    file.write('  reg signed [{}:0] buffer_conv_c1_ch{}=0;\n'.format((BITWIDTH_M1+2),(i)))
for i in range(1,FILTERBATCH_C1+1):
    file.write('  wire signed [{}:0] mem_w_conv_c1_ch{} [0:{}];\n'.format((BITWIDTH_W-1),i,(KERNELWIDTH_C1*KERNELHEIGHT_C1-1)))

file.write('  reg signed [{}:0] x_in_m_c1;\n'.format(DATA_WIDTH-1))

for i in range(1,FILTERBATCH_C1+1):
    file.write('  reg signed [{}:0] w_in_m_c1_ch{};\n'.format((BITWIDTH_W-1),(i)))

file.write('  reg [2:0] state_conv_c1=0;\n')
file.write('  reg signed [0:15] THRESHOLD=0;\n')
file.write('  \n')
for i in range(1,FILTERBATCH_C1+1):
    file.write('  reg [{}:0] addr_buf_0_c1_ch{};\n'.format((ADDR_WIDTH_BUF_C1-1),(i)))
    file.write('  reg wr_en_buf_0_c1_ch{}=0, wr_en_buf_1_c1_ch{}=0, oe_buf_0_c1_ch{}=0, oe_buf_1_c1_ch{}=0;\n'.format(i,i,i,i))
    file.write('  reg [{}:0] din_buf_0_c1_ch{};\n'.format((DATA_WIDTH_BUF-1),(i)))
    file.write('  wire [{}:0] dout_buf_0_c1_ch{};\n'.format((DATA_WIDTH_BUF-1),(i)))
    file.write('  reg [{}:0] addr_buf_1_c1_ch{};\n'.format((ADDR_WIDTH_BUF_C1-1),(i)))
    file.write('  reg [{}:0] din_buf_1_c1_ch{}=0;\n'.format((DATA_WIDTH_BUF-1),(i)))
    file.write('  wire [{}:0] dout_buf_1_c1_ch{};\n'.format((DATA_WIDTH_BUF-1),(i)))
    file.write('  \n')
for i in range(1,FILTERBATCH_C1+1):  
    file.write('  reg [{}:0] addr_buf_0_m1_ch{};\n'.format((ADDR_WIDTH_BUF_M1-1),(i)))
    file.write('  reg wr_en_buf_0_m1_ch{}=0, wr_en_buf_1_m1_ch{}=0, oe_buf_0_m1_ch{}=0, oe_buf_1_m1_ch{}=0;\n'.format(i,i,i,i))
    file.write('  reg [{}:0] din_buf_0_m1_ch{};\n'.format((DATA_WIDTH_BUF-1),(i)))
    file.write('  wire [{}:0] dout_buf_0_m1_ch{};\n'.format((DATA_WIDTH_BUF-1),(i)))
    file.write('  reg [{}:0] addr_buf_1_m1_ch{};\n'.format((ADDR_WIDTH_BUF_M1-1),(i)))
    file.write('  reg [{}:0] din_buf_1_m1_ch{}=0;\n'.format((DATA_WIDTH_BUF-1),(i)))
    file.write('  wire [{}:0] dout_buf_1_m1_ch{};\n'.format((DATA_WIDTH_BUF-1),(i)))
    file.write('  \n')
for i in range(1,FILTERBATCH_C2+1):
    file.write('  reg [{}:0] addr_buf_0_c2_ch{};\n'.format((ADDR_WIDTH_BUF_C2-1),(i)))
    file.write('  reg wr_en_buf_0_c2_ch{}=0, wr_en_buf_1_c2_ch{}=0, oe_buf_0_c2_ch{}=0, oe_buf_1_c2_ch{}=0;\n'.format(i,i,i,i))
    file.write('  reg [{}:0] din_buf_0_c2_ch{};\n'.format((DATA_WIDTH_BUF-1),(i)))
    file.write('  wire [{}:0] dout_buf_0_c2_ch{};\n'.format((DATA_WIDTH_BUF-1),(i)))
    file.write('  reg [{}:0] addr_buf_1_c2_ch{};\n'.format((ADDR_WIDTH_BUF_C2-1),(i)))
    file.write('  reg [{}:0] din_buf_1_c2_ch{}=0;\n'.format((DATA_WIDTH_BUF-1),(i)))
    file.write('  wire [{}:0] dout_buf_1_c2_ch{};\n'.format((DATA_WIDTH_BUF-1),(i)))
    file.write('  \n')
for i in range(1,FILTERBATCH_C2+1):
    file.write('  reg [{}:0] addr_buf_0_m2_ch{};\n'.format((ADDR_WIDTH_BUF_M2-1),(i)))
    file.write('  reg wr_en_buf_0_m2_ch{}=0, wr_en_buf_1_m2_ch{}=0, oe_buf_0_m2_ch{}=0, oe_buf_1_m2_ch{}=0;\n'.format(i,i,i,i))
    file.write('  reg [{}:0] din_buf_0_m2_ch{};\n'.format((DATA_WIDTH_BUF-1),(i)))
    file.write('  wire [{}:0] dout_buf_0_m2_ch{};\n'.format((DATA_WIDTH_BUF-1),(i)))
    file.write('  reg [{}:0] addr_buf_1_m2_ch{};\n'.format((ADDR_WIDTH_BUF_M2-1),(i)))
    file.write('  reg [{}:0] din_buf_1_m2_ch{}=0;\n'.format((DATA_WIDTH_BUF-1),(i)))
    file.write('  wire [{}:0] dout_buf_1_m2_ch{};\n'.format((DATA_WIDTH_BUF-1),(i)))
    file.write('  \n')

file.write('  reg [1:0]count_m1=0;\n')
file.write('  reg done_shift_m1;\n')
file.write('  reg en_shift_m1;\n')
file.write('  reg rst_shift_m1;\n')
file.write('  reg [2:0] state_m1=0;\n')
file.write('  ///////////////////////shift window m1////////////////////////////////\n')
file.write('  reg [7:0]count_shift_m1=0;\n')
for i in range(1,FILTERBATCH_C1+1):
    file.write('  reg done_mk_m1_ch{};\n'.format(i))
file.write('  reg en_mk_m1;\n')
file.write('  reg rst_mk_m1;\n')
for i in range(1,FILTERBATCH_C1+1):
    file.write('  reg signed [0:{}] result_temp_mk_m1_ch{};\n'.format((BITWIDTH_C2-1),(i)))

file.write('  reg [2:0] state_shift_m1=0;\n')
file.write('  ///////////////////////maxpool kernel////////////////////////////////\n')
for i in range(1,FILTERBATCH_C1+1):
    file.write('  wire signed [{}:0]element_mk_m1_ch{}[0:{}];\n'.format((BITWIDTH_M1-1),(i),(KERNELWIDTH_POOL_M1*KERNELHEIGHT_POOL_M1-1)))

for i in range(1,FILTERBATCH_C1+1):
    file.write('  reg signed [{}:0] out_temp_mk_m1_ch{}=0;\n'.format((BITWIDTH_C2-1),(i)))
    
file.write('  reg [9:0] window_select_m1;\n')
file.write('  reg done_load_mk_m1=0;\n')
file.write('  reg [9:0] count_ld_mk_m1=0;\n')
file.write('  wire [9:0] start_addr_mk_m1;\n')
for i in range(1,FILTERBATCH_C1+1):
    file.write('  reg signed [0:{}] X_mk_m1_ch{};\n'.format((BITWIDTH_M1*KERNELWIDTH_POOL_M1*KERNELHEIGHT_POOL_M1-1),(i)))
    
file.write('  \n')
file.write('  reg done_load_c2d=0;\n')
file.write('  reg [10:0] count_ld_c2d=1;\n')
for i in range(1,FILTERBATCH_C2+1):
    file.write('  reg signed [{}:0] bias_c2d_ch{};\n'.format((BITWIDTH_B-1),(i)))
for i in range(1,FILTERBATCH_C2+1):
    file.write('  reg signed [0:{}]bias_new_c2d_ch{};\n'.format((2*BITWIDTH_B-1),(i)))

file.write('  reg [1:0]count_c2d=0;\n')
file.write('  reg done_shift_c2d;\n')
file.write('  reg en_shift_c2d;\n')
file.write('  reg rst_shift_c2d;\n')
file.write('  reg [2:0] state_c2d=0;\n')
file.write('  //////////////////////////////////////////////////////////// shift window c2 //////////////////////////////////////////\n')
file.write('  reg done_load_shift_c2d=0;\n')
file.write('  reg [10:0] count_ld_shift_c2d=0;\n')
for i in range(1,FILTERBATCH_C2+1):
    for j in range(1,FILTERBATCH_C1+1):
        file.write('  reg signed [0:{}] W_shift_c2d_w{}{};\n'.format((BITWIDTH_W*KERNELHEIGHT_C2*KERNELWIDTH_C2-1),(i),(j)))

file.write('  reg [6:0]count_shift_c2d=0;\n')
file.write('  reg done_ck_c2d;\n')

for i in range(1,FILTERBATCH_C2+1):
    file.write('  reg done_ck_c2d_row_ch{};\n'.format(i))

file.write('  reg en_ck_c2d;\n')
file.write('  reg rst_ck_c2d;\n')
for i in range(1,FILTERBATCH_C2+1):
    for j in range(1,FILTERBATCH_C1+1):
        file.write('  reg signed [0:{}] result_temp_ck_c2d_in{}_w{}{};\n'.format((BITWIDTH_M2-1),j,i,j))

file.write('  reg [2:0] state_shift_c2d=0;\n')
file.write('  reg [3:0]count_ck_c2d=0;\n')

for i in range(1,FILTERBATCH_C2+1):
    for j in range(1,FILTERBATCH_C1+1):
        file.write('  wire done_m_c2d_in{}_w{}{};\n'.format(j,i,j))

file.write('  reg en_m_c2d;\n')
file.write('  reg rst_m_c2d;\n')
for i in range(1,FILTERBATCH_C2+1):
    for j in range(1,FILTERBATCH_C1+1):                   
        file.write('  wire signed [{}:0] result_temp_m_c2d_in{}_w{}{};\n'.format((2*BITWIDTH_C2-1),j,i,j))
for i in range(1,FILTERBATCH_C2+1):
    for j in range(1,FILTERBATCH_C1+1):        
        file.write('  reg signed [{}:0] result_final_temp_ck_c2d_in{}_w{}{};\n'.format((2*BITWIDTH_C2-1),j,i,j))
for i in range(1,FILTERBATCH_C2+1):
    for j in range(1,FILTERBATCH_C1+1):       
        file.write('  reg signed [{}:0] buffer_ck_c2d_in{}_w{}{}=0;\n'.format((2*BITWIDTH_C2-1),j,i,j))
for i in range(1,FILTERBATCH_C1+1):
    file.write('  wire signed [{}:0] mem_x_ck_c2d_ch_in{} [0:{}];\n'.format((BITWIDTH_C2-1),i,(KERNELHEIGHT_C2*KERNELWIDTH_C2-1)))
for i in range(1,FILTERBATCH_C2+1):
    for j in range(1,FILTERBATCH_C1+1): 
        file.write('  wire signed [{}:0] mem_w_ck_c2d_w{}{} [0:{}];\n'.format((BITWIDTH_W-1),i,j,(KERNELHEIGHT_C2*KERNELWIDTH_C2-1)))
for i in range(1,FILTERBATCH_C1+1):
    file.write('  reg signed [{}:0] x_in_m_c2d_ch_in{};\n'.format((BITWIDTH_C2-1),i))
for i in range(1,FILTERBATCH_C2+1):
    for j in range(1,FILTERBATCH_C1+1):
        file.write('  reg signed [{}:0] w_in_m_c2d_w{}{};\n'.format((BITWIDTH_W-1),i,j))
        
file.write('  reg [2:0] state_ck_c2d=0;\n')
file.write('  reg done_load_conv_c2=0;\n')
file.write('  reg [10:0] count_ld_conv_c2=0;\n')
file.write('  wire [10:0] start_addr_conv_c2;\n')
for i in range(1,FILTERBATCH_C1+1):
    file.write('  reg signed [0:{}] X_conv_c2_ch_in{};\n'.format((BITWIDTH_C2*KERNELHEIGHT_C2*KERNELWIDTH_C2-1),i))
file.write('  reg [7:0] window_select_c2;\n')
file.write('  reg [3:0] n=1, m=1, a=1;\n')
for i in range(1,FILTERBATCH_C1+1):
    file.write('  reg done_mk_m1_row_ch{}=0;\n'.format(i))
file.write('  ////////////////////////////////////////////////// maxpool m2 ////////////////////////////////////////////////////////////////\n')
file.write('  reg [1:0]count_m2=0;\n')
file.write('  reg done_shift_m2;\n')
file.write('  reg en_shift_m2;\n')
file.write('  reg rst_shift_m2;\n')
file.write('  reg [2:0] state_m2=0;\n')
file.write('  /////////////////////////////////////////////////// shift window m2 ////////////////////////////////////////////////////////////////////////\n')
file.write('  reg [4:0]count_shift_m2=0;\n')
file.write('  reg done_mk_m2;\n')
file.write('  reg en_mk_m2;\n')
file.write('  reg rst_mk_m2;\n')
for i in range(1,FILTERBATCH_C2+1):
    file.write('  reg signed [0:{}] result_temp_mk_m2_ch{};\n'.format((BITWIDTH_D1-1),i))
file.write('  reg [2:0] state_shift_m2=0;\n')
file.write('  ////////////////////////////////////// maxpool kernel //////////////////////////////////////////\n')
for i in range(1,FILTERBATCH_C2+1):
    file.write('  wire signed [{}:0]element_mk_m2_ch{}[0:{}];\n'.format((BITWIDTH_M2-1),i,(KERNELWIDTH_POOL_M2*KERNELHEIGHT_POOL_M2-1)))
for i in range(1,FILTERBATCH_C2+1):
    file.write('  reg signed [{}:0] out_temp_mk_m2_ch{}=0;\n'.format((BITWIDTH_D1-1),i))
for i in range(1,FILTERBATCH_C2+1):  
    file.write('  reg done_mk_m2_row_ch{}=0;\n'.format(i))
file.write('  reg [1:0] channel_select_m2;\n')
file.write('  reg [9:0] window_select_m2;\n')
file.write('  reg done_load_mk_m2=0;\n')
file.write('  reg [9:0] count_ld_mk_m2=0;\n')
file.write('  wire [9:0] start_addr_mk_m2;\n')
for i in range(1,FILTERBATCH_C2+1):  
    file.write('  reg signed [0:{}] X_mk_m2_ch{};\n'.format((BITWIDTH_M2*KERNELWIDTH_POOL_M2*KERNELHEIGHT_POOL_M2-1),i))
file.write('///////////////////////////////////////// dense 1 ////////////////////////////////////////\n')
file.write('  reg [4:0] count_ld_d1=0;\n')
file.write('  reg done_load_d1;\n')
file.write('  reg [9:0] start_addr_d1;\n')
for i in range(1,FILTERBATCH_C2+1): 
    file.write('  reg [0:{}] X_nc_d1_ch{};\n'.format((BITWIDTH_M2-1),i))
file.write('  reg [3:0] neuron_select_d1;\n')
file.write('  reg [4:0]count_d1=0;\n')
file.write('  reg done_nc_d1;\n')
file.write('  reg en_nc_d1;\n')
file.write('  reg rst_nc_d1;\n')
file.write('  reg signed [0:{}] result_temp_nc_d1;\n'.format(BITWIDTH_SM-1))
file.write('  reg [2:0] state_d1=0;\n')
file.write('////////////////////////////////////// neuron calculation /////////////////////////////////////\n')
file.write('  reg done_load_nc_d1=0;\n')
file.write('  reg [10:0] count_ld_nc_d1=0;\n')
for i in range(1,FILTERBATCH_C2+1):
    file.write('  reg signed [0:{}] w_neuron_nc_d1_ch{};\n'.format((BITWIDTH_W*NEURONS_D1-1),i))
file.write('  reg signed [0:{}] bias_d1;\n'.format(BITWIDTH_B*NEURONS_D1-1))
file.write('  reg [4:0]count_nc_d1=0;\n')
for i in range(1,FILTERBATCH_C2+1):
    file.write('  wire done_m_nc_d1_ch{};\n'.format(i))
file.write('  reg en_m_nc_d1;\n')
file.write('  reg rst_m_nc_d1;\n')
for i in range(1,FILTERBATCH_C2+1):
    file.write('  wire signed [{}:0] result_temp_m_nc_d1_ch{};\n'.format((BITWIDTH_SM-1),i))
for i in range(1,FILTERBATCH_C2+1):   
    file.write('  reg signed [0:{}] buffer_nc_d1_ch{}=0;\n'.format((BITWIDTH_SM*NEURONS_D1-1),i))
for i in range(1,FILTERBATCH_C2+1): 
    file.write('  wire signed [{}:0] mem_w_nc_d1_ch{} [0:{}];\n'.format((BITWIDTH_W-1),i,(NEURONS_D1-1)))
for i in range(1,FILTERBATCH_C2+1):    
    file.write('  reg signed [{}:0] w_in_m_nc_d1_ch{};\n'.format((BITWIDTH_W-1),i))
file.write('  reg [2:0] state_nc_d1=0;\n')
file.write('  reg [4:0] weight_select_d1;\n')
for i in range(1,FILTERBATCH_C2+1):
    for j in range(NEURONS_D1):
        file.write('  reg signed [0:{}] buf{}_ch{}=0;\n'.format((BITWIDTH_SM-1),j,i))
    file.write('  \n')
for i in range(1,FILTERBATCH_C2+1):
    for j in range(NEURONS_D1):        
        file.write('  reg signed [0:{}] p{}_ch{};\n'.format((BITWIDTH_SM-1),j,i))
    file.write('  \n')     
#for i in range(NEURONS_D1):
#        file.write('  wire signed [0:{}] bias{};\n'.format((BITWIDTH_B-1),i))
file.write('////////////////////////////////////////////////// softmax ///////////////////////////////////////////////////////////////\n')
file.write('  reg signed [0:{}] values [0:{}];\n'.format((BITWIDTH_SM-1),(NEURONS_D1-1)))
file.write("""  reg [0:3]temp=4'h0;\n""")
file.write("""  reg signed [0:31]max=32'h80000001;\n""")
file.write('  integer i;\n')
file.write('  \n')
file.write('  assign start_addr_conv_c1 = window_select_c1+(window_select_c1/26)*2;\n')
file.write('  assign start_addr_conv_c2 = window_select_c2+(window_select_c2/11)*2;\n')
file.write('///////////////////////////////// BRAM for parameter storage D1 layer/////////////////////////////////////\n')
file.write('  bram #(ADDR_WIDTH,DATA_WIDTH,DEPTH) BRAM_D1(\n')
file.write('       .clk(clk),\n')
file.write('       .addr(addr_d1),\n')
file.write('       .wr_en(wr_en_d1),\n')
file.write('       .data_in(din_d1),\n')
file.write('       .data_out(dout_d1));\n')
file.write('/////////////////////////////// BRAM for parameter storage C1 & C1 port0-C1, port1-C2//////////////////////\n')
file.write('  dualport_bram_param #(ADDR_WIDTH,DATA_WIDTH,DEPTH) BRAM(\n')
file.write('       .clk(clk),\n')
file.write('       .addr_0(addr),\n')
file.write('       .addr_1(addr_c2),\n')
file.write('       .wr_en_0(wr_en),\n')
file.write('       .wr_en_1(wr_en_c2),\n')
file.write('       .oe_0(oe),\n')
file.write('       .oe_1(oe_c2),\n')
file.write('       .data_in_0(din),\n')
file.write('       .data_in_1(din_c2),\n')
file.write('       .data_out_0(dout),\n')
file.write('       .data_out_1(dout_c2));\n')
for i in range(1,FILTERBATCH_C1+1):
    file.write('///////////////////////////////////// BRAM for C1 channel {} //////////////////////////////////////\n'.format(i))
    file.write('  dualport_bram_c1 #(ADDR_WIDTH_BUF_C1,DATA_WIDTH_BUF,DEPTH_BUF_C1) D_BRAM_C1_CH{}(\n'.format(i))
    file.write('       .clk(clk),\n')
    file.write('       .addr_0(addr_buf_0_c1_ch{}),\n'.format(i))
    file.write('       .addr_1(addr_buf_1_c1_ch{}),\n'.format(i))
    file.write('       .wr_en_0(wr_en_buf_0_c1_ch{}),\n'.format(i))
    file.write('       .wr_en_1(wr_en_buf_1_c1_ch{}),\n'.format(i))
    file.write('       .oe_0(oe_buf_0_c1_ch{}),\n'.format(i))
    file.write('       .oe_1(oe_buf_1_c1_ch{}),\n'.format(i))
    file.write('       .data_in_0(din_buf_0_c1_ch{}),\n'.format(i))
    file.write('       .data_in_1(din_buf_1_c1_ch{}),\n'.format(i))
    file.write('       .data_out_0(dout_buf_0_c1_ch{}),\n'.format(i))
    file.write('       .data_out_1(dout_buf_1_c1_ch{}));\n'.format(i))
for i in range(1,FILTERBATCH_C1+1):
    file.write('///////////////////////////////////// BRAM for M1 channel {} //////////////////////////////////////\n'.format(i))
    file.write('  dualport_bram_m1 #(ADDR_WIDTH_BUF_M1,DATA_WIDTH_BUF,DEPTH_BUF_M1) D_BRAM_M1_CH{}(\n'.format(i))
    file.write('       .clk(clk),\n')
    file.write('       .addr_0(addr_buf_0_m1_ch{}),\n'.format(i))
    file.write('       .addr_1(addr_buf_1_m1_ch{}),\n'.format(i))
    file.write('       .wr_en_0(wr_en_buf_0_m1_ch{}),\n'.format(i))
    file.write('       .wr_en_1(wr_en_buf_1_m1_ch{}),\n'.format(i))
    file.write('       .oe_0(oe_buf_0_m1_ch{}),\n'.format(i))
    file.write('       .oe_1(oe_buf_1_m1_ch{}),\n'.format(i))
    file.write('       .data_in_0(din_buf_0_m1_ch{}),\n'.format(i))
    file.write('       .data_in_1(din_buf_1_m1_ch{}),\n'.format(i))
    file.write('       .data_out_0(dout_buf_0_m1_ch{}),\n'.format(i))
    file.write('       .data_out_1(dout_buf_1_m1_ch{}));\n'.format(i))
for i in range(1,FILTERBATCH_C2+1):
    file.write('///////////////////////////////////// BRAM for C2 channel {} //////////////////////////////////////\n'.format(i))
    file.write('  dualport_bram_c2 #(ADDR_WIDTH_BUF_C2,DATA_WIDTH_BUF,DEPTH_BUF_C2) D_BRAM_C2_CH{}(\n'.format(i))
    file.write('       .clk(clk),\n')
    file.write('       .addr_0(addr_buf_0_c2_ch{}),\n'.format(i))
    file.write('       .addr_1(addr_buf_1_c2_ch{}),\n'.format(i))
    file.write('       .wr_en_0(wr_en_buf_0_c2_ch{}),\n'.format(i))
    file.write('       .wr_en_1(wr_en_buf_1_c2_ch{}),\n'.format(i))
    file.write('       .oe_0(oe_buf_0_c2_ch{}),\n'.format(i))
    file.write('       .oe_1(oe_buf_1_c2_ch{}),\n'.format(i))
    file.write('       .data_in_0(din_buf_0_c2_ch{}),\n'.format(i))
    file.write('       .data_in_1(din_buf_1_c2_ch{}),\n'.format(i))
    file.write('       .data_out_0(dout_buf_0_c2_ch{}),\n'.format(i))
    file.write('       .data_out_1(dout_buf_1_c2_ch{}));\n'.format(i))
for i in range(1,FILTERBATCH_C2+1):
    file.write('///////////////////////////////////// BRAM for M2 channel {} //////////////////////////////////////\n'.format(i))
    file.write('  dualport_bram_m2 #(ADDR_WIDTH_BUF_M2,DATA_WIDTH_BUF,DEPTH_BUF_M2) D_BRAM_M2_CH{}(\n'.format(i))
    file.write('       .clk(clk),\n')
    file.write('       .addr_0(addr_buf_0_m2_ch{}),\n'.format(i))
    file.write('       .addr_1(addr_buf_1_m2_ch{}),\n'.format(i))
    file.write('       .wr_en_0(wr_en_buf_0_m2_ch{}),\n'.format(i))
    file.write('       .wr_en_1(wr_en_buf_1_m2_ch{}),\n'.format(i))
    file.write('       .oe_0(oe_buf_0_m2_ch{}),\n'.format(i))
    file.write('       .oe_1(oe_buf_1_m2_ch{}),\n'.format(i))
    file.write('       .data_in_0(din_buf_0_m2_ch{}),\n'.format(i))
    file.write('       .data_in_1(din_buf_1_m2_ch{}),\n'.format(i))
    file.write('       .data_out_0(dout_buf_0_m2_ch{}),\n'.format(i))
    file.write('       .data_out_1(dout_buf_1_m2_ch{}));\n'.format(i))
file.write('  \n')
file.write('   always@(*)begin\n')
file.write('       case(state)\n')
file.write('           0:begin\n')
file.write('               en_c1=0;en_m1=0;en_c2=0;en_m2=0;en_d1=0;en_sm=0;\n')
file.write('               rst_c1=1;rst_m1=1;rst_c2=1;rst_m2=1;rst_d1=1;\n')
file.write('           end\n')
file.write('           1:begin\n')
file.write('               en_c1=1;en_m1=0;en_c2=0;en_m2=0;en_d1=0;en_sm=0;\n')
file.write('               rst_c1=0;rst_m1=1;rst_c2=1;rst_m2=1;rst_d1=1;\n')
file.write('           end\n')
file.write('           2:begin\n')
file.write('               en_c1=0;en_m1=1;en_c2=0;en_m2=0;en_d1=0;en_sm=0;\n')
file.write('               rst_c1=0;rst_m1=0;rst_c2=1;rst_m2=1;rst_d1=1;\n')
file.write('           end\n')
file.write('           3:begin\n')
file.write('               en_c1=0;en_m1=0;en_c2=1;en_m2=0;en_d1=0;en_sm=0;\n')
file.write('               rst_c1=0;rst_m1=0;rst_c2=0;rst_m2=1;rst_d1=1;\n')
file.write('           end\n')
file.write('           4:begin\n')
file.write('               en_c1=0;en_m1=0;en_c2=0;en_m2=1;en_d1=0;en_sm=0;\n')
file.write('               rst_c1=0;rst_m1=0;rst_c2=0;rst_m2=0;rst_d1=1;\n')
file.write('           end\n')
file.write('           5:begin\n')
file.write('               en_c1=0;en_m1=0;en_c2=0;en_m2=0;en_d1=1;en_sm=0;\n')
file.write('               rst_c1=0;rst_m1=0;rst_c2=0;rst_m2=0;rst_d1=0;\n')
file.write('           end\n')
file.write('           6:begin\n')
file.write('               en_c1=0;en_m1=0;en_c2=0;en_m2=0;en_d1=0;en_sm=1;\n')
file.write('               rst_c1=0;rst_m1=0;rst_c2=0;rst_m2=0;rst_d1=0;\n')
file.write('           end\n')
file.write('           7:begin\n')
file.write('               en_c1=1;en_m1=1;en_c2=0;en_m2=0;en_d1=0;en_sm=0;\n')
file.write('               rst_c1=0;rst_m1=0;rst_c2=1;rst_m2=1;rst_d1=1;\n')
file.write('           end\n')
file.write('           8:begin\n')
file.write('               en_c1=1;en_m1=0;en_c2=0;en_m2=0;en_d1=0;en_sm=0;\n')
file.write('               rst_c1=0;rst_m1=0;rst_c2=0;rst_m2=1;rst_d1=1;\n')
file.write('           end\n')
file.write('           9:begin\n')
file.write('               en_c1=0;en_m1=1;en_c2=1;en_m2=0;en_d1=0;en_sm=0;\n')
file.write('               rst_c1=0;rst_m1=0;rst_c2=0;rst_m2=1;rst_d1=1;\n')
file.write('           end\n')
file.write('           10:begin\n')
file.write('               en_c1=0;en_m1=1;en_c2=0;en_m2=0;en_d1=0;en_sm=0;\n')
file.write('               rst_c1=0;rst_m1=0;rst_c2=0;rst_m2=1;rst_d1=1;\n')
file.write('           end\n')
file.write('           11:begin\n')
file.write('               en_c1=1;en_m1=1;en_c2=1;en_m2=0;en_d1=0;en_sm=0;\n')
file.write('               rst_c1=0;rst_m1=0;rst_c2=0;rst_m2=1;rst_d1=1;\n')
file.write('           end\n')
file.write('           12:begin\n')
file.write('               en_c1=1;en_m1=0;en_c2=1;en_m2=0;en_d1=0;en_sm=0;\n')
file.write('               rst_c1=0;rst_m1=0;rst_c2=0;rst_m2=1;rst_d1=1;\n')
file.write('           end\n')
file.write('           13:begin\n')
file.write('               en_c1=0;en_m1=0;en_c2=1;en_m2=1;en_d1=0;en_sm=0;\n')
file.write('               rst_c1=0;rst_m1=0;rst_c2=0;rst_m2=0;rst_d1=1;\n')
file.write('           end\n')
file.write('           14:begin\n')
file.write('               en_c1=0;en_m1=0;en_c2=1;en_m2=0;en_d1=0;en_sm=0;\n')
file.write('               rst_c1=0;rst_m1=0;rst_c2=0;rst_m2=0;rst_d1=1;\n')
file.write('           end\n')
file.write('           15:begin\n')
file.write('               en_c1=1;en_m1=0;en_c2=1;en_m2=1;en_d1=0;en_sm=0;\n')
file.write('               rst_c1=0;rst_m1=0;rst_c2=0;rst_m2=0;rst_d1=1;\n')
file.write('           end\n')
file.write('           default:begin\n')
file.write('               en_c1=0;en_m1=0;en_c2=0;en_m2=0;en_d1=0;en_sm=0;\n')
file.write('               rst_c1=1;rst_m1=1;rst_c2=1;rst_m2=1;rst_d1=0;\n')
file.write('           end\n')
file.write('      endcase\n')
file.write('      if(done_soft==1)begin\n')
file.write("""          done=1'b1;\n""")
file.write('      end\n')
file.write('      else begin\n')
file.write("""          prediction=4'dX;\n""")
file.write("""          done=1'b0;\n""")
file.write('      end\n')
file.write('  end\n')
file.write('  \n')
file.write('  \n')
file.write('  integer j,k;\n')
file.write('  always@(posedge clk)begin\n')
file.write('          ///////////////////////////////////////// top /////////////////////////////////////////\n')
file.write('      case(state)\n')
file.write('          0:begin\n')
file.write('              if(in_ready) state=1; else state=0;\n')
file.write('          end\n')
file.write('          1:begin\n')
file.write('              if(done_c1) state=2; \n')
file.write('              else if(count_shift_c1>n*52-1) state=7;\n')
file.write('              else state=1;\n')
file.write('          end\n')
file.write('          2:begin\n')
file.write('              if(done_m1) state=3;\n')
file.write('              else if(count_shift_m1>=(m+2)*13-1) state=9;\n')
file.write('              else state=2;\n')
file.write('          end\n')
file.write('          3:begin\n')
file.write('              if(done_c2) state=4;\n')
file.write('              else if(count_shift_c2d>(a+a+1)*11-1) state=13;\n')
file.write('              else state=3;\n')
file.write('          end\n')
file.write('          4:begin\n')
file.write('              if(done_m2) state=5; else state=4;\n')
file.write('          end\n')
file.write('          5:begin\n')
file.write('              if(done_den1) state=6; else state=5;\n')
file.write('          end\n')
file.write('          6:begin\n')
file.write('              if(done_soft) state=0; else state=6;\n')
file.write('          end\n')
file.write('          7:begin\n')
file.write('              if(')
for i in range(1,FILTERBATCH_C1+1):
    if(i==FILTERBATCH_C1):
        file.write('done_mk_m1_row_ch{}'.format(i))
    else:
        file.write('done_mk_m1_row_ch{} && '.format(i))
file.write(') state=8;\n')
file.write('              else state=7;\n')
file.write('          end\n')
file.write('          8:begin\n')
file.write('              if(done_c1) state=2;\n')
file.write('              else if(count_shift_c1>n*52-1) state=7;\n')
file.write('              else if(count_shift_m1>=(m+2)*13-1) state=12;\n')
file.write('              else state=8;\n')
file.write('          end\n')
file.write('          9:begin\n')
file.write('              if(done_m1) state=3;\n')
file.write('              else if(')
for i in range(1,FILTERBATCH_C2+1):
    if(i==FILTERBATCH_C2):
        file.write('done_ck_c2d_row_ch{}'.format(i))
    else:
        file.write('done_ck_c2d_row_ch{} && '.format(i))
file.write(') state=10;\n')
file.write('              else state=9;\n')
file.write('          end\n')
file.write('          10:begin\n')
file.write('              if(done_m1) state=3;\n')
file.write('              else if(count_shift_m1>=(m+2)*13-1) state=9;\n')
file.write('              else state=10;\n')
file.write('          end\n')
file.write('          11:begin\n')
file.write('              if(done_c1) state=2;\n')
file.write('              else if(')
for i in range(1,FILTERBATCH_C1+1):
    if(i==FILTERBATCH_C1):
        file.write('done_mk_m1_row_ch{}'.format(i))
    else:
        file.write('done_mk_m1_row_ch{} && '.format(i))
file.write(') state=8;\n')
file.write('              else if(')
for i in range(1,FILTERBATCH_C2+1):
    if(i==FILTERBATCH_C2):
        file.write('done_ck_c2d_row_ch{}'.format(i))
    else:
        file.write('done_ck_c2d_row_ch{} && '.format(i))
file.write(') state=7;\n')
file.write('              else state=11;\n')
file.write('          end\n')
file.write('          12:begin\n')
file.write('              if(done_c1) state=2;\n')
file.write('              else if(')
for i in range(1,FILTERBATCH_C2+1):
    if(i==FILTERBATCH_C2):
        file.write('done_ck_c2d_row_ch{}'.format(i))
    else:
        file.write('done_ck_c2d_row_ch{} && '.format(i))
file.write(') state=8;\n')
file.write('              else if(count_shift_c2d>(a+a+1)*11-1) state=15;\n')
file.write('              else state=12;\n')
file.write('          end\n')
file.write('          13:begin\n')
file.write('              if(')
for i in range(1,FILTERBATCH_C2+1):
    if(i==FILTERBATCH_C2):
        file.write('done_mk_m2_row_ch{}'.format(i))
    else:
        file.write('done_mk_m2_row_ch{} && '.format(i))
file.write(') state=14;\n')
file.write('              else state=13;\n')
file.write('          end\n')
file.write('          14:begin\n')
file.write('              if(done_c2) state=4;\n')
file.write('              else if(count_shift_c2d>(a+a+1)*11-1) state=13;\n')
file.write('              else state=14;\n')
file.write('          end\n')
file.write('          15:begin\n')
file.write('              if(done_c1) state=2;\n')
file.write('              else if(')
for i in range(1,FILTERBATCH_C2+1):
    if(i==FILTERBATCH_C2):
        file.write('done_mk_m2_row_ch{}'.format(i))
    else:
        file.write('done_mk_m2_row_ch{} && '.format(i))
file.write(') state=12;\n')
file.write('              else state=15;\n')
file.write('          end\n')
file.write('          default:begin\n')
file.write('              state=0;\n')
file.write('          end\n')
file.write('      endcase\n')
file.write('          //////////////////////////////////// c1 //////////////////////////////////\n')
file.write('      if(rst_c1==0)begin\n')
file.write('          case(state_c1)\n')
file.write('              0:begin\n')
file.write('                  if(en_c1) state_c1=2; else state_c1=0;\n')
file.write('              end\n')
file.write('              1:begin\n')
file.write('                  if(done_shift_c1) state_c1=0; else state_c1=1;\n')
file.write('              end\n')
file.write('              2:begin\n')
file.write('                  if(!done_shift_c1) state_c1=1; else state_c1=2;\n')
file.write('              end\n')
file.write('          endcase\n')
file.write('      end\n')
file.write('          //////////////////////////////shift_c1////////////////////////////\n')
file.write('      if(rst_shift_c1)begin\n')
file.write('          count_ld_shift_c1=0;\n')
file.write('          done_load_shift_c1=0;\n')
file.write('      end\n')
file.write('      else if(en_shift_c1 && !done_load_shift_c1) begin\n')
file.write("""          wr_en=1'b0;\n""")
file.write("""          oe=1'b1;\n""")
file.write('          if(count_ld_shift_c1<{})begin\n'.format(FILTERBATCH_C1*KERNELWIDTH_C1*KERNELHEIGHT_C1+FILTERBATCH_C1))
file.write('              addr = OFFSET_C1_W+count_ld_shift_c1;\n')
file.write('              count_ld_shift_c1 = count_ld_shift_c1+1;\n')
file.write('              done_load_shift_c1=0;\n')
file.write('          end\n')
file.write('          else if(count_ld_shift_c1=={})begin\n'.format(FILTERBATCH_C1*KERNELWIDTH_C1*KERNELHEIGHT_C1+FILTERBATCH_C1))
file.write('              done_load_shift_c1=0;\n')
file.write('              count_ld_shift_c1 = count_ld_shift_c1+1;\n')
file.write('          end\n')
file.write('          else begin\n')
file.write("""              count_ld_shift_c1=11'hX;\n""")
file.write("""              done_load_shift_c1=1'b1;\n""")
file.write("""              wr_en=1'b0;\n""")
file.write("""              oe=1'b0;\n""")
file.write('          end\n')
file.write('      end\n')
file.write('          /////////////////////////bram buffer c1////////////////////////\n')
file.write('      if(rst_shift_c1==0 && done_load_shift_c1)begin\n')
file.write('          if(count_shift_c1<676)begin\n')
for i in range(1,FILTERBATCH_C1+1):
    file.write('              addr_buf_0_c1_ch{}=count_shift_c1;\n'.format(i))
for i in range(1,FILTERBATCH_C1+1):
    file.write("""              wr_en_buf_0_c1_ch{}=1'b1;\n""".format(i))
file.write('          end\n')
file.write('          else begin\n')
for i in range(1,FILTERBATCH_C1+1):
    file.write("""              addr_buf_0_c1_ch{}={}'hX;\n""".format(i,(ADDR_WIDTH_BUF_C1)))
for i in range(1,FILTERBATCH_C1+1):
    file.write("""              wr_en_buf_0_c1_ch{}=1'b0;\n""".format(i))
file.write('          end\n')
file.write('      end\n')
file.write('          ///////////////////////////// shift c1 //////////////////////////////\n')
file.write('      if(rst_shift_c1==0 && done_load_shift_c1)begin\n')
file.write('          case(state_shift_c1)\n')
file.write('              0:begin\n')
file.write('                  if(en_shift_c1 && done_load_shift_c1) state_shift_c1=2; else state_shift_c1=0;\n')
file.write('              end\n')
file.write('              1:begin\n')
file.write('                  if(done_conv_c1) state_shift_c1=0; else state_shift_c1=1;\n')
file.write('              end\n')
file.write('              2:begin\n')
file.write('                  if(!done_conv_c1) state_shift_c1=1; else state_shift_c1=2;\n')
file.write('              end\n')
file.write('          endcase\n')
file.write('      end\n')
file.write('          ////////////////////////conv_c1 channel 1 /////////////////////////////\n')
file.write('      if(rst_conv_c1)begin\n')
file.write('          count_ld_conv_c1=0;\n')
file.write('          done_load_conv_c1=0;\n')
file.write('      end\n')
file.write('      else if(en_conv_c1 && !done_load_conv_c1) begin\n')
file.write("""          wr_en=1'b0;\n""")
file.write("""          oe=1'b1;\n""")
file.write('          if(count_ld_conv_c1<3)begin\n')
file.write('              addr = start_addr_conv_c1+count_ld_conv_c1;\n')
file.write('              count_ld_conv_c1 = count_ld_conv_c1+1;\n')
file.write('              done_load_conv_c1=0;\n')
file.write('          end\n')
file.write('          else if(count_ld_conv_c1<6)begin\n')
file.write('              addr = start_addr_conv_c1+count_ld_conv_c1+25;\n')
file.write('              count_ld_conv_c1 = count_ld_conv_c1+1;\n')
file.write('              done_load_conv_c1=0;\n')
file.write('          end\n')
file.write('          else if(count_ld_conv_c1<9)begin\n')
file.write('              addr = start_addr_conv_c1+count_ld_conv_c1+50;\n')
file.write('              count_ld_conv_c1 = count_ld_conv_c1+1;\n')
file.write('              done_load_conv_c1=0;\n')
file.write('          end\n')
file.write('          else if(count_ld_conv_c1==9)begin\n')
file.write('              count_ld_conv_c1=count_ld_conv_c1+1;\n')
file.write('              done_load_conv_c1=0;\n')
file.write('          end\n')
file.write('          else begin\n')
file.write("""             count_ld_conv_c1=11'hX;\n""")
file.write("""             done_load_conv_c1=1'b1;\n""")
file.write("""             wr_en=1'b0;\n""")
file.write("""             oe=1'b0;\n""")
file.write('          end\n')
file.write('      end\n')
file.write('      if(rst_conv_c1==0 && done_load_conv_c1) begin\n')
file.write('          case(state_conv_c1)\n')
file.write('              0:begin\n')
file.write('                  if(en_conv_c1 && done_load_conv_c1) state_conv_c1=2; else state_conv_c1=0;\n')
file.write('              end\n')
file.write('              1:begin\n')
file.write('                  if(')
for i in range(1,FILTERBATCH_C1+1):
    if(i==FILTERBATCH_C1):
        file.write('done_m_c1_ch{}'.format(i)) 
    else:
        file.write('done_m_c1_ch{} && '.format(i))       
file.write(') state_conv_c1=0; else state_conv_c1=1;\n')
file.write('              end\n')
file.write('              2:begin\n')
file.write('                  if(')
for i in range(1,FILTERBATCH_C1+1):
    if(i==FILTERBATCH_C1):
        file.write('!done_m_c1_ch{}'.format(i))
    else:
        file.write('!done_m_c1_ch{} && '.format(i))
file.write(') state_conv_c1=1; else state_conv_c1=2;\n')
file.write('              end\n')
file.write('          endcase\n')
file.write('      end\n')
file.write('          ////////////////////////////maxpool m1/////////////////////////////\n')
file.write('      if(rst_m1==0)begin\n')
file.write('          case(state_m1)\n')
file.write('              0:begin\n')
file.write('                  if(en_m1) state_m1=2; else state_m1=0;\n')
file.write('              end\n')
file.write('              1:begin\n')
file.write('                  if(done_shift_m1) state_m1=0;\n')
file.write('                  else if(')
for i in range(1,FILTERBATCH_C1+1):
    if(i==FILTERBATCH_C1):
        if(i==FILTERBATCH_C1):
            file.write('done_mk_m1_row_ch{}'.format(i))
        else:
            file.write('done_mk_m1_row_ch{} && '.format(i))
file.write(') state_m1=3;\n')
file.write('                  else state_m1=1;\n')
file.write('              end\n')
file.write('              2:begin\n')
file.write('                  if(')
for i in range(1,FILTERBATCH_C1+1):
    if(i==FILTERBATCH_C1):
        file.write('!done_mk_m1_row_ch{}'.format(i))
    else:
        file.write('!done_mk_m1_row_ch{} && '.format(i))
file.write(' && !done_shift_m1) state_m1=1; else state_m1=2;\n')        
file.write('              end\n')
file.write('              3:begin\n')
file.write('                  if(en_m1 && ')
for i in range(1,FILTERBATCH_C1+1):
    if(i==FILTERBATCH_C1):
        file.write('!done_mk_m1_row_ch{}'.format(i))
    else:
        file.write('!done_mk_m1_row_ch{} && '.format(i))
file.write(' && !done_shift_m1) state_m1=1;\n')
file.write('                  else state_m1=3;\n')
file.write('              end\n')
file.write('          endcase\n')
file.write('      end\n')
file.write('          //////////////////////////// bram buffer m1 ///////////////////////////\n')
file.write('      if(rst_shift_m1==0 )begin\n')
file.write('          if(count_shift_m1<169)begin\n')
for i in range(1,FILTERBATCH_C1+1):
    file.write('              addr_buf_0_m1_ch{}=count_shift_m1;\n'.format(i))
for i in range(1,FILTERBATCH_C1+1):
    file.write("""              wr_en_buf_0_m1_ch{}=1'b1;\n""".format(i))
file.write('          end\n')
file.write('          else begin\n')
for i in range(1,FILTERBATCH_C1+1):
    file.write("""              addr_buf_0_m1_ch{}={}'hX;\n""".format(i,(ADDR_WIDTH_BUF_M1)))
for i in range(1,FILTERBATCH_C1+1):
    file.write("""              wr_en_buf_0_m1_ch{}=1'b0;\n""".format(i))
file.write('          end\n')
file.write('      end\n')
file.write('          //////////////////////shift m1/////////////////////////\n')
file.write('      if(rst_shift_m1==0)begin\n')
file.write('          case(state_shift_m1)\n')
file.write('              0:begin\n')
file.write('                  if(en_shift_m1) state_shift_m1=2; else state_shift_m1=0;\n')
file.write('              end\n')
file.write('              1:begin\n')
file.write('                  if(')
for i in range(1,FILTERBATCH_C1+1):
    if(i==FILTERBATCH_C1):
        file.write('done_mk_m1_ch{}'.format(i))
    else:
        file.write('done_mk_m1_ch{} && '.format(i))
file.write(') state_shift_m1=0;\n')
file.write('                  else if(')
for i in range(1,FILTERBATCH_C1+1):
    if(i==FILTERBATCH_C1):
        file.write('done_mk_m1_row_ch{}'.format(i))
    else:
        file.write('done_mk_m1_row_ch{} && '.format(i))
file.write(') state_shift_m1=0;\n')
file.write('                  else state_shift_m1=1;\n')
file.write('              end\n')
file.write('              2:begin\n')
file.write('                  if(')
for i in range(1,FILTERBATCH_C1+1):
    if(i==FILTERBATCH_C1):
        file.write('!done_mk_m1_ch{} && !done_mk_m1_row_ch{}'.format(i,i))
    else:
        file.write('!done_mk_m1_ch{} && !done_mk_m1_row_ch{} && '.format(i,i))  
file.write(') state_shift_m1=1; else state_shift_m1=2;\n')
file.write('              end\n')
file.write('          endcase\n')
file.write('      end\n')
file.write('          //////////////////////////maxpool kernel m1////////////////////////////\n')
file.write('      if(rst_mk_m1)begin\n')
file.write('          count_ld_mk_m1=0;\n')
file.write('          done_load_mk_m1=0;\n')
file.write('      end\n')
file.write('      else if(en_mk_m1 && !done_load_mk_m1) begin\n')
file.write('          if(count_ld_mk_m1<2)begin\n')
for i in range(1,FILTERBATCH_C1+1):
    file.write("""              wr_en_buf_1_c1_ch{}=1'b0;\n""".format(i))
for i in range(1,FILTERBATCH_C1+1):
    file.write("""              oe_buf_1_c1_ch{}=1'b1;\n""".format(i))
for i in range(1,FILTERBATCH_C1+1):
    file.write('              addr_buf_1_c1_ch{} = start_addr_mk_m1+count_ld_mk_m1;\n'.format(i))
file.write('              count_ld_mk_m1 = count_ld_mk_m1+1;\n')
file.write('              done_load_mk_m1=0;\n')
file.write('          end\n')
file.write('          else if(count_ld_mk_m1<4)begin\n')
for i in range(1,FILTERBATCH_C1+1):
    file.write("""              wr_en_buf_1_c1_ch{}=1'b0;\n""".format(i))
for i in range(1,FILTERBATCH_C1+1):
    file.write("""              oe_buf_1_c1_ch{}=1'b1;\n""".format(i))
for i in range(1,FILTERBATCH_C1+1):
    file.write('              addr_buf_1_c1_ch{} = start_addr_mk_m1+count_ld_mk_m1+24;\n'.format(i))
file.write('              count_ld_mk_m1 = count_ld_mk_m1+1;\n')
file.write('              done_load_mk_m1=0;\n')
file.write('          end\n')
file.write('          else if(count_ld_mk_m1==4)begin\n')
file.write('              count_ld_mk_m1=count_ld_mk_m1+1;\n')
file.write('              done_load_mk_m1=0;\n')
file.write('          end\n')
file.write('          else begin\n')
file.write("""              count_ld_mk_m1=10'hX;\n""")
file.write("""              done_load_mk_m1=1'b1;\n""")
file.write('          end\n')
file.write('      end\n')
file.write('          ///////////////////////////// maxpool m1 kernel calculation ///////////////////////////////\n')
file.write('      if(rst_mk_m1)begin\n')
for i in range(1,FILTERBATCH_C1+1):
    file.write("""          done_mk_m1_ch{}=1'b0;\n""".format(i))
for i in range(1,FILTERBATCH_C1+1):
    file.write('          result_temp_mk_m1_ch{}=0;\n'.format(i))
file.write('          j=0;\n')
for i in range(1,FILTERBATCH_C1+1):
    file.write('          out_temp_mk_m1_ch{}=0;\n'.format(i))
file.write('      end\n')
file.write('      else begin\n')
file.write('          if(en_mk_m1==1 && done_load_mk_m1) begin\n')
file.write('              for(j=0; j<4; j=j+1)begin\n')
for i in range(1,FILTERBATCH_C1+1):
    file.write('                  if(element_mk_m1_ch{}[j]>out_temp_mk_m1_ch{})begin\n'.format(i,i))
    file.write('                      out_temp_mk_m1_ch{}=element_mk_m1_ch{}[j];\n'.format(i,i))
    file.write('                  end\n')
file.write('              end\n')
for i in range(1,FILTERBATCH_C1+1):
    file.write('              result_temp_mk_m1_ch{}=out_temp_mk_m1_ch{};\n'.format(i,i))
for i in range(1,FILTERBATCH_C1+1):
    file.write("""              done_mk_m1_ch{}=1'b1;\n""".format(i))
file.write('          end\n')
file.write('      end\n')
file.write('          ///////////////////////////////// c2d /////////////////////////////////////\n')
file.write('      if(rst_c2==0)begin\n')
for i in range(1,FILTERBATCH_C2+1):
    file.write('          bias_new_c2d_ch{}=bias_c2d_ch{}<<<3;\n'.format(i,i))
file.write('          case(state_c2d)\n')
file.write('              0:begin\n')
file.write('                  if(en_c2) state_c2d=2; else state_c2d=0;\n')
file.write('              end\n')
file.write('              1:begin\n')
file.write('                  if(done_shift_c2d) state_c2d=0;\n')
file.write('                  else if(')
for i in range(1,FILTERBATCH_C2+1):
    if(i==FILTERBATCH_C2):
        file.write('done_ck_c2d_row_ch{}'.format(i))
    else:
        file.write('done_ck_c2d_row_ch{} && '.format(i))
file.write(') state_c2d=3;\n')
file.write('                  else state_c2d=1;\n')
file.write('              end\n')
file.write('              2:begin\n')
file.write('                  if(!done_shift_c2d && ')
for i in range(1,FILTERBATCH_C2+1):
    if(i==FILTERBATCH_C2):
        file.write('!done_ck_c2d_row_ch{}'.format(i))
    else:
        file.write('!done_ck_c2d_row_ch{} && '.format(i))
file.write(') state_c2d=1; else state_c2d=2;\n')
file.write('              end\n')
file.write('              3:begin\n')
file.write('                  if(en_c2 && !done_shift_c2d && ')
for i in range(1,FILTERBATCH_C2+1):
    if(i==FILTERBATCH_C2):
        file.write('!done_ck_c2d_row_ch{}'.format(i))
    else:
        file.write('!done_ck_c2d_row_ch{} && '.format(i))
file.write(') state_c2d=1;\n')
file.write('                  else state_c2d=3;\n')
file.write('              end\n')
file.write('          endcase\n')
file.write('      end\n')
file.write('         /////////////////////////////shift c2 ///////////////////////////////\n')
file.write('      if(rst_shift_c2d)begin\n')
file.write('          count_ld_shift_c2d=0;\n')
file.write('          done_load_shift_c2d=0;\n')
file.write('      end\n')
file.write('      else if(en_shift_c2d && !done_load_shift_c2d) begin\n')
file.write("""          wr_en_c2=1'b0;\n""")
file.write("""          oe_c2=1'b1;\n""")
file.write('          if(count_ld_shift_c2d<{})begin\n'.format(FILTERBATCH_C1*FILTERBATCH_C2*KERNELWIDTH_C2*KERNELHEIGHT_C2+FILTERBATCH_C2))
file.write('              addr_c2 = OFFSET_C2_W+count_ld_shift_c2d;\n')
file.write('              count_ld_shift_c2d = count_ld_shift_c2d+1;\n')
file.write('              done_load_shift_c2d=0;\n')
file.write('          end\n')
file.write('          else if(count_ld_shift_c2d=={})\n'.format(FILTERBATCH_C1*FILTERBATCH_C2*KERNELWIDTH_C2*KERNELHEIGHT_C2+FILTERBATCH_C2))
file.write('              count_ld_shift_c2d=count_ld_shift_c2d+1;\n')
file.write('          else begin\n')
file.write("""              count_ld_shift_c2d=11'hX;\n""")
file.write("""              done_load_shift_c2d=1'b1;\n""")
file.write("""              wr_en_c2=1'b0;\n""")
file.write("""              oe_c2=1'b0;\n""")
file.write('          end\n')
file.write('      end\n')
file.write('          ///////////////////////////// bram buffer c2 //////////////////////////////\n')
file.write('      if(rst_shift_c2d==0 && done_load_shift_c2d)begin\n')
file.write('          if(count_shift_c2d<121)begin\n')
for i in range(1,FILTERBATCH_C2+1):
    file.write('              addr_buf_0_c2_ch{}=count_shift_c2d;\n'.format(i))
for i in range(1,FILTERBATCH_C2+1): 
    file.write("""              wr_en_buf_0_c2_ch{}=1'b1;\n""".format(i))
file.write('          end\n')
file.write('          else begin\n')
for i in range(1,FILTERBATCH_C2+1): 
    file.write("""              addr_buf_0_c2_ch{}={}'hX;\n""".format(i,(ADDR_WIDTH_BUF_C2)))
for i in range(1,FILTERBATCH_C2+1): 
    file.write("""              wr_en_buf_0_c2_ch{}=1'b0;\n""".format(i))
file.write('          end\n')
file.write('      end\n')
file.write('          ////////////////////////////// shift c2 ////////////////////////////////\n')
file.write('      if(rst_shift_c2d==0 && done_load_shift_c2d)begin\n')
file.write('          case(state_shift_c2d)\n')
file.write('              0:begin\n')
file.write('                  if(en_shift_c2d && done_load_shift_c2d) state_shift_c2d=2; else state_shift_c2d=0;\n')
file.write('              end\n')
file.write('              1:begin\n')
file.write('                  if(done_ck_c2d) state_shift_c2d=0;\n')
file.write('                  else if(')
for i in range(1,FILTERBATCH_C2+1):
    if(i==FILTERBATCH_C2):
        file.write('done_ck_c2d_row_ch{}'.format(i))
    else:
        file.write('done_ck_c2d_row_ch{} && '.format(i))
file.write(') state_shift_c2d=0;\n')
file.write('                  else state_shift_c2d=1;\n')
file.write('              end\n')
file.write('              2:begin\n')
file.write('                  if(!done_ck_c2d && ')
for i in range(1,FILTERBATCH_C2+1):
    if(i==FILTERBATCH_C2):
        file.write('!done_ck_c2d_row_ch{}'.format(i))
    else:
        file.write('!done_ck_c2d_row_ch{} && '.format(i))
file.write(') state_shift_c2d=1; else state_shift_c2d=2;\n')
file.write('              end\n')
file.write('          endcase\n')
file.write('      end\n')
file.write('          ////////////////////////////////conv kernel c2 /////////////////////////////////////\n')
file.write('      if(rst_ck_c2d)begin\n')
file.write('          count_ld_conv_c2=0;\n')
file.write('          done_load_conv_c2=0;\n')
file.write('      end\n')
file.write('      else if(en_ck_c2d && !done_load_conv_c2) begin\n')
file.write('          if(count_ld_conv_c2<3)begin\n')
for i in range(1,FILTERBATCH_C1+1):
    file.write("""              wr_en_buf_1_m1_ch{}=1'b0;\n""".format(i))
for i in range(1,FILTERBATCH_C1+1):
    file.write("""              oe_buf_1_m1_ch{}=1'b1;\n""".format(i))
for i in range(1,FILTERBATCH_C1+1):   
    file.write('              addr_buf_1_m1_ch{} = start_addr_conv_c2+count_ld_conv_c2;\n'.format(i))
file.write('              count_ld_conv_c2 = count_ld_conv_c2+1;\n')
file.write('              done_load_conv_c2=0;\n')
file.write('          end\n')
file.write('          else if(count_ld_conv_c2<6)begin\n')
for i in range(1,FILTERBATCH_C1+1):
    file.write("""              wr_en_buf_1_m1_ch{}=1'b0;\n""".format(i))
for i in range(1,FILTERBATCH_C1+1):
    file.write("""              oe_buf_1_m1_ch{}=1'b1;\n""".format(i))
for i in range(1,FILTERBATCH_C1+1):
    file.write('              addr_buf_1_m1_ch{} = start_addr_conv_c2+count_ld_conv_c2+10;\n'.format(i))
file.write('              count_ld_conv_c2 = count_ld_conv_c2+1;\n')
file.write('              done_load_conv_c2=0;\n')
file.write('          end\n')
file.write('          else if(count_ld_conv_c2<9)begin\n')
for i in range(1,FILTERBATCH_C1+1):
    file.write("""              wr_en_buf_1_m1_ch{}=1'b0;\n""".format(i))
for i in range(1,FILTERBATCH_C1+1):
    file.write("""              oe_buf_1_m1_ch{}=1'b1;\n""".format(i))
for i in range(1,FILTERBATCH_C1+1):
    file.write('              addr_buf_1_m1_ch{} = start_addr_conv_c2+count_ld_conv_c2+20;\n'.format(i))
file.write('              count_ld_conv_c2 = count_ld_conv_c2+1;\n')
file.write('              done_load_conv_c2=0;\n')
file.write('          end\n')
file.write('          else if(count_ld_conv_c2==9)begin\n')
file.write('              count_ld_conv_c2=count_ld_conv_c2+1;\n')
file.write('              done_load_conv_c2=0;\n')
file.write('          end\n')
file.write('          else begin\n')
file.write("""              count_ld_conv_c2=11'hX;\n""")
file.write("""              done_load_conv_c2=1'b1;\n""")
file.write('          end\n')
file.write('      end\n')
file.write('      if(rst_ck_c2d==0 && done_load_conv_c2) begin\n')
file.write('          case(state_ck_c2d)\n')
file.write('              0:begin\n')
file.write('                  if(en_ck_c2d && done_load_conv_c2) state_ck_c2d=2; else state_ck_c2d=0;\n')
file.write('              end\n')
file.write('              1:begin\n')
file.write('                  if(')
for i in range(1,FILTERBATCH_C2+1):
    for j in range(1,FILTERBATCH_C1+1):  
        if(i*j==FILTERBATCH_C1*FILTERBATCH_C2):
            file.write('done_m_c2d_in{}_w{}{}'.format(j,i,j))
        else:
            file.write('done_m_c2d_in{}_w{}{} && '.format(j,i,j))
file.write(') state_ck_c2d=0; else state_ck_c2d=1;\n')
file.write('              end\n')
file.write('              2:begin\n')
file.write('                  if(!(')
for i in range(1,FILTERBATCH_C2+1):
    for j in range(1,FILTERBATCH_C1+1):  
        if(i*j==FILTERBATCH_C1*FILTERBATCH_C2):
            file.write('done_m_c2d_in{}_w{}{}'.format(j,i,j))
        else:
            file.write('done_m_c2d_in{}_w{}{} && '.format(j,i,j))
file.write(')) state_ck_c2d=1; else state_ck_c2d=2;\n')
file.write('              end\n')
file.write('              default:begin\n')
file.write('                  state_ck_c2d=0;\n')
file.write('              end\n')
file.write('          endcase\n')
file.write('      end\n')
file.write('          ///////////////////////////// mapool m2 /////////////////////////////\n')
file.write('      if(rst_m2==0)begin\n')
file.write('          case(state_m2)\n')
file.write('              0:begin\n')
file.write('                  if(en_m2) state_m2=2; else state_m2=0;\n')
file.write('              end\n')
file.write('              1:begin\n')
file.write('                  if(done_shift_m2) state_m2=0;\n')
file.write('                  else if(')
for i in range(1,FILTERBATCH_C2+1):
    if(i==FILTERBATCH_C2):
        file.write('done_mk_m2_row_ch{}'.format(i))
    else:
        file.write('done_mk_m2_row_ch{} && '.format(i))
file.write(') state_m2=3;\n')
file.write('                  else state_m2=1;\n')
file.write('              end\n')
file.write('              2:begin\n')
file.write('                  if(!done_shift_m2 && ')
for i in range(1,FILTERBATCH_C2+1):
    if(i==FILTERBATCH_C2):
        file.write('!done_mk_m2_row_ch{}'.format(i))
    else:
        file.write('!done_mk_m2_row_ch{} && '.format(i))
file.write(') state_m2=1; else state_m2=2;\n')
file.write('              end\n')
file.write('              3:begin\n')
file.write('                  if(en_m2 && ')
for i in range(1,FILTERBATCH_C2+1):
    file.write('!done_mk_m2_row_ch{} && '.format(i))
file.write('!done_shift_m2) state_m2=1;\n')
file.write('                  else state_m2=3;\n')
file.write('              end\n')
file.write('          endcase\n')
file.write('      end\n')
file.write('          ////////////////////////////// bram buffer m2 //////////////////////////////\n')
file.write('      if(rst_shift_m2==0 )begin\n')
file.write('          if(count_shift_m2<25)begin\n')
for i in range(1,FILTERBATCH_C2+1):
    file.write('              addr_buf_0_m2_ch{}=count_shift_m2;\n'.format(i))
for i in range(1,FILTERBATCH_C2+1):   
    file.write("""              wr_en_buf_0_m2_ch{}=1'b1;\n""".format(i))
file.write('          end\n')
file.write('          else begin\n')
for i in range(1,FILTERBATCH_C2+1):
    file.write("""              addr_buf_0_m2_ch{}={}'hX;\n""".format(i,(ADDR_WIDTH_BUF_M2)))
for i in range(1,FILTERBATCH_C2+1):
    file.write("""              wr_en_buf_0_m2_ch{}=1'b0;\n""".format(i))
file.write('          end\n')
file.write('      end\n')
file.write('          //////////////////////////////// shift window m2 /////////////////////////////////\n')
file.write('      if(rst_shift_m2==0)begin\n')
file.write('          case(state_shift_m2)\n')
file.write('              0:begin\n')
file.write('                  if(en_shift_m2) state_shift_m2=2; else state_shift_m2=0;\n')
file.write('              end\n')
file.write('              1:begin\n')
file.write('                  if(done_mk_m2) state_shift_m2=0;\n')
file.write('                  else if(')
for i in range(1,FILTERBATCH_C2+1):
    if(i==FILTERBATCH_C2):
        file.write('done_mk_m2_row_ch{}'.format(i))
    else:
        file.write('done_mk_m2_row_ch{} && '.format(i))
file.write(') state_shift_m2=0;\n')
file.write('                  else state_shift_m2=1;\n')
file.write('              end\n')
file.write('              2:begin\n')
file.write('                  if(!done_mk_m2 && ')
for i in range(1,FILTERBATCH_C2+1):
    if(i==FILTERBATCH_C2):
        file.write('!done_mk_m2_row_ch{}'.format(i))
    else:
        file.write('!done_mk_m2_row_ch{} && '.format(i))
file.write(') state_shift_m2=1; else state_shift_m2=2;\n')
file.write('              end\n')
file.write('          endcase\n')
file.write('      end\n')
file.write('          /////////////////////////////// maxpool kernel m2 ///////////////////////////////\n')
file.write('      if(rst_mk_m2)begin\n')
file.write('          count_ld_mk_m2=0;\n')
file.write('          done_load_mk_m2=0;\n')
file.write('      end\n')
file.write('      else if(en_mk_m2 && !done_load_mk_m2) begin\n')
file.write('          if(count_ld_mk_m2<3)begin\n')
for i in range(1,FILTERBATCH_C2+1):
    file.write("""              wr_en_buf_1_c2_ch{}=1'b0;\n""".format(i))
for i in range(1,FILTERBATCH_C2+1):
    file.write("""              oe_buf_1_c2_ch{}=1'b1;\n""".format(i))
for i in range(1,FILTERBATCH_C2+1):   
    file.write('              addr_buf_1_c2_ch{} = start_addr_mk_m2+count_ld_mk_m2;\n'.format(i))
file.write('              count_ld_mk_m2 = count_ld_mk_m2+1;\n')
file.write('              done_load_mk_m2=0;\n')
file.write('          end\n')
file.write('          else if(count_ld_mk_m2<6)begin\n')
for i in range(1,FILTERBATCH_C2+1): 
    file.write("""              wr_en_buf_1_c2_ch{}=1'b0;\n""".format(i))
for i in range(1,FILTERBATCH_C2+1): 
    file.write("""              oe_buf_1_c2_ch{}=1'b1;\n""".format(i))
for i in range(1,FILTERBATCH_C2+1): 
    file.write('              addr_buf_1_c2_ch{} = start_addr_mk_m2+count_ld_mk_m2+8;\n'.format(i))
file.write('              count_ld_mk_m2 = count_ld_mk_m2+1;\n')
file.write('              done_load_mk_m1=0;\n')
file.write('          end\n')
file.write('          else if(count_ld_mk_m2<9)begin\n')
for i in range(1,FILTERBATCH_C2+1): 
    file.write("""              wr_en_buf_1_c2_ch{}=1'b0;\n""".format(i))
for i in range(1,FILTERBATCH_C2+1): 
    file.write("""              oe_buf_1_c2_ch{}=1'b1;\n""".format(i))
for i in range(1,FILTERBATCH_C2+1):
    file.write('              addr_buf_1_c2_ch{} = start_addr_mk_m2+count_ld_mk_m2+16;\n'.format(i))
file.write('              count_ld_mk_m2 = count_ld_mk_m2+1;\n')
file.write('              done_load_mk_m1=0;\n')
file.write('          end\n')
file.write('          else if(count_ld_mk_m2==9)begin\n')
file.write('              count_ld_mk_m2=count_ld_mk_m2+1;\n')
file.write('              done_load_mk_m2=0;\n')
file.write('          end\n')
file.write('          else begin\n')
file.write("""              count_ld_mk_m2=10'hX;\n""")
file.write("""              done_load_mk_m2=1'b1;\n""")
file.write('          end\n')
file.write('      end\n')
file.write('      if(rst_mk_m2)begin\n')
file.write("""          done_mk_m2=1'b0;\n""")
for i in range(1,FILTERBATCH_C2+1):
    file.write('          result_temp_mk_m2_ch{}=0;\n'.format(i))
file.write('          k=0;\n')
for i in range(1,FILTERBATCH_C2+1):
    file.write('          out_temp_mk_m2_ch{}=0;\n'.format(i))
file.write('      end\n')
file.write('      else begin\n')
file.write('          if(en_mk_m2==1 && done_load_mk_m2) begin\n')
file.write('              for(k=0; k<9; k=k+1)begin\n')
for i in range(1,FILTERBATCH_C2+1):
    file.write('                  if(element_mk_m2_ch{}[k]>out_temp_mk_m2_ch{})begin\n'.format(i,i))
    file.write('                      out_temp_mk_m2_ch{}=element_mk_m2_ch{}[k];\n'.format(i,i))
    file.write('                  end\n')
file.write('              end\n')
for i in range(1,FILTERBATCH_C2+1):
    file.write('              result_temp_mk_m2_ch{}=out_temp_mk_m2_ch{};\n'.format(i,i))
file.write("""              done_mk_m2=1'b1;\n""")
file.write('          end\n')
file.write('      end\n')
file.write('          ////////////////////////////////start of dense 1 always block /////////////////////////////////\n')
file.write('      if(rst_d1)begin\n')
file.write('          count_ld_d1=0;\n')
file.write('          done_load_d1=0;\n')
file.write('      end\n')
file.write('      else if(en_d1 && !done_load_d1) begin\n')
file.write('          if(count_ld_d1<10)begin\n')
file.write('              addr_d1 = OFFSET_D1_B+count_ld_d1;\n')
file.write('              count_ld_d1 = count_ld_d1+1;\n')
file.write('              done_load_d1=0;\n')
file.write('          end\n')
file.write('          else if(count_ld_d1==10)begin\n')
file.write('              done_load_d1=0;\n')
file.write('              count_ld_d1 = count_ld_d1+1;\n')
file.write('          end\n')
file.write('          else begin\n')
file.write("""              count_ld_d1=11'hX;\n""")
file.write("""              done_load_d1=1'b1;\n""")
file.write('          end\n')
file.write('      end\n')
file.write('      if(rst_d1==0 && done_load_d1)begin\n')
file.write('          case(state_d1)\n')
file.write('              0:begin\n')
file.write('                  if(en_d1) state_d1=2; else state_d1=0;\n')
file.write('              end\n')
file.write('              1:begin\n')
file.write('                  if(done_nc_d1) state_d1=0; else state_d1=1;\n')
file.write('              end\n')
file.write('              2:begin\n')
file.write('                  if(!done_nc_d1) state_d1=1; else state_d1=2;\n')
file.write('              end\n')
file.write('          endcase\n')
file.write('      end\n')
file.write('          /////////////////////////////// neuron calculation ////////////////////////////////\n')
file.write('      if(rst_nc_d1)begin\n')
file.write('          count_ld_nc_d1=0;\n')
file.write('          done_load_nc_d1=0;\n')
file.write('      end\n')
file.write('      else if(en_nc_d1 && !done_load_nc_d1) begin\n')
for i in range(1,FILTERBATCH_C2+1):
    if(i==1):
        file.write('          if(count_ld_nc_d1<{})begin\n'.format(i*NEURONS_D1))
        file.write('              addr_d1 = OFFSET_D1_W+count_ld_nc_d1*{}+weight_select_d1;\n'.format((FILTERBATCH_C2*25)))
        file.write('              count_ld_nc_d1 = count_ld_nc_d1+1;\n')
        file.write('              done_load_nc_d1=0;\n')
        file.write('          end\n')
    else:
        file.write('          else if(count_ld_nc_d1<{})begin\n'.format(i*NEURONS_D1))
        file.write('              addr_d1 = OFFSET_D1_W+(count_ld_nc_d1-{})*{}+{}+weight_select_d1;\n'.format(((i-1)*NEURONS_D1),(FILTERBATCH_C2*25),((i-1)*25)))
        file.write('              count_ld_nc_d1 = count_ld_nc_d1+1;\n')
        file.write('              done_load_nc_d1=0;\n')
        file.write('          end\n')
file.write('          else if(count_ld_nc_d1=={})begin\n'.format(FILTERBATCH_C2*NEURONS_D1))
for i in range(1,FILTERBATCH_C2+1):
    file.write("""              wr_en_buf_1_m2_ch{}=1'b0;\n""".format(i))
for i in range(1,FILTERBATCH_C2+1):
    file.write("""              oe_buf_1_m2_ch{}=1'b1;\n""".format(i))
for i in range(1,FILTERBATCH_C2+1):
    file.write('              addr_buf_1_m2_ch{}=weight_select_d1;\n'.format(i))
file.write('              count_ld_nc_d1 = count_ld_nc_d1+1;\n')
file.write('              done_load_nc_d1=0;\n')
file.write('          end\n')
file.write('          else if(count_ld_nc_d1=={})begin\n'.format(FILTERBATCH_C2*NEURONS_D1+1))
file.write('              count_ld_nc_d1 = count_ld_nc_d1+1;\n')
file.write('              done_load_nc_d1=0;\n')
file.write('          end\n')
file.write('          else begin\n')
file.write("""              oe=1'b0;\n""")
file.write("""              count_ld_nc_d1=11'hX;\n""")
file.write("""              done_load_nc_d1=1'b1;\n""")
file.write('          end\n')
file.write('      end\n')
file.write('      if(rst_nc_d1==0 && done_load_nc_d1) begin\n')
file.write('          case(state_nc_d1)\n')
file.write('              0:begin\n')
file.write('                  if(en_nc_d1 && done_load_nc_d1) state_nc_d1=2; else state_nc_d1=0;\n')
file.write('              end\n')
file.write('              1:begin\n')
file.write('                  if(')
for i in range(1,FILTERBATCH_C2+1):
    if(i==FILTERBATCH_C2):
        file.write('done_m_nc_d1_ch{}'.format(i))
    else:
        file.write('done_m_nc_d1_ch{} && '.format(i))
file.write(') state_nc_d1=0; else state_nc_d1=1;\n')
file.write('              end\n')
file.write('              2:begin\n')
file.write('                  if(')
for i in range(1,FILTERBATCH_C2+1):
    if(i==FILTERBATCH_C2):
        file.write('!done_m_nc_d1_ch{}'.format(i))
    else:
        file.write('!done_m_nc_d1_ch{} && '.format(i))
file.write(') state_nc_d1=1; else state_nc_d1=2;\n')
file.write('              end\n')
file.write('          endcase\n')
file.write('      end\n')
file.write('          ///////////////////////////////end of dense 1 always block //////////////////////////////\n')
file.write('          ////////////////////////////////// soft max /////////////////////////////////\n')
file.write('      if(en_sm==1) begin\n')
file.write('          values[0]<=fc_out[0:31];\n')
file.write('          values[1]<=fc_out[32:63];\n')
file.write('          values[2]<=fc_out[64:95];\n')
file.write('          values[3]<=fc_out[96:127];\n')
file.write('          values[4]<=fc_out[128:159];\n')
file.write('          values[5]<=fc_out[160:191];\n')
file.write('          values[6]<=fc_out[192:223];\n')
file.write('          values[7]<=fc_out[224:255];\n')
file.write('          values[8]<=fc_out[256:287];\n')
file.write('          values[9]<=fc_out[288:319];\n')
file.write('          for(i=0; i<10; i=i+1)begin\n')
file.write('              if(values[i]>max)begin\n')
file.write('                  max=values[i];\n')
file.write('                  temp=i;\n')
file.write('              end\n')
file.write('          end\n')
file.write('      end\n')
file.write('      else begin\n')
file.write('          i=0;\n')
file.write('          temp=0;\n')
file.write('      end\n')
file.write('  end\n')
file.write('          ////////////////////////////////// C1 weight and bias load /////////////////////////////////////\n')
file.write('  always@(count_ld_shift_c1)begin\n')
for i in range(1,FILTERBATCH_C1+1):
    if(i==1):
        file.write('      if(count_ld_shift_c1<{})\n'.format(i*KERNELWIDTH_C1*KERNELHEIGHT_C1+2))
        file.write('          W_shift_c1_ch{}={{W_shift_c1_ch{}[{}:{}],dout}};\n'.format(i,i,(BITWIDTH_W),(BITWIDTH_W*KERNELWIDTH_C1*KERNELHEIGHT_C1-1)))
    else:
        file.write('      else if(count_ld_shift_c1<{})\n'.format(i*KERNELWIDTH_C1*KERNELHEIGHT_C1+2))
        file.write('          W_shift_c1_ch{}={{W_shift_c1_ch{}[{}:{}],dout}};\n'.format(i,i,(BITWIDTH_W),(BITWIDTH_W*KERNELWIDTH_C1*KERNELHEIGHT_C1-1)))

for i in range(1,FILTERBATCH_C1+1):
    file.write('      else if(count_ld_shift_c1=={})\n'.format(FILTERBATCH_C1*KERNELWIDTH_C1*KERNELHEIGHT_C1+i+1))
    file.write('          bias_shift_c1_ch{}=dout;\n'.format(i))
file.write('  end\n')
file.write('      ////////////////////////////////// c1 data load ///////////////////////////////////\n')
file.write('  always@(count_ld_conv_c1)begin\n')
file.write('      if(count_ld_conv_c1<{})\n'.format(KERNELWIDTH_C1*KERNELHEIGHT_C1+2))
file.write('          X_conv_c1={{X_conv_c1[{}:{}],dout}};\n'.format((BITWIDTH_IN),(BITWIDTH_IN*KERNELWIDTH_C1*KERNELHEIGHT_C1-1)))
file.write('  end\n')
file.write('      ////////////////////////////////// m1 data load /////////////////////////////////\n')
file.write('  always@(count_ld_mk_m1)begin\n')
file.write('      if(count_ld_mk_m1<{})begin\n'.format(KERNELWIDTH_POOL_M1*KERNELHEIGHT_POOL_M1+2))
for i in range(1,FILTERBATCH_C1+1):
    file.write('          X_mk_m1_ch{}={{X_mk_m1_ch{}[{}:{}],dout_buf_1_c1_ch{}}};\n'.format(i,i,(BITWIDTH_M1),(BITWIDTH_M1*KERNELWIDTH_POOL_M1*KERNELHEIGHT_POOL_M1-1),i))
file.write('      end\n')
file.write('  end\n')
file.write('      ////////////////////////////////// c2 weight and bias load//////////////////////////////////\n')
file.write('  always@(count_ld_shift_c2d)begin\n')
for i in range(1,FILTERBATCH_C2+1):
    for j in range(1,FILTERBATCH_C1+1):
        if((FILTERBATCH_C1*(i-1)+j)==1):
            file.write('      if(count_ld_shift_c2d<{})\n'.format((FILTERBATCH_C1*(i-1)+j)*KERNELWIDTH_C1*KERNELHEIGHT_C1+2))
            file.write('          W_shift_c2d_w{}{}={{W_shift_c2d_w{}{}[8:71],dout_c2}};\n'.format(i,j,i,j,(BITWIDTH_W),(BITWIDTH_W*KERNELWIDTH_C2*KERNELHEIGHT_C2-1)))
        else:
            file.write('      else if(count_ld_shift_c2d<{})\n'.format((FILTERBATCH_C1*(i-1)+j)*KERNELWIDTH_C1*KERNELHEIGHT_C1+2))
            file.write('          W_shift_c2d_w{}{}={{W_shift_c2d_w{}{}[8:71],dout_c2}};\n'.format(i,j,i,j,(BITWIDTH_W),(BITWIDTH_W*KERNELWIDTH_C2*KERNELHEIGHT_C2-1)))
for i in range(1,FILTERBATCH_C2+1):
    file.write('      else if(count_ld_shift_c2d=={})\n'.format(FILTERBATCH_C1*FILTERBATCH_C2*KERNELWIDTH_C2*KERNELHEIGHT_C2+i+1))
    file.write('          bias_c2d_ch{}=dout_c2;\n'.format(i))
file.write('  end\n')

file.write('      ////////////////////////////////c2 data load///////////////////////////////////////\n')
file.write('  always@(count_ld_conv_c2)begin\n')
file.write('      if(count_ld_conv_c2<{})begin\n'.format(KERNELWIDTH_C2*KERNELHEIGHT_C2+2))
for i in range(1,FILTERBATCH_C1+1):
    file.write('          X_conv_c2_ch_in{}={{X_conv_c2_ch_in{}[{}:{}],dout_buf_1_m1_ch{}}};\n'.format(i,i,(BITWIDTH_C2),(BITWIDTH_C2*KERNELWIDTH_C2*KERNELHEIGHT_C2-1),i))
file.write('      end\n')
file.write('  end\n')
file.write('      /////////////////////////////////// m2 data load ///////////////////////////////////////\n')
file.write('  always@(count_ld_mk_m2)begin\n')
file.write('      if(count_ld_mk_m2<{})begin\n'.format(KERNELWIDTH_POOL_M2*KERNELHEIGHT_POOL_M2+2))
for i in range(1,FILTERBATCH_C2+1):
    file.write('          X_mk_m2_ch{}={{X_mk_m2_ch{}[{}:{}],dout_buf_1_c2_ch{}}};\n'.format(i,i,(BITWIDTH_M2),(BITWIDTH_M2*KERNELWIDTH_POOL_M2*KERNELHEIGHT_POOL_M2-1),i))
file.write('      end\n')
file.write('  end\n')
file.write('      /////////////////////////////////// d1 weight and bias load /////////////////////////////////////\n')
file.write('  always@(count_ld_d1)begin\n')
file.write('      if(count_ld_d1<{})\n'.format(NEURONS_D1+2))
file.write('          bias_d1={{bias_d1[{}:{}], dout_d1}};\n'.format((BITWIDTH_B),(BITWIDTH_B*NEURONS_D1-1)))
file.write('  end\n')
file.write('  \n')
file.write('  always@(count_ld_nc_d1)begin\n')
for i in range(1,FILTERBATCH_C2+1):
    if(i==1):
        file.write('      if(count_ld_nc_d1<{})\n'.format(i*NEURONS_D1+2))
        file.write('          w_neuron_nc_d1_ch{}={{w_neuron_nc_d1_ch{}[{}:{}], dout_d1}};\n'.format(i,i,(BITWIDTH_W),(BITWIDTH_B*NEURONS_D1-1)))
    else:
        file.write('      else if(count_ld_nc_d1<{})\n'.format(i*NEURONS_D1+2))
        file.write('          w_neuron_nc_d1_ch{}={{w_neuron_nc_d1_ch{}[{}:{}], dout_d1}};\n'.format(i,i,(BITWIDTH_W),(BITWIDTH_B*NEURONS_D1-1)))
file.write('      ////////////////////////////////////// d1 data load /////////////////////////////////////////\n')
file.write('      else if(count_ld_nc_d1<{})begin\n'.format(FILTERBATCH_C2*NEURONS_D1+3))
for i in range(1,FILTERBATCH_C2+1):
    file.write('          X_nc_d1_ch{}=dout_buf_1_m2_ch{};\n'.format(i,i))
file.write('      end\n')
file.write('  end\n')
file.write('      /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n')
file.write('      /////////////////////////////////////////////////////Convolution Layer 1/////////////////////////////////////////////////\n')
file.write('      /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n')
file.write('  always@(posedge done_shift_c1 or posedge rst_c1)begin\n')
file.write('      if(rst_c1)begin\n')
file.write('          count_c1=0;\n')
file.write('      end\n')
file.write('      else begin\n')
file.write('          if(count_c1<1)begin\n')
file.write('              count_c1=count_c1+1;\n')
file.write('          end\n')
file.write('          else\n')
file.write("""              count_c1=2'hX;\n""")
file.write('      end\n')
file.write('  end\n')
file.write('      ////////////////////////////////////// C1 //////////////////////////////////////\n')
file.write('  always@(*)begin\n')
file.write('      case(state_c1)\n')
file.write('          0:begin\n')
file.write('              en_shift_c1=0;\n')
file.write('              rst_shift_c1=1;\n')
file.write('          end\n')
file.write('          1:begin\n')
file.write('              en_shift_c1=1;\n')
file.write('              rst_shift_c1=0;\n')
file.write('          end\n')
file.write('          2:begin\n')
file.write('              en_shift_c1=0;\n')
file.write('              rst_shift_c1=1;\n')
file.write('          end\n')
file.write('          default:begin\n')
file.write('              en_shift_c1=0;\n')
file.write('              rst_shift_c1=1;\n')
file.write('          end\n')
file.write('      endcase\n')
file.write('      if(count_c1==1)begin\n')
file.write("""          done_c1=1'b1;\n""")
file.write('      end\n')
file.write('      else begin\n')
file.write("""          done_c1=1'b0;\n""")
file.write('      end\n')
file.write('  end\n')
file.write('      //////////////////////////////////shift c1//////////////////////////////////////\n')
file.write('  always@(posedge done_conv_c1 or posedge rst_shift_c1)begin\n')
file.write('      if(rst_shift_c1)begin\n')
file.write('          count_shift_c1=0;\n')
for i in range(1,FILTERBATCH_C1+1):
    file.write('          din_buf_0_c1_ch{}=0;\n'.format(i))
file.write('      end\n')
file.write('      else begin\n')
file.write('          if(count_shift_c1<676)begin\n'.format(DATAWIDTH_IN*DATAWIDTH_IN))
file.write('              count_shift_c1=count_shift_c1+1;\n')
for i in range(1,FILTERBATCH_C1+1):
    file.write('              din_buf_0_c1_ch{}=result_temp_conv_c1_ch{};\n'.format(i,i))
file.write('          end\n')
file.write('          else\n')
file.write("""              count_shift_c1=10'hX;\n""")
file.write('      end\n')
file.write('  end\n')
file.write('  \n')
file.write('  always@(*)begin\n')
file.write('      case(state_shift_c1)\n')
file.write('          0:begin\n')
file.write('              en_conv_c1=0;\n')
file.write('              rst_conv_c1=1;\n')
file.write('              window_select_c1=0;\n')
file.write('          end\n')
file.write('          1:begin\n')
file.write('              en_conv_c1=1;\n')
file.write('              rst_conv_c1=0;\n')
file.write('              window_select_c1=count_shift_c1;\n')
file.write('          end\n')
file.write('          2:begin\n')
file.write('              en_conv_c1=0;\n')
file.write('              rst_conv_c1=1;\n')
file.write('              window_select_c1=0;\n')
file.write('          end\n')
file.write('          default:begin\n')
file.write('              en_conv_c1=0;\n')
file.write('              rst_conv_c1=1;\n')
file.write('              window_select_c1=0;\n')
file.write('          end\n')
file.write('      endcase\n')
file.write('      if(count_shift_c1==676)begin\n')
file.write("""          done_shift_c1=1'b1;\n""")
file.write('      end\n')
file.write('      else begin\n')
file.write("""          done_shift_c1=1'b0;\n""")
file.write('      end\n')
file.write('  end\n')
file.write('  \n')
for i in range(KERNELWIDTH_C1*KERNELHEIGHT_C1):
    file.write('  assign mem_x_conv_c1[{}]= X_conv_c1[{}:{}];\n'.format(i,(i*BITWIDTH_IN),(i*BITWIDTH_IN+BITWIDTH_IN-1)))
file.write('  \n')
for i in range(1,FILTERBATCH_C1+1):
    for j in range(KERNELWIDTH_C1*KERNELHEIGHT_C1):
        file.write('  assign mem_w_conv_c1_ch{}[{}]= W_shift_c1_ch{}[{}:{}];\n'.format(i,j,i,(j*BITWIDTH_W),(j*BITWIDTH_W+BITWIDTH_W-1)))
    file.write('  \n')
file.write('  always@(posedge (')
for i in range(1,FILTERBATCH_C1+1):
    if(i==FILTERBATCH_C1):
        file.write('done_m_c1_ch{}'.format(i))
    else:
        file.write('done_m_c1_ch{} && '.format(i))
file.write(') or posedge rst_conv_c1)begin\n')
file.write('      if(rst_conv_c1)begin\n')
file.write('          count_conv_c1 = 0;\n')
for i in range(1,FILTERBATCH_C1+1):
    file.write('          buffer_conv_c1_ch{} = 0;\n'.format(i))
file.write('      end\n')
file.write('      else begin\n')
file.write('          if(count_conv_c1<9)begin\n')
file.write('              count_conv_c1=count_conv_c1+1;\n')
for i in range(1,FILTERBATCH_C1+1):
    file.write('              buffer_conv_c1_ch{}=buffer_conv_c1_ch{}+result_temp_m_c1_ch{};\n'.format(i,i,i))
file.write('          end\n')
file.write('          else begin\n')
file.write("""              count_conv_c1=4'hx;\n""")
file.write('          end\n')
file.write('      end\n')
file.write('  end\n')
file.write('  \n')
file.write('  always@(*)begin\n')
file.write('      case(state_conv_c1)\n')
file.write('          0:begin\n')
file.write('              en_m_c1=0;\n')
file.write('              rst_m_c1=1;\n')
file.write('              x_in_m_c1=0;\n')
for i in range(1,FILTERBATCH_C1+1):
    file.write('              w_in_m_c1_ch{}=0;\n'.format(i))
file.write('          end\n')
file.write('          1:begin\n')
file.write('              en_m_c1=1;\n')
file.write('              rst_m_c1=0;\n')
file.write('              x_in_m_c1=mem_x_conv_c1[count_conv_c1];\n')
for i in range(1,FILTERBATCH_C1+1):
    file.write('              w_in_m_c1_ch{}=mem_w_conv_c1_ch{}[count_conv_c1];\n'.format(i,i))
file.write('          end\n')
file.write('          2:begin\n')
file.write('              en_m_c1=0;\n')
file.write('              rst_m_c1=1;\n')
file.write('              x_in_m_c1=0;\n')
for i in range(1,FILTERBATCH_C1+1):
    file.write('              w_in_m_c1_ch{}=0;\n'.format(i))
file.write('          end\n')
file.write('          default:begin\n')
file.write('              en_m_c1=0;\n')
file.write('              rst_m_c1=1;\n')
file.write('              x_in_m_c1=0;\n')
for i in range(1,FILTERBATCH_C1+1):
    file.write('              w_in_m_c1_ch{}=0;\n'.format(i))
file.write('          end\n')
file.write('      endcase\n')
file.write('      if(count_conv_c1=={})begin\n'.format(KERNELWIDTH_C1*KERNELHEIGHT_C1))
for i in range(1,FILTERBATCH_C1+1):
    file.write('          result_final_temp_conv_c1_ch{}=buffer_conv_c1_ch{}+bias_shift_c1_ch{};\n'.format(i,i,i))
    file.write('          result_final_temp_conv_c1_ch{}=result_final_temp_conv_c1_ch{}>>>4;\n'.format(i,i))
    file.write('          result_temp_conv_c1_ch{}=result_final_temp_conv_c1_ch{}[{}:0];\n'.format(i,i,(BITWIDTH_C2-1)))
    file.write("""          result_temp_conv_c1_ch{} = result_temp_conv_c1_ch{} > THRESHOLD ? result_temp_conv_c1_ch{}: {}'b0;\n""".format(i,i,i,(BITWIDTH_C2)))
    file.write('  \n')
file.write("""          done_conv_c1=1'b1;\n""")
file.write('      end\n')
file.write('      else begin\n')
for i in range(1,FILTERBATCH_C1+1):
    file.write('          result_temp_conv_c1_ch{}=0;\n'.format(i))
file.write("""          done_conv_c1=1'b0;\n""")
file.write('      end\n')
file.write('  end\n')
file.write('  \n')
for i in range(1,FILTERBATCH_C1+1):
    file.write('  element_multiplier_c1#(BITWIDTH_IN,BITWIDTH_W,BITWIDTH_C1) multiply_ch{}(\n'.format(i))
    file.write('  .clk(clk),\n')
    file.write('  .in_ready(en_m_c1),\n')
    file.write('  .rst(rst_m_c1),\n')
    file.write('  .X_element(x_in_m_c1),\n')
    file.write('  .W_element(w_in_m_c1_ch{}),\n'.format(i))
    file.write('  .Z_element(result_temp_m_c1_ch{}),\n'.format(i))
    file.write('  .done(done_m_c1_ch{})\n'.format(i))
    file.write('  );\n')
    file.write('  \n')
file.write('      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n')
file.write('      //////////////////////////////////////////////////////Maxpool Layer 1///////////////////////////////////////////////////////\n')
file.write('      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n')
file.write('  \n')
file.write('  assign start_addr_mk_m1 = window_select_m1*{}+(window_select_m1/{})*{};\n'.format((STRIDEWIDTH_POOL_M1),(int(DATAWIDTH_M1/2)),(DATAWIDTH_M1)))
file.write('  \n')
file.write('      ////////////////////////maxpool kernel/////////////////////////\n')
for i in range(1,FILTERBATCH_C1+1):
    for j in range(KERNELWIDTH_POOL_M1*KERNELHEIGHT_POOL_M1):
        file.write('  assign element_mk_m1_ch{}[{}]=X_mk_m1_ch{}[{}:{}];\n'.format(i,j,i,(j*BITWIDTH_M1),(j*BITWIDTH_M1+BITWIDTH_M1-1)))
    file.write('  \n')
file.write('  always@(posedge done_shift_m1 or posedge rst_m1)begin\n')
file.write('      if(rst_m1)begin\n')
file.write('          count_m1=0;\n')
file.write('      end\n')
file.write('      else begin\n')
file.write('          if(count_m1<1)begin\n')
file.write('              count_m1=count_m1+1;\n')
file.write('          end\n')
file.write('          else\n')
file.write("""              count_m1=2'hX;\n""")
file.write('      end\n')
file.write('  end\n')
file.write('  \n')
file.write('  always@(*)begin\n')
file.write('       case(state_m1)\n')
file.write('          0:begin\n')
file.write('              en_shift_m1=0;\n')
file.write('              rst_shift_m1=1;\n')
file.write('          end\n')
file.write('          1:begin\n')
file.write('              en_shift_m1=1;\n')
file.write('              rst_shift_m1=0;\n')
file.write('          end\n')
file.write('          2:begin\n')
file.write('              en_shift_m1=0;\n')
file.write('              rst_shift_m1=1;\n')
file.write('          end\n')
file.write('          3:begin\n')
file.write('              en_shift_m1=0;\n')
file.write('              rst_shift_m1=0;\n')
file.write('          end\n')
file.write('          default:begin\n')
file.write('              en_shift_m1=0;\n')
file.write('              rst_shift_m1=1;\n')
file.write('          end\n')
file.write('      endcase\n')
file.write('      if(count_m1==1)begin\n')
file.write("""          done_m1=1'b1;\n""")
file.write('      end\n')
file.write('      else begin\n')
file.write("""          done_m1=1'b0;\n""")
file.write('      end\n')
file.write('  end\n')
file.write('  \n')
file.write('      ///////////////////////////////////shift m1/////////////////////////////////////\n')
file.write('  always@(posedge done_mk_m1_ch1 or posedge rst_shift_m1)begin\n')
file.write('      if(rst_shift_m1)begin\n')
file.write('          count_shift_m1=0;\n')
for i in range(1,FILTERBATCH_C1+1):
    file.write('          din_buf_0_m1_ch{}=0;\n'.format(i))
file.write('          n=1;\n')
file.write('      end\n')
file.write('      else begin\n')
file.write('          if(count_shift_m1<{})begin\n'.format(DATAWIDTH_C2*DATAHEIGHT_C2))
file.write('              if(count_shift_m1==n*{}-1 && '.format(DATAWIDTH_C2))
for i in range(1,FILTERBATCH_C1+1):
    if(i==FILTERBATCH_C1):
        file.write('!done_mk_m1_row_ch{}'.format(i))
    else:
        file.write('!done_mk_m1_row_ch{} && '.format(i))
file.write(')begin\n')
file.write('                  n=n+1;\n')
for i in range(1,FILTERBATCH_C1+1):
    file.write("""                  done_mk_m1_row_ch{}=1'b1;\n""".format(i))
file.write('              end\n')
file.write('              else begin\n')
file.write('                  count_shift_m1=count_shift_m1+1;\n')
for i in range(1,FILTERBATCH_C1+1):
    file.write('                  din_buf_0_m1_ch{}=result_temp_mk_m1_ch{};\n'.format(i,i))
file.write('              end\n')
file.write('          end\n')
file.write('          else\n')
file.write("""              count_shift_m1=8'hX;\n""")
file.write('      end\n')
file.write('  end\n')
file.write('  \n')
file.write('  always@(*)begin\n')
file.write('      case(state_shift_m1)\n')
file.write('          0:begin\n')
file.write('              en_mk_m1=0;\n')
file.write('              rst_mk_m1=1;\n')
file.write('              window_select_m1=0;\n')
file.write('          end\n')
file.write('          1:begin\n')
file.write('              en_mk_m1=1;\n')
file.write('              rst_mk_m1=0;\n')
file.write('              window_select_m1=count_shift_m1;\n')
file.write('          end\n')
file.write('          2:begin\n')
file.write('              en_mk_m1=0;\n')
file.write('              rst_mk_m1=1;\n')
file.write('              window_select_m1=0;\n')
file.write('          end\n')
file.write('          default:begin\n')
file.write('              en_mk_m1=0;\n')
file.write('              rst_mk_m1=1;\n')
file.write('              window_select_m1=0;\n')
file.write('          end\n')
file.write('      endcase\n')
file.write('      if(count_shift_m1=={})begin\n'.format(DATAWIDTH_C2*DATAHEIGHT_C2))
file.write("""          done_shift_m1=1'b1;\n""")
file.write('      end\n')
file.write('      else begin\n')
file.write("""          done_shift_m1=1'b0;\n""")
file.write('      end\n')
file.write('  end\n')
file.write('  \n')
file.write('      ////////////////////////////////////// maxpool kernel /////////////////////////////////////////\n')
file.write('  always@(posedge rst_mk_m1)begin\n')
for i in range(1,FILTERBATCH_C1+1):
    file.write('      done_mk_m1_row_ch{}=0;\n'.format(i))
file.write('  end\n')
file.write('  \n')
file.write('      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n')
file.write('      //////////////////////////////////////////////////////Convolution Layer 2///////////////////////////////////////////////////\n')
file.write('      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n')
file.write('  \n')
file.write('      ///////////////////////////////////////////////////////  c2d  ///////////////////////////////////////////////////////\n')
file.write('  always@(posedge done_shift_c2d or posedge rst_c2)begin\n')
file.write('      if(rst_c2)begin\n')
file.write('          count_c2d=0;\n')
file.write('      end\n')
file.write('      else begin\n')
file.write('          if(count_c2d<1)begin\n')
file.write('              count_c2d=count_c2d+1;\n')
file.write('          end\n')
file.write('          else\n')
file.write("""              count_c2d=2'hX;\n""")
file.write('      end\n')
file.write('  end\n')
file.write('  \n')
file.write('  always@(*)begin\n')
file.write('      case(state_c2d)\n')
file.write('          0:begin\n')
file.write('              en_shift_c2d=0;\n')
file.write('              rst_shift_c2d=1;\n')
file.write('          end\n')
file.write('          1:begin\n')
file.write('              en_shift_c2d=1;\n')
file.write('              rst_shift_c2d=0;\n')
file.write('          end\n')
file.write('          2:begin\n')
file.write('              en_shift_c2d=0;\n')
file.write('              rst_shift_c2d=1;\n')
file.write('          end\n')
file.write('          3:begin\n')
file.write('              en_shift_c2d=0;\n')
file.write('              rst_shift_c2d=0;\n')
file.write('          end\n')
file.write('          default:begin\n')
file.write('              en_shift_c2d=0;\n')
file.write('              rst_shift_c2d=1;\n')
file.write('          end\n')
file.write('      endcase\n')
file.write('      if(count_c2d==1)\n')
file.write("""          done_c2=1'b1;\n""")
file.write('      else \n')
file.write("""          done_c2=1'b0;\n""")
file.write('  end\n')
file.write('  \n')
file.write('      ////////////////////////////////////// adder function /////////////////////////////////////////\n')
file.write('  function signed [0:{}] adder;\n'.format(BITWIDTH_M2-1))
file.write('      input signed [0:{}]B;\n'.format(BITWIDTH_M2-1))
file.write('      reg signed [0:{}] add_temp;\n'.format(2*BITWIDTH_C2-1))
file.write('      input signed [0:{}]'.format(BITWIDTH_M2-1))
for i in range(1,FILTERBATCH_C1+1):
    if(i==FILTERBATCH_C1):
        file.write('Z{};\n'.format(i))
    else:
        file.write('Z{},'.format(i))
file.write('      input signed [0:15] THRESHOLD;\n')
file.write('      begin\n')
file.write('          add_temp = B+')
for i in range(1,FILTERBATCH_C1+1):
    if(i==FILTERBATCH_C1):
        file.write('Z{};\n'.format(i))
    else:
        file.write('Z{}+'.format(i))
file.write('          if(add_temp>32767 || add_temp<-32768)begin\n')
file.write('              if(add_temp>32767)\n')
file.write("""                  adder = {}'b0111111111111111;\n""".format(BITWIDTH_M2))
file.write('              else\n')
file.write("""                  adder = {}'b0000000000000000;//-ve values are made 0 as relu is integrated with this module\n""".format(BITWIDTH_M2))
file.write('          end\n')
file.write('          else begin\n')
file.write('              adder = add_temp[{}:{}];\n'.format((2*BITWIDTH_C2-BITWIDTH_M2),(2*BITWIDTH_C2-1)))
file.write('          end\n')
file.write("""          adder = adder > THRESHOLD ? adder: {}'d0;\n""".format(BITWIDTH_M2))
file.write('      end\n')
file.write('  endfunction\n')
file.write('  \n')
file.write('      //////////////////////////////////// shift window c2 ////////////////////////////////////////\n')
file.write('  always@(posedge done_ck_c2d or posedge rst_shift_c2d)begin\n')
file.write('      if(rst_shift_c2d)begin\n')
file.write('          count_shift_c2d=0;\n')
for i in range(1,FILTERBATCH_C2+1):
    file.write('          din_buf_0_c2_ch{}=0;\n'.format(i))
file.write('          m=1;\n')
file.write('      end\n')
file.write('      else begin\n')
file.write('          if(count_shift_c2d<{})begin\n'.format(DATAWIDTH_M2*DATAHEIGHT_M2))
file.write('              if(count_shift_c2d==m*{}-1 && '.format(DATAWIDTH_M2))
for i in range(1,FILTERBATCH_C2+1):
    if(i==FILTERBATCH_C2):
        file.write('!done_ck_c2d_row_ch{}'.format(i))
    else:
        file.write('!done_ck_c2d_row_ch{} && '.format(i))
file.write(')begin\n')
file.write('                  m=m+1;\n')
for i in range(1,FILTERBATCH_C2+1):
    file.write("""                  done_ck_c2d_row_ch{}=1'b1;\n""".format(i))
file.write('              end\n')
file.write('              else begin\n')
file.write('                  count_shift_c2d=count_shift_c2d+1;\n')
for i in range(1,FILTERBATCH_C2+1):
    file.write('                  din_buf_0_c2_ch{}=adder(bias_new_c2d_ch{},'.format(i,i))
    for j in range(1,FILTERBATCH_C1+1):
        if(j==FILTERBATCH_C1):
            file.write('result_temp_ck_c2d_in{}_w{}{}, THRESHOLD);\n'.format(j,i,j))
        else:
            file.write('result_temp_ck_c2d_in{}_w{}{}, '.format(j,i,j))
file.write('              end\n')
file.write('          end\n')
file.write('          else\n')
file.write("""              count_shift_c2d=7'hX;\n""")
file.write('      end\n')
file.write('  end\n')
file.write('  \n')
file.write('  always@(*)begin\n')
file.write('      case(state_shift_c2d)\n')
file.write('          0:begin\n')
file.write('              en_ck_c2d=0;\n')
file.write('              rst_ck_c2d=1;\n')
file.write('              window_select_c2=0;\n')
file.write('          end\n')
file.write('          1:begin\n')
file.write('              en_ck_c2d=1;\n')
file.write('              rst_ck_c2d=0;\n')
file.write('              window_select_c2=count_shift_c2d;\n')
file.write('          end\n')
file.write('          2:begin\n')
file.write('              en_ck_c2d=0;\n')
file.write('              rst_ck_c2d=1;\n')
file.write('              window_select_c2=0;\n')
file.write('          end\n')
file.write('          default:begin\n')
file.write('              en_ck_c2d=0;\n')
file.write('              rst_ck_c2d=1;\n')
file.write('              window_select_c2=0;\n')
file.write('          end\n')
file.write('      endcase\n')
file.write('      if(count_shift_c2d=={})\n'.format(DATAWIDTH_M2*DATAHEIGHT_M2))
file.write("""          done_shift_c2d=1'b1;\n""")
file.write('      else\n')
file.write("""          done_shift_c2d=1'b0;\n""")
file.write('  end\n')
file.write('  \n')
file.write('  always@(posedge rst_ck_c2d)begin\n')
for i in range(1,FILTERBATCH_C2+1):
    file.write('      done_ck_c2d_row_ch{}=0;\n'.format(i))
file.write('  end\n')
file.write('  \n')
for i in range(1,FILTERBATCH_C1+1):
    for j in range(KERNELWIDTH_C2*KERNELHEIGHT_C2):
        file.write('  assign mem_x_ck_c2d_ch_in{}[{}]= X_conv_c2_ch_in{}[{}:{}];\n'.format(i,j,i,(j*BITWIDTH_C2),(j*BITWIDTH_C2+BITWIDTH_C2-1)))
    file.write('  \n')
for i in range(1,FILTERBATCH_C2+1):
    for j in range(1,FILTERBATCH_C1+1):
        for k in range(KERNELWIDTH_C2*KERNELHEIGHT_C2):
            file.write('  assign mem_w_ck_c2d_w{}{}[{}]= W_shift_c2d_w{}{}[{}:{}];\n'.format(i,j,k,i,j,(k*BITWIDTH_W),(k*BITWIDTH_W+BITWIDTH_W-1)))
        file.write('  \n')
file.write('  always@(posedge (')
for i in range(1,FILTERBATCH_C2+1):
    for j in range(1,FILTERBATCH_C1+1):
        if((FILTERBATCH_C1*(i-1)+j)==(FILTERBATCH_C2*FILTERBATCH_C1)):
            file.write('done_m_c2d_in{}_w{}{}) or posedge rst_ck_c2d)begin\n'.format(j,i,j))
        else:
            file.write('done_m_c2d_in{}_w{}{} && '.format(j,i,j))
file.write('      if(rst_ck_c2d)begin\n')
file.write('          count_ck_c2d=0;\n')
for i in range(1,FILTERBATCH_C2+1):
    for j in range(1,FILTERBATCH_C1+1):
        file.write('          buffer_ck_c2d_in{}_w{}{}=0;\n'.format(j,i,j))
file.write('      end\n')
file.write('      else begin\n')
file.write('          if(count_ck_c2d<{})begin\n'.format(KERNELWIDTH_C2*KERNELHEIGHT_C2))
file.write('              count_ck_c2d=count_ck_c2d+1;\n')
for i in range(1,FILTERBATCH_C2+1):
    for j in range(1,FILTERBATCH_C1+1):
        file.write('              buffer_ck_c2d_in{}_w{}{}=buffer_ck_c2d_in{}_w{}{}+result_temp_m_c2d_in{}_w{}{};\n'.format(j,i,j,j,i,j,j,i,j))
file.write('          end\n')
file.write('          else begin\n')
file.write("""              count_ck_c2d=4'hX;\n""")
file.write('          end\n')
file.write('      end\n')
file.write('  end\n')
file.write('  \n')
file.write('  always@(*)begin\n')
file.write('      case(state_ck_c2d)\n')
file.write('          0:begin\n')
file.write('              en_m_c2d=0;\n')
file.write('              rst_m_c2d=1;\n')
for i in range(1,FILTERBATCH_C1+1):
    file.write('              x_in_m_c2d_ch_in{}=0;\n'.format(i))
for i in range(1,FILTERBATCH_C2+1):
    for j in range(1,FILTERBATCH_C1+1):
        file.write('              w_in_m_c2d_w{}{}=0;\n'.format(i,j))
file.write('          end\n')
file.write('          1: begin\n')
file.write('              en_m_c2d=1;\n')
file.write('              rst_m_c2d=0;\n')
for i in range(1,FILTERBATCH_C1+1):
    file.write('              x_in_m_c2d_ch_in{}=mem_x_ck_c2d_ch_in{}[count_ck_c2d];\n'.format(i,i))
for i in range(1,FILTERBATCH_C2+1):
    for j in range(1,FILTERBATCH_C1+1):
        file.write('              w_in_m_c2d_w{}{}=mem_w_ck_c2d_w{}{}[count_ck_c2d];\n'.format(i,j,i,j))
file.write('          end\n')
file.write('          2:begin\n')
file.write('              en_m_c2d=0;\n')
file.write('              rst_m_c2d=1;\n')
for i in range(1,FILTERBATCH_C1+1):
    file.write('              x_in_m_c2d_ch_in{}=0;\n'.format(i))
for i in range(1,FILTERBATCH_C2+1):
    for j in range(1,FILTERBATCH_C1+1):
        file.write('              w_in_m_c2d_w{}{}=0;\n'.format(i,j))
file.write('          end\n')
file.write('          default:begin\n')
file.write('              en_m_c2d=0;\n')
file.write('              rst_m_c2d=1;\n')
for i in range(1,FILTERBATCH_C1+1):
    file.write('              x_in_m_c2d_ch_in{}=0;\n'.format(i))
for i in range(1,FILTERBATCH_C2+1):
    for j in range(1,FILTERBATCH_C1+1):
        file.write('              w_in_m_c2d_w{}{}=0;\n'.format(i,j))
file.write('          end\n')
file.write('      endcase\n')
file.write('      if(count_ck_c2d=={})begin\n'.format(KERNELWIDTH_C2*KERNELHEIGHT_C2))
for i in range(1,FILTERBATCH_C2+1):
    for j in range(1,FILTERBATCH_C1+1):
        file.write('          result_final_temp_ck_c2d_in{}_w{}{}=buffer_ck_c2d_in{}_w{}{}>>>4;\n'.format(j,i,j,j,i,j))
file.write('  \n')
for i in range(1,FILTERBATCH_C2+1):
    for j in range(1,FILTERBATCH_C1+1):
        file.write('          if(result_final_temp_ck_c2d_in{}_w{}{}>32767 || result_final_temp_ck_c2d_in{}_w{}{}<-32768)begin\n'.format(j,i,j,j,i,j))       
        file.write('              if(result_final_temp_ck_c2d_in{}_w{}{}>32767)\n'.format(j,i,j))
        file.write("""                  result_temp_ck_c2d_in{}_w{}{} = 16'b0111111111111111;\n""".format(j,i,j))
        file.write('              else\n')
        file.write("""                  result_temp_ck_c2d_in{}_w{}{} = 16'b1000000000000000;\n""".format(j,i,j))
        file.write('          end\n')
        file.write('          else begin\n')
        file.write('              result_temp_ck_c2d_in{}_w{}{} = result_final_temp_ck_c2d_in{}_w{}{}[{}:0];\n'.format(j,i,j,j,i,j,(BITWIDTH_M2-1)))
        file.write('          end\n')
        file.write('  \n')

file.write("""          done_ck_c2d=1'b1;\n""")
file.write('      end\n')
file.write('      else begin\n')
for i in range(1,FILTERBATCH_C2+1):
    for j in range(1,FILTERBATCH_C1+1):
        file.write('          result_temp_ck_c2d_in{}_w{}{}=0;\n'.format(j,i,j))
file.write("""          done_ck_c2d=1'b0;\n""")
file.write('      end\n')
file.write('  end\n')
file.write('  \n')
for i in range(1,FILTERBATCH_C2+1):
    for j in range(1,FILTERBATCH_C1+1):
        file.write('  element_multiplier_c2#(BITWIDTH_M1,BITWIDTH_W,BITWIDTH_C2) multiply_c2_in{}_w{}{}(\n'.format(j,i,j))
        file.write('  .clk(clk),\n')
        file.write('  .in_ready(en_m_c2d),\n')
        file.write('  .rst(rst_m_c2d),\n')
        file.write('  .X_element(x_in_m_c2d_ch_in{}),\n'.format(j))
        file.write('  .W_element(w_in_m_c2d_w{}{}),\n'.format(i,j))
        file.write('  .Z_element(result_temp_m_c2d_in{}_w{}{}),\n'.format(j,i,j))
        file.write('  .done(done_m_c2d_in{}_w{}{})\n'.format(j,i,j))
        file.write('  );\n')
        file.write('  \n')

file.write('  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n')
file.write('  //////////////////////////////////////////////////////Maxpool Layer 2///////////////////////////////////////////////////////\n')
file.write('  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n')
file.write('  \n')
file.write('  assign start_addr_mk_m2=window_select_m2*{}+(window_select_m2/{})*12;\n'.format((STRIDEWIDTH_POOL_M2),int(DATAWIDTH_M2/2),(DATAWIDTH_M2+1)))
file.write('  \n')
file.write('  always@(posedge done_shift_m2 or posedge rst_m2)begin\n')
file.write('      if(rst_m2)begin\n')
file.write('          count_m2=0;\n')
file.write('      end\n')
file.write('      else begin\n')
file.write('          if(count_m2<1)begin\n')
file.write('              count_m2=count_m2+1;\n')
file.write('          end\n')
file.write('          else\n')
file.write("""              count_m2=2'hX;\n""")
file.write('      end\n')
file.write('  end\n')
file.write('  \n')
file.write('  ////////////////////////////////// maxpool m2 //////////////////////////////////\n')
file.write('  always@(*)begin\n')
file.write('      case(state_m2)\n')
file.write('          0:begin\n')
file.write('              en_shift_m2=0;\n')
file.write('              rst_shift_m2=1;\n')
file.write('          end\n')
file.write('          1:begin\n')
file.write('              en_shift_m2=1;\n')
file.write('              rst_shift_m2=0;\n')
file.write('          end\n')
file.write('          2:begin\n')
file.write('              en_shift_m2=0;\n')
file.write('              rst_shift_m2=1;\n')
file.write('          end\n')
file.write('          3:begin\n')
file.write('              en_shift_m2=0;\n')
file.write('              rst_shift_m2=0;\n')
file.write('          end\n')
file.write('          default:begin\n')
file.write('              en_shift_m2=0;\n')
file.write('              rst_shift_m2=1;\n')
file.write('          end\n')
file.write('      endcase\n')
file.write('      if(count_m2==1)begin\n')
file.write("""          done_m2=1'b1;\n""")
file.write('      end\n')
file.write('      else begin\n')
file.write("""          done_m2=1'b0;\n""")
file.write('      end\n')
file.write('  end\n')
file.write('  \n')
file.write('      ////////////////////////////////// shift window m2 //////////////////////////////////\n')
file.write('  always@(posedge done_mk_m2 or posedge rst_shift_m2)begin\n')
file.write('      if(rst_shift_m2)begin\n')
file.write('          count_shift_m2=0;\n')
for i in range(1,FILTERBATCH_C2+1):
    file.write('          din_buf_0_m2_ch{}=0;\n'.format(i))
file.write('          a=1;\n')
file.write('      end\n')
file.write('      else begin\n')
file.write('          if(count_shift_m2<{})begin\n'.format(DATAWIDTH_D1*DATAHEIGHT_D1))
file.write('              if(count_shift_m2==a*{}-1 && '.format(DATAWIDTH_D1))
for i in range(1,FILTERBATCH_C2+1):
    if(i==FILTERBATCH_C2):
        file.write('!done_mk_m2_row_ch{}'.format(i))
    else:
        file.write('!done_mk_m2_row_ch{} && '.format(i))
file.write(')begin\n')
file.write('                  a=a+1;\n')
for i in range(1,FILTERBATCH_C2+1):
    file.write("""                  done_mk_m2_row_ch{}=1'b1;\n""".format(i))
file.write('              end\n')
file.write('              else begin\n')
file.write('                  count_shift_m2=count_shift_m2+1;\n')
for i in range(1,FILTERBATCH_C2+1):
    file.write('                  din_buf_0_m2_ch{}=result_temp_mk_m2_ch{};\n'.format(i,i))
file.write('              end\n')
file.write('          end\n')
file.write('          else\n')
file.write("""              count_shift_m2=5'hX;\n""")
file.write('      end\n')
file.write('  end\n')
file.write('  \n')
file.write('  always@(*)begin\n')
file.write('      case(state_shift_m2)\n')
file.write('          0:begin\n')
file.write('              en_mk_m2=0;\n')
file.write('              rst_mk_m2=1;\n')
file.write('              window_select_m2=0;\n')
file.write('          end\n')
file.write('          1:begin\n')
file.write('              en_mk_m2=1;\n')
file.write('              rst_mk_m2=0;\n')
file.write('              window_select_m2=count_shift_m2;\n')
file.write('          end\n')
file.write('          2:begin\n')
file.write('              en_mk_m2=0;\n')
file.write('              rst_mk_m2=1;\n')
file.write('              window_select_m2=0;\n')
file.write('          end\n')
file.write('          default:begin\n')
file.write('              en_mk_m2=0;\n')
file.write('              rst_mk_m2=1;\n')
file.write('              window_select_m2=0;\n')
file.write('          end\n')
file.write('      endcase\n')
file.write('      if(count_shift_m2=={})begin\n'.format(DATAWIDTH_D1*DATAHEIGHT_D1))
file.write("""          done_shift_m2=1'b1;\n""")
file.write('      end\n')
file.write('      else begin\n')
file.write("""          done_shift_m2=1'b0;\n""")
file.write('      end\n')
file.write('  end\n')
file.write('  \n')
file.write('  always@(posedge rst_mk_m2)begin\n')
for i in range(1,FILTERBATCH_C2+1):
    file.write('      done_mk_m2_row_ch{}=0;\n'.format(i))
file.write('  end\n')
file.write('  \n')
file.write('      /////////////////////////////////// maxppol kernel m2 ///////////////////////////////////\n')
file.write('  \n')
for i in range(1,FILTERBATCH_C2+1):
    for j in range(KERNELWIDTH_POOL_M2*KERNELHEIGHT_POOL_M2):
        file.write('  assign element_mk_m2_ch{}[{}]=X_mk_m2_ch{}[{}:{}];\n'.format(i,j,i,(j*BITWIDTH_M2),(j*BITWIDTH_M2+BITWIDTH_M2-1)))
    file.write('  \n')
file.write('  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n')
file.write('  //////////////////////////////////////////////////////Dense Layer 1/////////////////////////////////////////////////////////\n')
file.write('  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n')
file.write('  \n')
#for i in range(NEURONS_D1):
#    file.write('  assign bias{}=bias_d1[{}:{}]<<6;\n'.format(i,(i*BITWIDTH_B),((i+1)*BITWIDTH_B-1)))
#file.write('  \n')
file.write('  always@(posedge done_nc_d1 or posedge rst_d1)begin\n')
file.write('      if(rst_d1)begin\n')
file.write('          count_d1=0;\n')
for i in range(1,FILTERBATCH_C2+1):
    for j in range(NEURONS_D1):
        file.write('          buf{}_ch{}=0;\n'.format(j,i))
    file.write('  \n')
file.write('      end\n')
file.write('      else begin\n')
file.write('          if(count_d1<25)begin\n')
file.write('              count_d1=count_d1+1;\n')
for i in range(1,FILTERBATCH_C2+1):
    for j in range(NEURONS_D1):
        file.write('              buf{}_ch{}=buf{}_ch{}+p{}_ch{};\n'.format(j,i,j,i,j,i))
    file.write('  \n')
file.write('          end\n')
file.write('          else begin\n')
file.write("""              count_d1=5'hX;\n""")
for i in range(1,FILTERBATCH_C2+1):
    for j in range(NEURONS_D1):
        file.write('              buf{}_ch{}=buf{}_ch{};\n'.format(j,i,j,i))
    file.write('  \n')
file.write('          end\n')
file.write('      end\n')
file.write('  end\n')
file.write('  \n')
file.write('  always@(*)begin\n')
file.write('      case(state_d1)\n')
file.write('          0:begin\n')
file.write('              en_nc_d1=0;\n')
file.write('              rst_nc_d1=1;\n')
file.write('              weight_select_d1=count_d1;\n')
file.write('          end\n')
file.write('          1:begin\n')
file.write('              en_nc_d1=1;\n')
file.write('              rst_nc_d1=0;\n')
file.write('              weight_select_d1=count_d1;\n')
file.write('          end\n')
file.write('          2:begin\n')
file.write('              en_nc_d1=0;\n')
file.write('              rst_nc_d1=1;\n')
file.write('              weight_select_d1=count_d1;\n')
file.write('          end\n')
file.write('          default:begin\n')
file.write('              en_nc_d1=0;\n')
file.write('              rst_nc_d1=1;\n')
file.write('              weight_select_d1=count_d1;\n')
file.write('          end\n')
file.write('      endcase\n')
file.write('      if(count_d1=={})begin\n'.format(DATAWIDTH_D1*DATAHEIGHT_D1))
for i in range(NEURONS_D1):
    file.write('          fc_out[{}:{}]='.format((i*BITWIDTH_SM),((i+1)*BITWIDTH_SM-1)))
    for j in range(1,FILTERBATCH_C2+1):
            file.write('buf{}_ch{} + '.format(i,j))
    file.write('(bias_d1[{}:{}]<<6);\n'.format((i*BITWIDTH_B),((i+1)*BITWIDTH_B-1)))
file.write("""          done_den1=1'b1;\n""")
file.write('      end\n')
file.write('      else begin\n')
file.write('          fc_out=0;\n')
file.write("""          done_den1=1'b0;\n""")
file.write('      end\n')
file.write('  end\n')
file.write('  \n')
file.write('      //////////////////////////////////// neuron calculation //////////////////////////////////\n')
file.write('  \n')
for i in range(1,FILTERBATCH_C2+1):
    for j in range(NEURONS_D1):
        file.write('  assign mem_w_nc_d1_ch{}[{}]= w_neuron_nc_d1_ch{}[{}:{}];\n'.format(i,j,i,(j*BITWIDTH_W),((j+1)*BITWIDTH_W-1)))
    file.write('  \n')
file.write('  always@(posedge (')
for i in range(1,FILTERBATCH_C2+1):
    if(i==FILTERBATCH_C2):
        file.write('done_m_nc_d1_ch{}'.format(i))
    else:
        file.write('done_m_nc_d1_ch{} && '.format(i))
file.write(') or posedge rst_nc_d1)begin\n')
file.write('      if(rst_nc_d1)begin\n')
file.write('          count_nc_d1=0;\n')
for i in range(1,FILTERBATCH_C2+1):
    file.write('          buffer_nc_d1_ch{}=0;\n'.format(i))
file.write('      end\n')
file.write('      else begin\n')
file.write('          if(count_nc_d1<{})begin\n'.format(NEURONS_D1))
file.write('              count_nc_d1=count_nc_d1+1;\n')
for i in range(1,FILTERBATCH_C2+1):
    file.write('              buffer_nc_d1_ch{} = {{buffer_nc_d1_ch{}[{}:{}],result_temp_m_nc_d1_ch{}}};\n'.format(i,i,(BITWIDTH_SM),(BITWIDTH_SM*NEURONS_D1-1),i))
file.write('          end\n')
file.write('      end\n')
file.write('  end\n')
file.write('  \n')
file.write('  always@(*)begin\n')
file.write('      case(state_nc_d1)\n')
file.write('          0:begin\n')
file.write('              en_m_nc_d1=0;\n')
file.write('              rst_m_nc_d1=1;\n')
for i in range(1,FILTERBATCH_C2+1):
    file.write('              w_in_m_nc_d1_ch{}=0;\n'.format(i))
file.write('          end\n')
file.write('          1:begin\n')
file.write('              en_m_nc_d1=1;\n')
file.write('              rst_m_nc_d1=0;\n')
for i in range(1,FILTERBATCH_C2+1):
    file.write('              w_in_m_nc_d1_ch{}=mem_w_nc_d1_ch{}[count_nc_d1];\n'.format(i,i))
file.write('          end\n')
file.write('          2:begin\n')
file.write('              en_m_nc_d1=0;\n')
file.write('              rst_m_nc_d1=1;\n')
for i in range(1,FILTERBATCH_C2+1):
    file.write('              w_in_m_nc_d1_ch{}=0;\n'.format(i))
file.write('          end\n')
file.write('          default:begin\n')
file.write('              en_m_nc_d1=0;\n')
file.write('              rst_m_nc_d1=1;\n')
for i in range(1,FILTERBATCH_C2+1):
    file.write('              w_in_m_nc_d1_ch{}=0;\n'.format(i))
file.write('          end\n')
file.write('      endcase\n')
file.write('      if (count_nc_d1=={})begin\n'.format(NEURONS_D1))
for i in range(1,FILTERBATCH_C2+1):
    for j in range(NEURONS_D1):
        file.write('          p{}_ch{}=buffer_nc_d1_ch{}[{}:{}];\n'.format(j,i,i,(j*BITWIDTH_SM),((j+1)*BITWIDTH_SM-1)))
    file.write('  \n')
file.write("""          done_nc_d1=1'b1;\n""")
file.write('      end\n')
file.write('      else begin\n')
for i in range(1,FILTERBATCH_C2+1):
    for j in range(NEURONS_D1):
        file.write('          p{}_ch{}=0;\n'.format(j,i))
    file.write('  \n')
file.write("""          done_nc_d1=1'b0;\n""")
file.write('      end\n')
file.write('  end\n')
file.write('  \n')
for i in range(1,FILTERBATCH_C2+1):
    file.write('  element_multiplier_d1#(BITWIDTH_M2,BITWIDTH_W,BITWIDTH_D1) element_mult_d1_ch{}(\n'.format(i))
    file.write('  .clk(clk),\n')
    file.write('  .in_ready(en_m_nc_d1),\n')
    file.write('  .rst(rst_m_nc_d1),\n')
    file.write('  .X_element(X_nc_d1_ch{}),\n'.format(i))
    file.write('  .W_element(w_in_m_nc_d1_ch{}),\n'.format(i))
    file.write('  .Z_element(result_temp_m_nc_d1_ch{}),\n'.format(i))
    file.write('  .done(done_m_nc_d1_ch{})\n'.format(i))
    file.write('  );\n')
    file.write('  \n')
file.write('  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n')
file.write('  //////////////////////////////////////////////////////Softmax Layer/////////////////////////////////////////////////////////\n')
file.write('  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n')
file.write('  always@(max)begin\n')
file.write('      if(i=={})begin\n'.format(NEURONS_D1))
file.write('          prediction=temp;\n')
file.write("""          done_soft=1'b1;\n""")
file.write('      end\n')
file.write('      else begin\n')
file.write("""          prediction=4'hX;\n""")
file.write("""          done_soft=1'b0;\n""")
file.write('      end\n')
file.write('  end\n')
file.write('endmodule\n')

file.close()


# In[ ]:




